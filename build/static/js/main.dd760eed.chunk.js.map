{"version":3,"sources":["Service/ApiService.ts","store/userSlice.ts","store/hooks.ts","components/LogInForm/Loginform.tsx","pages/Login.tsx","components/Layout/MainNavigation.tsx","components/Layout/DialogUndoingBox.tsx","components/Layout/Layout.tsx","components/MessageLogForm/AddNoteEn.tsx","components/MessageLogForm/NoteEn.tsx","components/MessageLogForm/NoteListEn.tsx","components/MessageLogForm/MessageLogFormEn.tsx","pages/MessageLogEn.tsx","components/MessageLogForm/AddNoteKr.tsx","components/MessageLogForm/NoteKr.tsx","components/MessageLogForm/NoteListKr.tsx","components/MessageLogForm/MessageLogFormKr.tsx","pages/MessageLogKr.tsx","components/SingInForm/SignInForm.tsx","pages/SignIn.tsx","components/ChangePasswordForm/ChangePasswordForm.tsx","pages/ChangePassword.tsx","components/Home/HomeFormEn.tsx","pages/HomePageEn.tsx","components/Home/HomeFormKr.tsx","pages/HomePageKr.tsx","components/UpdateProfileForm/UpdateProfileForm.tsx","pages/ChangeUserName.tsx","components/InitialPage/InitialPage.tsx","pages/InitialPage.tsx","App.tsx","Locales/i18n.ts","index.tsx"],"names":["logIn","enteredEmail","enteredPassword","a","fetch","method","body","JSON","stringify","email","password","returnSecureToken","headers","data","ok","console","log","Error","json","alert","signIn","userSlice","createSlice","name","initialState","user","idToken","isLoggedIn","lan","reducers","updateUser","state","action","payload","updateIdToken","updateIsLoggedIn","updateLanguage","store","configureStore","reducer","usersActions","actions","useAppSelector","useSelector","useAppDispatch","useDispatch","Login","dispatch","idRef","useRef","pwRef","navigate","useNavigate","t","useTranslation","Typography","variant","color","Divider","sx","backgroundColor","marginTop","Grid","container","spacing","style","item","xs","sm","TextField","required","input","borderRadius","border","margin","label","type","fullWidth","InputLabelProps","inputRef","onClick","current","value","then","r","registered","displayName","localStorage","setItem","Loginform","Navbar","i18n","Box","Toolbar","display","justifyContent","width","alignItems","padding","component","gutterBottom","onChange","e","target","changeLanguage","borderColor","DialogEquipment","open","close","useState","isBluePressed","setIsBluePressed","Dialog","onClose","maxWidth","DialogTitle","DialogContent","DialogContentText","align","flexDirection","md","height","src","href","DialogActions","Button","disabled","background","Layout","props","setOpen","handleClose","reduxUser","reduxIsLoggedIn","openBox","setOpenBox","icon","filter","Boolean","MainNavigation","transform","flexGrow","children","SpeedDial","ariaLabel","position","bottom","right","SpeedDialIcon","onOpen","map","SpeedDialAction","key","tooltipTitle","tooltipOpen","removeItem","DialogUndoingBox","AddNoteEn","titleRef","textRef","now","Date","reduxUserInfo","onSubmit","event","preventDefault","notes","title","text","date","toLocaleString","logger","AddNote","setIsbuttonPressed","className","htmlFor","id","ref","placeholder","rows","NoteEn","NoteListEn","overflowY","note","MessageLogFormEn","setNote","error","setError","isLoading","setIsLoading","isbuttonPressed","fetchNoteHandlerEn","useCallback","response","loadedNotes","push","reverse","message","useEffect","content","length","marginLeft","MessageLogEn","AddNoteKr","temp","temp2","NoteKr","NoteListKr","MessageLogFormKr","fetchNoteHandlerKr","MessageLogKr","SignInForm","SignIn","ChangePasswordForm","reduxidToken","formHandler","errorMessage","ChangePassword","HomeFormEn","theme","useTheme","matches","useMediaQuery","breakpoints","down","HomePageEn","HomeFormKr","HomePageKr","UpdateProfileForm","userRef","reduxLan","photoUrl","ChangeUserName","InitialPage","App","storedToken","getItem","storedIsLoggedIn","toLowerCase","storedUser","isMsgEn","isMsgKr","path","element","to","resources","en","kr","use","initReactI18next","init","lng","fallbackLng","default","debug","keySeparator","interpolation","escapeValue","react","useSuspense","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.dd760eed.chunk.js","sourcesContent":["const logIn = async (enteredEmail: string, enteredPassword: string) => {\n  try {\n    const data = await fetch(\n      \"https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyCkLePHqkPxNxPalsSLE_C4CbAaOiaGwNw\",\n      {\n        method: \"POST\",\n        body: JSON.stringify({\n          email: enteredEmail,\n          password: enteredPassword,\n          returnSecureToken: true,\n        }),\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      }\n    );\n    if (!data.ok) {\n      console.log(data);\n      let errorMessage = \"Authentication failed! \\n 로그인에 실패하였습니다.\";\n      throw new Error(errorMessage);\n    }\n    const json = await data.json();\n    console.log(json);\n    return json;\n  } catch (err) {\n    alert(err);\n  }\n};\n\nconst signIn = async (enteredEmail: string, enteredPassword: string) => {\n  try {\n    const data = await fetch(\n      \"https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyCkLePHqkPxNxPalsSLE_C4CbAaOiaGwNw\",\n      {\n        method: \"POST\",\n        body: JSON.stringify({\n          email: enteredEmail,\n          password: enteredPassword,\n          returnSecureToken: true,\n        }),\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      }\n    );\n    if (!data.ok) {\n      console.log(data);\n      let errorMessage =\n        \"Sign In failed! Password Should be more than 7 digits. \\n 회원가입에 실패하였습니다. 비밀번호는 7자 이상이여야 합니다.\";\n      throw new Error(errorMessage);\n    }\n    const json = await data.json();\n    console.log(json);\n    return json;\n  } catch (err) {\n    alert(err);\n  }\n};\n\nexport { logIn, signIn };\n","import { createSlice, configureStore, PayloadAction } from \"@reduxjs/toolkit\";\n\ntype initialState = {\n  user: string;\n  idToken: string;\n  isLoggedIn: boolean;\n  lan: string;\n};\n\nconst initialState: initialState = {\n  user: \"\",\n  idToken: \"\",\n  isLoggedIn: false,\n  lan: \"\",\n};\n\nconst userSlice = createSlice({\n  name: \"user\",\n  initialState: initialState,\n  reducers: {\n    updateUser(state, action: PayloadAction<string>) {\n      state.user = action.payload;\n    },\n    updateIdToken(state, action: PayloadAction<string>) {\n      state.idToken = action.payload;\n    },\n    updateIsLoggedIn(state, action: PayloadAction<boolean>) {\n      state.isLoggedIn = action.payload;\n    },\n    updateLanguage(state, action: PayloadAction<string>) {\n      state.lan = action.payload;\n    },\n  },\n});\n\n//Create the store\nconst store = configureStore({\n  reducer: userSlice.reducer,\n});\n\nexport const usersActions = userSlice.actions;\nexport default store;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from \"react-redux\";\nimport type { RootState, AppDispatch } from \"./userSlice\";\n\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\n","import { Divider } from \"@mui/material\";\nimport { TextField } from \"@mui/material\";\nimport { useTranslation } from \"react-i18next\";\nimport { Grid } from \"@mui/material\";\nimport { Typography } from \"@mui/material\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { logIn } from \"../../Service/ApiService\";\nimport { useNavigate } from \"react-router-dom\";\nimport { usersActions } from \"../../store/userSlice\";\nimport { useAppSelector, useAppDispatch } from \"../../store/hooks\";\n\nconst Login = () => {\n  const dispatch = useAppDispatch();\n  const idRef = useRef<HTMLInputElement>(null);\n  const pwRef = useRef<HTMLInputElement>(null);\n  let navigate = useNavigate();\n  const { t } = useTranslation(\"main\");\n\n  const formHandler = () => {\n    const a = logIn(idRef.current?.value!, pwRef.current?.value!);\n    a.then((r) => {\n      console.log(r);\n      if (\n        (r?.registered === true && r?.displayName === \"Hans\") ||\n        (r?.registered === true && r?.displayName === \"Sarah\")\n      ) {\n        dispatch(usersActions.updateIdToken(r.idToken));\n        dispatch(usersActions.updateIsLoggedIn(true));\n        dispatch(usersActions.updateUser(r?.displayName));\n        localStorage.setItem(\"token\", r.idToken);\n        localStorage.setItem(\"isLoggedIn\", \"true\");\n        localStorage.setItem(\"user\", r?.displayName);\n        navigate(\"/hompageen\");\n      } else if (\n        (r?.registered === true && r?.displayName === \"성재\") ||\n        (r?.registered === true && r?.displayName === \"엄마\") ||\n        (r?.registered === true && r?.displayName === \"은지\") ||\n        (r?.registered === true && r?.displayName === \"아빠\")\n      ) {\n        dispatch(usersActions.updateIdToken(r.idToken));\n        dispatch(usersActions.updateIsLoggedIn(true));\n        dispatch(usersActions.updateUser(r?.displayName));\n        localStorage.setItem(\"token\", r.idToken);\n        localStorage.setItem(\"isLoggedIn\", \"true\");\n        localStorage.setItem(\"user\", r?.displayName);\n        navigate(\"/hompagekr\");\n      } else if (r?.registered === true) {\n        alert(t(\"Loginform.formHandler.alert\"));\n      }\n    });\n  };\n\n  return (\n    <section>\n      <Typography variant=\"h6\" color=\"white\">\n        {t(\"Loginform.header\")}\n      </Typography>\n      <Divider sx={{ backgroundColor: \"white\", marginTop: \"10px\" }} />\n      <Grid container spacing={4} style={{ marginTop: \"10px\" }}>\n        <Grid item xs={12} sm={3}>\n          {}\n        </Grid>\n        <Grid item xs={12} sm={6}>\n          <TextField\n            required\n            color=\"primary\"\n            sx={{\n              input: {\n                borderRadius: \"5px\",\n                border: \"1px solid white\",\n                color: \"white\",\n              },\n            }}\n            margin=\"dense\"\n            name=\"Email\"\n            label={t(\"Loginform.input-email\")}\n            type=\"text\"\n            fullWidth\n            InputLabelProps={{\n              style: { color: \"#fff\" },\n            }}\n            inputRef={idRef}\n          />\n          <TextField\n            margin=\"dense\"\n            required\n            name=\"pw\"\n            sx={{\n              input: {\n                borderRadius: \"5px\",\n                border: \"1px solid white\",\n                color: \"white\",\n              },\n            }}\n            InputLabelProps={{\n              style: { color: \"#fff\" },\n            }}\n            label={t(\"Loginform.input-pd\")}\n            type=\"password\"\n            fullWidth\n            inputRef={pwRef}\n          />\n          <button style={{ marginTop: \"30px\" }} onClick={formHandler}>\n            {t(\"Loginform.button-submit\")}\n          </button>\n        </Grid>\n      </Grid>\n    </section>\n  );\n};\n\nexport default Login;\n","import React from \"react\";\nimport Loginform from \"../components/LogInForm/Loginform\";\n\nconst Login = () => {\n  return (\n    <>\n      <Loginform />\n    </>\n  );\n};\n\nexport default Login;\n","import { Toolbar, IconButton, Typography } from \"@mui/material\";\nimport React, { useEffect, useState } from \"react\";\nimport { Box } from \"@mui/system\";\nimport { useTranslation } from \"react-i18next\";\nimport { useAppSelector, useAppDispatch } from \"../../store/hooks\";\nimport { useNavigate } from \"react-router-dom\";\nimport { usersActions } from \"../../store/userSlice\";\n\nconst Navbar = () => {\n  let navigate = useNavigate();\n  const { t, i18n } = useTranslation(\"main\");\n\n  const LanguageChangeHandler = (e: React.ChangeEvent<HTMLSelectElement>) => {\n    console.log(e.target.value);\n    i18n.changeLanguage(e.target.value);\n  };\n\n  // const logoutHandler = () => {\n  //   dispatch(usersActions.updateIdToken(\"\"));\n  //   dispatch(usersActions.updateIsLoggedIn(false));\n  //   dispatch(usersActions.updateUser(\"\"));\n  //   localStorage.removeItem(\"token\");\n  //   localStorage.removeItem(\"isLoggedIn\");\n  //   localStorage.removeItem(\"user\");\n  //   navigate(\"/login\");\n  // };\n\n  return (\n    <>\n      <Box\n        sx={{\n          backgroundColor:\n            \"linear-gradient(to left, #3399ff 27%, #9999ff 100%);\",\n        }}\n      >\n        <Toolbar>\n          <Box\n            sx={{\n              display: \"flex\",\n              justifyContent: \"space-between\",\n              width: \"100%\",\n              alignItems: \"center\",\n              padding: \"10px 0px\",\n            }}\n            component=\"div\"\n          >\n            <Typography\n              variant=\"body2\"\n              component=\"div\"\n              gutterBottom\n              sx={{ color: \"white\" }}\n            >\n              InterLogger v3\n            </Typography>\n            <select\n              onChange={LanguageChangeHandler}\n              style={{\n                color: \"white\",\n                backgroundColor: \"#00000000\",\n                borderColor: \"#00000000\",\n              }}\n            >\n              <option value=\"kr\">한국어</option>\n              <option value=\"en\">English</option>\n            </select>\n          </Box>\n        </Toolbar>\n      </Box>\n    </>\n  );\n};\n\nexport default Navbar;\n","/* eslint-disable react/jsx-boolean-value */\n/* eslint-disable no-useless-escape */\n/* eslint-disable arrow-body-style */\n/* eslint-disable no-param-reassign */\n/* eslint-disable yoda */\n/* eslint-disable prefer-const */\n/* eslint-disable no-undef */\n/* eslint-disable no-unused-vars */\nimport Button from \"@mui/material/Button\";\nimport Dialog from \"@mui/material/Dialog\";\nimport DialogActions from \"@mui/material/DialogActions\";\nimport DialogContent from \"@mui/material/DialogContent\";\nimport DialogContentText from \"@mui/material/DialogContentText\";\nimport DialogTitle from \"@mui/material/DialogTitle\";\nimport PropTypes from \"prop-types\";\nimport Divider from \"@mui/material/Divider\";\nimport {\n  Grid,\n  TextField,\n  Box,\n  Typography,\n  Menu,\n  MenuItem,\n} from \"@mui/material\";\nimport { useState, useEffect } from \"react\";\nimport InputLabel from \"@mui/material/InputLabel\";\nimport FormControl from \"@mui/material/FormControl\";\nimport React from \"react\";\nimport { styled } from \"@mui/material/styles\";\n\ntype DialogEquipmentProps = {\n  open: boolean;\n  close: () => void;\n};\n\n// eslint-disable-next-line arrow-body-style\nconst DialogEquipment = ({ open, close }: DialogEquipmentProps) => {\n  const [isBluePressed, setIsBluePressed] = useState<boolean>(false);\n\n  return (\n    <>\n      <Dialog open={open} onClose={close} fullWidth={true} maxWidth=\"sm\">\n        <DialogTitle>Undoing Box</DialogTitle>\n        <DialogContent>\n          <DialogContentText align=\"left\">\n            <Grid\n              container\n              spacing={8}\n              sx={{\n                display: \"flex\",\n                alignItems: \"center\",\n                flexDirection: \"row\",\n              }}\n            >\n              {!isBluePressed && (\n                <Grid item xs={12} md={12}>\n                  <Typography variant=\"body2\">\n                    우리 이쁜이 안녕? You pressed this button because you wanted\n                    to say goodbye or break up to me, right? You must have had a\n                    hard time today. 우리 이쁜이. 너무 수고했어. <br />\n                  </Typography>\n                  <br />\n                  <Typography variant=\"body1\">\n                    Lets take some 5 min of Rest time first and cool down\n                    yourself.\n                  </Typography>\n                  <br />\n                  <Typography variant=\"body2\">\n                    Did you all rest? I think I've probably cleared my mind.\n                    Then let's press blue button. Then you'll change your mind\n                    about breaking up.\n                  </Typography>\n                </Grid>\n              )}\n            </Grid>\n            {isBluePressed && (\n              <Grid item xs={12} sm={12}>\n                <Box\n                  sx={{ width: \"400px\", height: \"600px\" }}\n                  component=\"img\"\n                  src=\"image/sarah.jpeg\"\n                ></Box>\n                <Typography variant=\"body2\">\n                  오빠도 우리돼지를 많이 사랑하고 믿지. 오빠랑 다시 한번\n                  전화해서 이야기 해보자 이쁜이. We cannot break easily like\n                  this. <br />\n                  We can fix the issue with call. Let make a call bae.\n                </Typography>\n                <br />\n                <a href=\"tel:+85267901714\"> 오빠한테 전화 걸기 </a>\n              </Grid>\n            )}\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button\n            variant=\"contained\"\n            style={{ color: \"white\" }}\n            onClick={() => {\n              setIsBluePressed(true);\n            }}\n            disabled={isBluePressed}\n          >\n            Press Me\n          </Button>\n          <Button\n            variant=\"contained\"\n            style={{ color: \"white\", background: \"red\" }}\n            onClick={() => {\n              close();\n              setIsBluePressed(false);\n            }}\n          >\n            Close\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </>\n  );\n};\n\nexport default DialogEquipment;\n","import MainNavigation from \"./MainNavigation\";\nimport React, { useState } from \"react\";\nimport Box from \"@mui/material/Box\";\nimport SpeedDial from \"@mui/material/SpeedDial\";\nimport SpeedDialIcon from \"@mui/material/SpeedDialIcon\";\nimport SpeedDialAction from \"@mui/material/SpeedDialAction\";\nimport LoginIcon from \"@mui/icons-material/Login\";\nimport LogoutIcon from \"@mui/icons-material/Logout\";\nimport AddToHomeScreenIcon from \"@mui/icons-material/AddToHomeScreen\";\nimport VpnKeyIcon from \"@mui/icons-material/VpnKey\";\nimport DateRangeIcon from \"@mui/icons-material/DateRange\";\nimport { useAppSelector, useAppDispatch } from \"../../store/hooks\";\nimport MessageIcon from \"@mui/icons-material/Message\";\nimport HomeIcon from \"@mui/icons-material/Home\";\nimport { usersActions } from \"../../store/userSlice\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useTranslation } from \"react-i18next\";\nimport DialogUndoingBox from \"./DialogUndoingBox\";\n\nconst Layout = (props: { children: React.ReactFragment }) => {\n  const [open, setOpen] = useState(false);\n  const { t } = useTranslation(\"main\");\n  const handleOpen = () => setOpen(true);\n  const handleClose = () => setOpen(false);\n  const dispatch = useAppDispatch();\n  let navigate = useNavigate();\n  const reduxUser: string = useAppSelector((state) => state.user);\n  const reduxIsLoggedIn = useAppSelector((state) => state.isLoggedIn);\n  const [openBox, setOpenBox] = useState(false);\n\n  const dialogClickHandler = () => {\n    setOpenBox(true);\n  };\n\n  const dialogCloseHandler = () => {\n    setOpenBox(false);\n  };\n\n  const actions = [\n    reduxIsLoggedIn\n      ? { icon: <LogoutIcon />, name: t(`Layout.iconText-logout`) }\n      : { icon: <LoginIcon />, name: t(`Layout.iconText-login`) },\n    !reduxIsLoggedIn\n      ? { icon: <AddToHomeScreenIcon />, name: t(`Layout.iconText-signin`) }\n      : null,\n    reduxIsLoggedIn\n      ? { icon: <VpnKeyIcon />, name: t(`Layout.iconText-changepw`) }\n      : null,\n    reduxIsLoggedIn\n      ? reduxUser === \"성재\" ||\n        reduxUser === \"엄마\" ||\n        reduxUser === \"아빠\" ||\n        reduxUser === \"은지\"\n        ? { icon: <MessageIcon />, name: \"메세지 로그\" }\n        : { icon: <MessageIcon />, name: \"Message Log\" }\n      : null,\n    reduxIsLoggedIn\n      ? reduxUser === \"성재\" ||\n        reduxUser === \"엄마\" ||\n        reduxUser === \"아빠\" ||\n        reduxUser === \"은지\"\n        ? { icon: <HomeIcon />, name: \"홈\" }\n        : { icon: <HomeIcon />, name: \"Home\" }\n      : null,\n    reduxIsLoggedIn\n      ? reduxUser === \"성재\" ||\n        reduxUser === \"엄마\" ||\n        reduxUser === \"아빠\" ||\n        reduxUser === \"은지\"\n        ? null\n        : { icon: <DateRangeIcon />, name: \"Undoing Box\" }\n      : null,\n  ].filter(Boolean);\n\n  const logoutHandler = () => {\n    dispatch(usersActions.updateIdToken(\"\"));\n    dispatch(usersActions.updateIsLoggedIn(false));\n    dispatch(usersActions.updateUser(\"\"));\n    localStorage.removeItem(\"token\");\n    localStorage.removeItem(\"isLoggedIn\");\n    localStorage.removeItem(\"user\");\n    navigate(\"/login\");\n  };\n\n  console.log(reduxUser);\n  return (\n    <div>\n      <MainNavigation />\n      <Box\n        sx={{\n          height: 330,\n          transform: \"translateZ(0px)\",\n          flexGrow: 1,\n        }}\n      >\n        <main>{props.children}</main>\n        <SpeedDial\n          ariaLabel=\"SpeedDial tooltip example\"\n          sx={{\n            position: \"absolute\",\n            bottom: -200,\n            right: 17,\n          }}\n          icon={<SpeedDialIcon />}\n          onClose={handleClose}\n          onOpen={handleOpen}\n          open={open}\n        >\n          {actions.map((action) => (\n            <SpeedDialAction\n              key={action?.name}\n              icon={action?.icon}\n              tooltipTitle={action?.name}\n              tooltipOpen\n              onClick={() => {\n                if (action?.name === \"LogIn\" || action?.name === \"로그인\") {\n                  navigate(\"/login\");\n                } else if (\n                  action?.name === \"LogOut\" ||\n                  action?.name === \"로그아웃\"\n                ) {\n                  logoutHandler();\n                } else if (\n                  action?.name === \"SingIn\" ||\n                  action?.name === \"가입하기\"\n                ) {\n                  navigate(\"/signin\");\n                } else if (\n                  action?.name === \"Change Password\" ||\n                  action?.name === \"비밀번호 변경\"\n                ) {\n                  navigate(\"/changepassword\");\n                } else if (action?.name === \"Message Log\") {\n                  navigate(\"/msglogen\");\n                } else if (action?.name === \"메세지 로그\") {\n                  navigate(\"/msglogkr\");\n                } else if (action?.name === \"Home\") {\n                  navigate(\"/hompageen\");\n                } else if (action?.name === \"홈\") {\n                  navigate(\"/hompagekr\");\n                } else if (action?.name === \"메세지 로그\") {\n                  navigate(\"/hompagekr\");\n                } else if (action?.name === \"Undoing Box\") {\n                  dialogClickHandler();\n                }\n                handleClose();\n              }}\n            />\n          ))}\n        </SpeedDial>\n      </Box>\n      <DialogUndoingBox open={openBox} close={dialogCloseHandler} />\n    </div>\n  );\n};\n\nexport default Layout;\n","import { string } from \"@inovua/reactdatagrid-community/filterTypes\";\nimport React, { useRef } from \"react\";\nimport { useAppSelector, useAppDispatch } from \"../../store/hooks\";\nimport \"./AddNote.css\";\n\ntype AddNoteENProps = {\n  //optional chianing\n  AddNote: (notes: {\n    title?: string;\n    text?: string;\n    date?: string;\n    logger?: string;\n  }) => void;\n\n  logger: string;\n  setIsbuttonPressed: (boolean: boolean) => void;\n};\n\nfunction AddNoteEn(props: AddNoteENProps) {\n  const titleRef = useRef<HTMLInputElement>(null);\n  const textRef = useRef<HTMLTextAreaElement>(null);\n  const now = new Date();\n  const reduxUserInfo = useAppSelector((state) => state.user);\n\n  function submitHandler(event: React.FormEvent) {\n    if (titleRef.current?.value && textRef.current?.value) {\n      event.preventDefault();\n      const notes = {\n        title: titleRef.current?.value,\n        text: textRef.current?.value,\n        date: now.toLocaleString(),\n        logger: reduxUserInfo,\n      };\n\n      props.AddNote(notes);\n      props.setIsbuttonPressed(false);\n      titleRef.current!.value = \"\";\n      textRef.current!.value = \"\";\n    } else {\n      alert(\"Please input required fields.\");\n    }\n  }\n\n  return (\n    <form onSubmit={submitHandler}>\n      <div className=\"control\">\n        <label htmlFor=\"title\">Title</label>\n        <input\n          type=\"text\"\n          id=\"title\"\n          ref={titleRef}\n          style={{ color: \"white\" }}\n          placeholder=\"Log the title here..!\"\n        />\n      </div>\n      <div className=\"control\">\n        <label htmlFor=\"text-log\">Text Log</label>\n        <textarea\n          rows={5}\n          id=\"text-log\"\n          ref={textRef}\n          style={{ color: \"white\" }}\n          placeholder=\"Log the past event that you want to mention..\"\n        ></textarea>\n      </div>\n      <button>Submit</button>\n    </form>\n  );\n}\n\nexport default AddNoteEn;\n","import React from \"react\";\n\nimport \"./Note.css\";\n\nconst NoteEn = (props: {\n  title:\n    | boolean\n    | React.ReactChild\n    | React.ReactFragment\n    | React.ReactPortal\n    | null\n    | undefined;\n  text:\n    | boolean\n    | React.ReactChild\n    | React.ReactFragment\n    | React.ReactPortal\n    | null\n    | undefined;\n  date:\n    | boolean\n    | React.ReactChild\n    | React.ReactFragment\n    | React.ReactPortal\n    | null\n    | undefined;\n}) => {\n  return (\n    <div>\n      <li className=\"note \">\n        <h3>{props.title}</h3>\n        <p>{props.text}</p>\n        <h6>{props.date}</h6>\n      </li>\n    </div>\n  );\n};\n\nexport default NoteEn;\n","import React from \"react\";\nimport Note from \"./NoteEn\";\nimport \"./NoteList.css\";\n\nconst NoteListEn = (props: { note: any[] }) => {\n  return (\n    <div style={{ overflowY: \"scroll\", height: 400 }}>\n      <ul className=\"note-list\">\n        {props.note.map((note) => (\n          <Note\n            key={note.id}\n            title={note.title}\n            date={note.date}\n            text={note.text}\n          />\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default NoteListEn;\n","import React, { useState, useEffect, useCallback } from \"react\";\nimport AddNoteEn from \"./AddNoteEn\";\nimport { useAppSelector, useAppDispatch } from \"../../store/hooks\";\nimport { useNavigate } from \"react-router-dom\";\nimport { usersActions } from \"../../store/userSlice\";\nimport NoteListEn from \"./NoteListEn\";\nconst MessageLogFormEn = () => {\n  const reduxUser: string = useAppSelector((state) => state.user);\n  const dispatch = useAppDispatch();\n  const [note, setNote] = useState<\n    { id: string; title: any; text: any; date: string }[]\n  >([]);\n  const [error, setError] = useState<string>(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  const [isbuttonPressed, setIsbuttonPressed] = useState<boolean>(false);\n  let navigate = useNavigate();\n\n  const fetchNoteHandlerEn = useCallback(async () => {\n    setIsLoading(true);\n    setError(\"\");\n    try {\n      const response = await fetch(\n        \"https://react-http-2887f-default-rtdb.firebaseio.com/notes.json\"\n      );\n      if (!response.ok) {\n        throw new Error(\"Something went wrong!\");\n      }\n\n      const data = await response.json();\n      console.log(data);\n      const loadedNotes: { id: string; title: any; text: any; date: string }[] =\n        [];\n      for (const key in data) {\n        loadedNotes.push({\n          id: key,\n          title: data[key].title,\n          text: data[key].text,\n          date: `${data[key].logger} logged message at ${data[key].date}....`,\n        });\n      }\n      loadedNotes.reverse();\n      console.log(loadedNotes);\n      setNote(loadedNotes);\n    } catch (err) {\n      if (err instanceof Error) {\n        setError(err.message);\n      }\n    }\n    setIsLoading(false);\n  }, []);\n\n  async function addNoteHandlerEn(note: {\n    id?: string;\n    title?: string;\n    text?: string;\n    date?: string;\n  }) {\n    const response = await fetch(\n      \"https://react-http-2887f-default-rtdb.firebaseio.com/notes.json\",\n      {\n        method: \"POST\",\n        body: JSON.stringify(note),\n        headers: {\n          \"Content-Type\": \"appication/json\",\n        },\n      }\n    );\n    const data = await response.json();\n    console.log(data);\n    alert(`Message is successfully added..!`);\n    fetchNoteHandlerEn();\n  }\n\n  useEffect(() => {\n    fetchNoteHandlerEn();\n  }, [fetchNoteHandlerEn]);\n\n  let content = <p style={{ color: \"white\" }}>Found no Notes.</p>;\n\n  if (note.length > 0) {\n    content = <NoteListEn note={note} />;\n  }\n\n  if (error) {\n    content = <p style={{ color: \"white\" }}>{error}</p>;\n  }\n\n  if (isLoading) {\n    content = <p style={{ color: \"white\" }}>Loading...</p>;\n  }\n\n  return (\n    <div>\n      <section>\n        <h3 style={{ color: \"white\" }}>Welcome..! {reduxUser} </h3>\n        <button onClick={fetchNoteHandlerEn}>Update Notes</button>\n        <button\n          onClick={() => {\n            setIsbuttonPressed(true);\n          }}\n          style={{ marginLeft: \"20px\" }}\n        >\n          Write Log\n        </button>\n      </section>\n      {isbuttonPressed && (\n        <section>\n          <h3 style={{ color: \"white\" }}>Log Format</h3>\n          <AddNoteEn\n            AddNote={addNoteHandlerEn}\n            logger={reduxUser}\n            setIsbuttonPressed={setIsbuttonPressed}\n          ></AddNoteEn>\n        </section>\n      )}\n      <section>\n        <h3 style={{ color: \"white\" }}>Log</h3>\n        {content}\n      </section>\n    </div>\n  );\n};\n\nexport default MessageLogFormEn;\n","import React from \"react\";\nimport MessageLogFormEn from \"../components/MessageLogForm/MessageLogFormEn\";\n\nconst MessageLogEn = () => {\n  return <MessageLogFormEn />;\n};\n\nexport default MessageLogEn;\n","import React, { useRef } from \"react\";\nimport \"./AddNote.css\";\nimport { useAppSelector, useAppDispatch } from \"../../store/hooks\";\n\ntype AddNoteKRProps = {\n  //optional chianing\n  AddNote: (notes: {\n    title?: string;\n    text?: string;\n    date?: string;\n    logger?: string;\n  }) => void;\n\n  logger: string;\n  setIsbuttonPressed: (boolean: boolean) => void;\n};\n\nfunction AddNoteKr(props: AddNoteKRProps) {\n  const titleRef = useRef<HTMLInputElement>(null);\n  const textRef = useRef<HTMLTextAreaElement>(null);\n  const now = new Date();\n  const reduxUserInfo = useAppSelector((state) => state.user);\n\n  function submitHandler(event: React.FormEvent) {\n    let temp = titleRef.current?.value;\n    let temp2 = textRef.current?.value;\n    if (temp && temp2) {\n      event.preventDefault();\n      const notes = {\n        title: titleRef.current?.value,\n        text: textRef.current?.value,\n        date: now.toLocaleString(),\n        logger: reduxUserInfo,\n      };\n\n      console.log(notes);\n      props.AddNote(notes);\n      props.setIsbuttonPressed(false);\n      titleRef.current!.value = \"\";\n      textRef.current!.value = \"\";\n    } else {\n      alert(\"제목과 내용을 모두 입력해주세요.\");\n    }\n    console.log({ temp, temp2 });\n  }\n\n  return (\n    <form onSubmit={submitHandler}>\n      <div className=\"control\">\n        <label htmlFor=\"title\">제목</label>\n        <input\n          type=\"text\"\n          id=\"title\"\n          ref={titleRef}\n          style={{ color: \"white\" }}\n          placeholder=\"제목을 입력하시오.\"\n        />\n      </div>\n      <div className=\"control\">\n        <label htmlFor=\"text-log\">내용</label>\n        <textarea\n          rows={5}\n          id=\"text-log\"\n          ref={textRef}\n          style={{ color: \"white\" }}\n          placeholder=\"남기고 싶은 말을 적으시오..\"\n        ></textarea>\n      </div>\n      <button>제출</button>\n    </form>\n  );\n}\n\nexport default AddNoteKr;\n","import React from \"react\";\n\nimport \"./Note.css\";\n\nconst NoteKr = (props: {\n  title:\n    | boolean\n    | React.ReactChild\n    | React.ReactFragment\n    | React.ReactPortal\n    | null\n    | undefined;\n  text:\n    | boolean\n    | React.ReactChild\n    | React.ReactFragment\n    | React.ReactPortal\n    | null\n    | undefined;\n  date:\n    | boolean\n    | React.ReactChild\n    | React.ReactFragment\n    | React.ReactPortal\n    | null\n    | undefined;\n}) => {\n  return (\n    <div>\n      <li className=\"note \">\n        <h3>{props.title}</h3>\n        <p>{props.text}</p>\n        <h6>{props.date}</h6>\n      </li>\n    </div>\n  );\n};\n\nexport default NoteKr;\n","import React from \"react\";\nimport Note from \"./NoteKr\";\nimport \"./NoteList.css\";\n\nconst NoteListKr = (props: { note: any[] }) => {\n  return (\n    <div style={{ overflowY: \"scroll\", height: 300 }}>\n      <ul className=\"note-list\">\n        {props.note.map((note) => (\n          <Note\n            key={note.id}\n            title={note.title}\n            date={note.date}\n            text={note.text}\n          />\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default NoteListKr;\n","import React, { useState, useEffect, useCallback } from \"react\";\nimport AddNoteKr from \"./AddNoteKr\";\nimport { useAppSelector, useAppDispatch } from \"../../store/hooks\";\nimport { useNavigate } from \"react-router-dom\";\nimport { usersActions } from \"../../store/userSlice\";\nimport NoteListKr from \"./NoteListKr\";\nconst MessageLogFormKr = () => {\n  const reduxUser = useAppSelector((state) => state.user);\n  const dispatch = useAppDispatch();\n  const [note, setNote] = useState<\n    { id: string; title: any; text: any; date: string }[]\n  >([]);\n  const [error, setError] = useState<string>(\"\");\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [isbuttonPressed, setIsbuttonPressed] = useState<boolean>(false);\n  let navigate = useNavigate();\n\n  const fetchNoteHandlerKr = useCallback(async () => {\n    setIsLoading(true);\n    setError(\"\");\n    try {\n      const response = await fetch(\n        \"https://react-http-2887f-default-rtdb.firebaseio.com/notes2.json\"\n      );\n      if (!response.ok) {\n        throw new Error(\"Something went wrong!\");\n      }\n\n      const data = await response.json();\n      const loadedNotes: { id: string; title: any; text: any; date: string }[] =\n        [];\n      for (const key in data) {\n        loadedNotes.push({\n          id: key,\n          title: data[key].title,\n          text: data[key].text,\n          date: `${data[key].logger}님이 ${data[key].date}에 남기셨습니다..`,\n        });\n      }\n      loadedNotes.reverse();\n      console.log(loadedNotes);\n      setNote(loadedNotes);\n    } catch (err) {\n      if (err instanceof Error) {\n        setError(err.message);\n      }\n    }\n    setIsLoading(false);\n  }, []);\n\n  async function addNoteHandlerKr(note: {\n    id?: string;\n    title?: any;\n    text?: any;\n    date?: string;\n  }) {\n    const response = await fetch(\n      \"https://react-http-2887f-default-rtdb.firebaseio.com/notes2.json\",\n      {\n        method: \"POST\",\n        body: JSON.stringify(note),\n        headers: {\n          \"Content-Type\": \"appication/json\",\n        },\n      }\n    );\n    const data = await response.json();\n    console.log(data);\n    alert(`메세지가 성공적으로 추가되었습니다.`);\n    fetchNoteHandlerKr();\n  }\n\n  useEffect(() => {\n    fetchNoteHandlerKr();\n  }, [fetchNoteHandlerKr]);\n\n  let content = <p style={{ color: \"white\" }}>Found no Notes.</p>;\n\n  if (note.length > 0) {\n    content = <NoteListKr note={note} />;\n  }\n\n  if (error) {\n    content = <p style={{ color: \"white\" }}>{error}</p>;\n  }\n\n  if (isLoading) {\n    content = <p style={{ color: \"white\" }}>Loading...</p>;\n  }\n\n  return (\n    <div>\n      <section>\n        <h3 style={{ color: \"white\" }}>반갑습니다.. {reduxUser}님.... </h3>\n        <button onClick={fetchNoteHandlerKr}>메세지 업데이트</button>\n        <button\n          onClick={() => {\n            setIsbuttonPressed(true);\n          }}\n          style={{ marginLeft: \"20px\" }}\n        >\n          메세지 적기\n        </button>\n      </section>\n      {isbuttonPressed && (\n        <section>\n          <h3 style={{ color: \"white\" }}>메세지 양식</h3>\n          <AddNoteKr\n            AddNote={addNoteHandlerKr}\n            logger={reduxUser}\n            setIsbuttonPressed={setIsbuttonPressed}\n          ></AddNoteKr>\n        </section>\n      )}\n      <section>\n        <h3 style={{ color: \"white\" }}>메세지 로그</h3>\n        {content}\n      </section>\n    </div>\n  );\n};\n\nexport default MessageLogFormKr;\n","import React from \"react\";\nimport MessageLogFormEn from \"../components/MessageLogForm/MessageLogFormKr\";\n\nconst MessageLogKr = () => {\n  return <MessageLogFormEn />;\n};\n\nexport default MessageLogKr;\n","import { Grid } from \"@mui/material\";\nimport { TextField } from \"@mui/material\";\nimport { Divider } from \"@mui/material\";\nimport { Typography } from \"@mui/material\";\nimport React, { useEffect, useRef } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useNavigate } from \"react-router-dom\";\nimport { signIn } from \"../../Service/ApiService\";\nimport { useAppSelector, useAppDispatch } from \"../../store/hooks\";\nimport { usersActions } from \"../../store/userSlice\";\n\nconst SignInForm = () => {\n  const idRef = useRef<HTMLInputElement>(null);\n  const pwRef = useRef<HTMLInputElement>(null);\n  let navigate = useNavigate();\n  const { t } = useTranslation(\"main\");\n\n  const formHandler = () => {\n    const a = signIn(idRef.current?.value!, pwRef.current?.value!);\n    a.then((r) => {\n      if (r?.idToken) {\n        alert(t(\"SignInForm.formHandler.alert\"));\n        navigate(\"/login\");\n      }\n    });\n  };\n\n  return (\n    <section>\n      <Typography variant=\"h6\" color=\"white\">\n        {t(\"SignInForm.header\")}\n        <br />\n        {t(\"SignInForm.header2\")}\n      </Typography>\n      <Divider sx={{ backgroundColor: \"white\", marginTop: \"10px\" }} />\n      <Grid container spacing={4} style={{ marginTop: \"10px\" }}>\n        <Grid item xs={12} sm={3}>\n          {}\n        </Grid>\n        <Grid item xs={12} sm={6}>\n          <TextField\n            required\n            color=\"primary\"\n            sx={{\n              input: {\n                borderRadius: \"5px\",\n                border: \"1px solid white\",\n                color: \"white\",\n              },\n            }}\n            InputLabelProps={{\n              style: { color: \"#fff\" },\n            }}\n            margin=\"dense\"\n            name=\"Email\"\n            label=\"Email\"\n            type=\"text\"\n            fullWidth\n            inputRef={idRef}\n          />\n          <TextField\n            margin=\"dense\"\n            required\n            name=\"pw\"\n            sx={{\n              input: {\n                borderRadius: \"5px\",\n                border: \"1px solid white\",\n                color: \"white\",\n              },\n            }}\n            InputLabelProps={{\n              style: { color: \"#fff\" },\n            }}\n            label=\"Password\"\n            type=\"password\"\n            fullWidth\n            inputRef={pwRef}\n          />\n          <button style={{ marginTop: \"30px\" }} onClick={formHandler}>\n            {t(\"SignInForm.button-submit\")}\n          </button>\n        </Grid>\n      </Grid>\n    </section>\n  );\n};\n\nexport default SignInForm;\n","import React from \"react\";\nimport SignInform from \"../components/SingInForm/SignInForm\";\nfunction SignIn() {\n  return <SignInform />;\n}\n\nexport default SignIn;\n","import { Divider } from \"@mui/material\";\nimport { TextField } from \"@mui/material\";\nimport { Grid } from \"@mui/material\";\nimport { Typography } from \"@mui/material\";\nimport React, { useRef } from \"react\";\nimport { logIn } from \"../../Service/ApiService\";\nimport { useNavigate } from \"react-router-dom\";\nimport { usersActions } from \"../../store/userSlice\";\nimport { useAppSelector, useAppDispatch } from \"../../store/hooks\";\nimport { useTranslation } from \"react-i18next\";\n\nconst ChangePasswordForm = () => {\n  const pwRef = useRef<HTMLInputElement>(null);\n  let navigate = useNavigate();\n  const reduxidToken: string = useAppSelector((state) => state.idToken);\n  const reduxLan: string = useAppSelector((state) => state.lan);\n  const { t } = useTranslation(\"main\");\n  const dispatch = useAppDispatch();\n\n  const logoutHandler = () => {\n    dispatch(usersActions.updateIdToken(\"\"));\n    dispatch(usersActions.updateIsLoggedIn(false));\n    dispatch(usersActions.updateUser(\"\"));\n    localStorage.removeItem(\"token\");\n    localStorage.removeItem(\"isLoggedIn\");\n    localStorage.removeItem(\"user\");\n    navigate(\"/login\");\n  };\n\n  const formHandler = async () => {\n    console.log(pwRef.current?.value);\n    try {\n      const data = await fetch(\n        \"https://identitytoolkit.googleapis.com/v1/accounts:update?key=AIzaSyCkLePHqkPxNxPalsSLE_C4CbAaOiaGwNw\",\n        {\n          method: \"POST\",\n          body: JSON.stringify({\n            idToken: reduxidToken,\n            password: pwRef.current?.value,\n            returnSecureToken: false,\n          }),\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n        }\n      );\n      if (!data.ok) {\n        console.log(data);\n        let errorMessage = t(\"ChangePasswordForm.formHandler-alert\");\n        throw new Error(errorMessage);\n      }\n\n      const json = await data.json();\n      console.log(json);\n      alert(t(\"ChangePasswordForm.formHandler-alert2\"));\n      logoutHandler();\n    } catch (err) {\n      alert(err);\n    }\n  };\n\n  console.log(reduxidToken);\n  return (\n    <section>\n      <Typography variant=\"h6\" color=\"white\">\n        {t(\"ChangePasswordForm.formHandler-header\")}\n      </Typography>\n      <Divider sx={{ backgroundColor: \"white\", marginTop: \"10px\" }} />\n      <Grid container spacing={4} style={{ marginTop: \"10px\" }}>\n        <Grid item xs={12} sm={3}>\n          {}\n        </Grid>\n        <Grid item xs={12} sm={6}>\n          <TextField\n            margin=\"dense\"\n            required\n            name=\"pw\"\n            sx={{\n              input: {\n                borderRadius: \"5px\",\n                border: \"1px solid white\",\n                color: \"white\",\n              },\n            }}\n            label={t(\"Loginform.input-pd\")}\n            type=\"password\"\n            fullWidth\n            inputRef={pwRef}\n            InputLabelProps={{\n              style: { color: \"#fff\" },\n            }}\n          />\n          <button style={{ marginTop: \"30px\" }} onClick={formHandler}>\n            {t(\"SignInForm.button-submit\")}\n          </button>\n        </Grid>\n      </Grid>\n    </section>\n  );\n};\n\nexport default ChangePasswordForm;\n","import React from \"react\";\nimport ChangePasswordForm from \"../components/ChangePasswordForm/ChangePasswordForm\";\nconst ChangePassword = () => {\n  return <ChangePasswordForm />;\n};\n\nexport default ChangePassword;\n","import { Divider } from \"@mui/material\";\n\nimport { Grid } from \"@mui/material\";\nimport { Typography, useMediaQuery } from \"@mui/material\";\nimport React from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useAppSelector, useAppDispatch } from \"../../store/hooks\";\nimport { Box } from \"@mui/material\";\nimport { useTheme } from \"@mui/material/styles\";\nconst HomeFormEn = () => {\n  let navigate = useNavigate();\n  const reduxUser = useAppSelector((state) => state.user);\n  const theme = useTheme();\n  const matches = useMediaQuery(theme.breakpoints.down(\"sm\"));\n\n  return (\n    <section>\n      <Typography variant=\"h6\" color=\"white\">\n        Welcome Back.. {reduxUser}..\n      </Typography>\n      <Divider sx={{ backgroundColor: \"white\", marginTop: \"10px\" }} />\n      <Grid container spacing={4} style={{ marginTop: \"10px\" }}>\n        <Grid item xs={12} sm={12}>\n          {!matches ? (\n            <Box\n              sx={{ width: \"400px\", height: \"600px\" }}\n              component=\"img\"\n              src=\"image/sarah.jpeg\"\n            ></Box>\n          ) : (\n            <Box\n              sx={{ width: \"300px\", height: \"400px\" }}\n              component=\"img\"\n              src=\"image/sarah.jpeg\"\n            ></Box>\n          )}\n        </Grid>\n        <Grid item xs={12} sm={12}>\n          <button\n            style={{ marginTop: \"30px\" }}\n            onClick={() => {\n              navigate(\"/msglogen\");\n            }}\n          >\n            Log Message\n          </button>\n        </Grid>\n      </Grid>\n    </section>\n  );\n};\n\nexport default HomeFormEn;\n","import React from \"react\";\nimport HomeFormEnForm from \"../components/Home/HomeFormEn\";\nconst HomePageEn = () => {\n  return <HomeFormEnForm />;\n};\n\nexport default HomePageEn;\n","import { Divider } from \"@mui/material\";\n\nimport { Grid } from \"@mui/material\";\nimport { Typography, useMediaQuery } from \"@mui/material\";\nimport React from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { usersActions } from \"../../store/userSlice\";\nimport { useAppSelector, useAppDispatch } from \"../../store/hooks\";\nimport { Box } from \"@mui/material\";\nimport { useTheme } from \"@mui/material/styles\";\n\nconst HomeFormKr = () => {\n  let navigate = useNavigate();\n  const reduxUser = useAppSelector((state) => state.user);\n  const theme = useTheme();\n  const matches = useMediaQuery(theme.breakpoints.down(\"sm\"));\n  return (\n    <section>\n      <Typography variant=\"h6\" color=\"white\">\n        환영합니다.. {reduxUser} 님..\n      </Typography>\n      <Divider sx={{ backgroundColor: \"white\", marginTop: \"10px\" }} />\n      <Grid container style={{ marginTop: \"10px\" }}></Grid>\n      {!matches ? (\n        <Grid item xs={12} sm={12}>\n          <Box\n            sx={{ width: \"600px\", height: \"400px\", marginLeft: \"-10px\" }}\n            component=\"img\"\n            src=\"image/family.jpeg\"\n          ></Box>\n          <button\n            style={{ marginTop: \"30px\" }}\n            onClick={() => {\n              navigate(\"/msglogkr\");\n            }}\n          >\n            메세지 남기러 가기\n          </button>\n        </Grid>\n      ) : (\n        <Grid item xs={12} sm={12}>\n          <Box\n            sx={{ width: \"300px\", height: \"300px\", marginLeft: \"-10px\" }}\n            component=\"img\"\n            src=\"image/family.jpeg\"\n          ></Box>\n          <button\n            style={{ marginTop: \"30px\" }}\n            onClick={() => {\n              navigate(\"/msglogkr\");\n            }}\n          >\n            메세지 남기러 가기\n          </button>\n        </Grid>\n      )}\n    </section>\n  );\n};\n\nexport default HomeFormKr;\n","import React from \"react\";\nimport HomeFormKrForm from \"../components/Home/HomeFormKr\";\nconst HomePageKr = () => {\n  return <HomeFormKrForm />;\n};\n\nexport default HomePageKr;\n","import { Divider } from \"@mui/material\";\nimport { TextField } from \"@mui/material\";\nimport { Grid } from \"@mui/material\";\nimport { Typography } from \"@mui/material\";\nimport React, { useRef } from \"react\";\nimport { logIn } from \"../../Service/ApiService\";\nimport { useNavigate } from \"react-router-dom\";\nimport { usersActions } from \"../../store/userSlice\";\nimport { useAppSelector, useAppDispatch } from \"../../store/hooks\";\n\nconst UpdateProfileForm = () => {\n  const userRef = useRef<HTMLInputElement>(null);\n  let navigate = useNavigate();\n  const reduxidToken = useAppSelector((state) => state.idToken);\n  const reduxLan = useAppSelector((state) => state.lan);\n\n  const formHandler = async () => {\n    console.log(userRef.current?.value);\n    try {\n      const data = await fetch(\n        \"https://identitytoolkit.googleapis.com/v1/accounts:update?key=AIzaSyCkLePHqkPxNxPalsSLE_C4CbAaOiaGwNw\",\n        {\n          method: \"POST\",\n          body: JSON.stringify({\n            idToken: reduxidToken,\n            displayName: userRef.current?.value,\n            photoUrl: null,\n            returnSecureToken: false,\n          }),\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n        }\n      );\n      if (!data.ok) {\n        console.log(data);\n        let errorMessage =\n          reduxLan === \"한국어\"\n            ? \"사용자 이름 변경에 실패하였습니다.\"\n            : \"Failed to change user name.\";\n        throw new Error(errorMessage);\n      }\n      const json = await data.json();\n      console.log(json);\n      alert(\"성공하였습니다.\");\n    } catch (err) {\n      alert(err);\n    }\n  };\n\n  console.log(reduxidToken);\n  return (\n    <section>\n      <Typography variant=\"h6\" color=\"white\">\n        변경할 사용자 이름을 입력해 주세요.\n        {reduxLan === \"한국어\"\n          ? \"변경할 사용자 이름을 입력해 주세요.\"\n          : \"Input the username that you want to change.\"}\n      </Typography>\n      <Divider sx={{ backgroundColor: \"white\", marginTop: \"10px\" }} />\n      <Grid container spacing={4} style={{ marginTop: \"10px\" }}>\n        <Grid item xs={12} sm={3}>\n          {}\n        </Grid>\n        <Grid item xs={12} sm={6}>\n          <TextField\n            margin=\"dense\"\n            required\n            name=\"Username\"\n            sx={{\n              input: {\n                borderRadius: \"5px\",\n                border: \"1px solid white\",\n                color: \"white\",\n              },\n            }}\n            InputLabelProps={{\n              style: { color: \"#fff\" },\n            }}\n            label=\"Username\"\n            type=\"Username\"\n            fullWidth\n            inputRef={userRef}\n          />\n          <button style={{ marginTop: \"30px\" }} onClick={formHandler}>\n            Submit\n          </button>\n        </Grid>\n      </Grid>\n    </section>\n  );\n};\n\nexport default UpdateProfileForm;\n","import React from \"react\";\nimport ChangeUserNameForm from \"../components/UpdateProfileForm/UpdateProfileForm\";\nconst ChangeUserName = () => {\n  return <ChangeUserNameForm />;\n};\n\nexport default ChangeUserName;\n","import { Divider } from \"@mui/material\";\nimport { Grid } from \"@mui/material\";\nimport { Typography } from \"@mui/material\";\nimport React from \"react\";\nimport { useTranslation } from \"react-i18next\";\n\nconst InitialPage = () => {\n  const { t } = useTranslation(\"main\");\n  return (\n    <section>\n      <Typography variant=\"h6\" color=\"white\">\n        Internet Logger v3\n      </Typography>\n      <Divider sx={{ backgroundColor: \"white\", marginTop: \"10px\" }} />\n      <Grid container style={{ marginTop: \"10px\" }}></Grid>\n      <Grid item xs={12} sm={12}>\n        <Typography variant=\"h6\" color=\"white\">\n          {t(\"InitialPage.header\")}\n        </Typography>\n      </Grid>\n    </section>\n  );\n};\n\nexport default InitialPage;\n","import React from \"react\";\nimport InitialPageForm from \"../components/InitialPage/InitialPage\";\nconst InitialPage = () => {\n  return <InitialPageForm />;\n};\n\nexport default InitialPage;\n","import React, { useEffect } from \"react\";\nimport { Routes, Route, Navigate } from \"react-router-dom\";\nimport \"./App.css\";\nimport Login from \"./pages/Login\";\nimport Layout from \"./components/Layout/Layout\";\nimport MessageLogEn from \"./pages/MessageLogEn\";\nimport MessageLogKr from \"./pages/MessageLogKr\";\nimport SignIn from \"./pages/SignIn\";\nimport ChangePassword from \"./pages/ChangePassword\";\nimport HomePageEn from \"./pages/HomePageEn\";\nimport HomePageKr from \"./pages/HomePageKr\";\nimport ChangeUserName from \"./pages/ChangeUserName\";\nimport InitialPage from \"./pages/InitialPage\";\n// import { useSelector, useDispatch } from \"react-redux\";\nimport { useAppSelector, useAppDispatch } from \"./store/hooks\";\nimport { usersActions } from \"./store/userSlice\";\n\nfunction App() {\n  const reduxIsLoggedIn: boolean = useAppSelector((state) => state.isLoggedIn);\n  const reduxUser: string = useAppSelector((state) => state.user);\n  const dispatch = useAppDispatch();\n  const storedToken: string = localStorage.getItem(\"token\") as string;\n  const storedIsLoggedIn: boolean =\n    localStorage.getItem(\"isLoggedIn\")!?.toLowerCase() === \"true\";\n  const storedUser: string = localStorage.getItem(\"user\") as string;\n\n  useEffect(() => {\n    if (storedIsLoggedIn) {\n      dispatch(usersActions.updateIdToken(storedToken));\n      dispatch(usersActions.updateUser(storedUser));\n      dispatch(usersActions.updateIsLoggedIn(storedIsLoggedIn));\n    }\n  }, [storedToken, storedIsLoggedIn, storedUser]);\n\n  const isMsgEn = () => {\n    if (\n      (reduxIsLoggedIn && reduxUser === \"Sarah\") ||\n      (reduxIsLoggedIn && reduxUser === \"Hans\")\n    ) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  const isMsgKr = () => {\n    if (\n      (reduxIsLoggedIn && reduxUser === \"은지\") ||\n      (reduxIsLoggedIn && reduxUser === \"엄마\") ||\n      (reduxIsLoggedIn && reduxUser === \"아빠\") ||\n      (reduxIsLoggedIn && reduxUser === \"성재\")\n    ) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  return (\n    <Layout>\n      <Routes>\n        {reduxIsLoggedIn ? (\n          <Route path=\"*\" element={<Navigate to=\"/initialpage\" />} />\n        ) : (\n          <Route path=\"*\" element={<Navigate to=\"/login\" />} />\n        )}\n        {!reduxIsLoggedIn && <Route path=\"/login\" element={<Login></Login>} />}\n        {reduxIsLoggedIn && (\n          <Route path=\"/initialpage\" element={<InitialPage></InitialPage>} />\n        )}\n        {!reduxIsLoggedIn && (\n          <Route path=\"/signin\" element={<SignIn></SignIn>} />\n        )}\n        {isMsgEn() && (\n          <Route path=\"/msglogen\" element={<MessageLogEn></MessageLogEn>} />\n        )}\n        {isMsgKr() && (\n          <Route path=\"/msglogkr\" element={<MessageLogKr></MessageLogKr>} />\n        )}\n        {isMsgEn() && (\n          <Route path=\"/hompageen\" element={<HomePageEn></HomePageEn>} />\n        )}\n        {isMsgKr() && (\n          <Route path=\"/hompagekr\" element={<HomePageKr></HomePageKr>} />\n        )}\n        {reduxIsLoggedIn && (\n          <Route\n            path=\"/updateusername\"\n            element={<ChangeUserName></ChangeUserName>}\n          />\n        )}\n        {reduxIsLoggedIn && (\n          <Route\n            path=\"/changepassword\"\n            element={<ChangePassword></ChangePassword>}\n          />\n        )}\n      </Routes>\n    </Layout>\n  );\n}\n\nexport default App;\n","import i18n, { Resource } from \"i18next\";\nimport { initReactI18next } from \"react-i18next\";\n// 작성된 마크업을 불러옵니다. import 를 간소화하기 위해 *를 사용했습니다.\nimport * as en from \"./en\";\nimport * as kr from \"./kr\";\n\nconst resources: Resource = {\n  en: {\n    ...en, // 비구조화 할당을 통해 간소화했습니다.\n  },\n  kr: {\n    ...kr,\n  },\n} as const;\n\ni18n.use(initReactI18next).init({\n  resources,\n  lng: \"kr\", // 초기 설정 언어\n  fallbackLng: {\n    en: [\"en\"], // 한국어 불러오는 것이 실패했을 경우 영문을 써라 라는 말입니다.\n    default: [\"kr\"],\n  },\n  debug: true,\n  keySeparator: false,\n  interpolation: {\n    escapeValue: false,\n  },\n  react: {\n    useSuspense: false,\n  },\n});\n\nexport default i18n;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport store from \"./store/userSlice\";\nimport { Provider } from \"react-redux\";\nimport { HashRouter } from \"react-router-dom\";\nimport \"./Locales\";\n\nReactDOM.render(\n  <HashRouter>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </HashRouter>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}