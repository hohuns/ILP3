/**
 * Copyright Â© INOVUA TRADING.
 *
 * This source code is licensed under the Commercial License found in the
 * LICENSE file in the root directory of this source tree.
 */
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));

var _react = require("react");

var _decode = require("./decode");

var _package = _interopRequireDefault(require("../../package.json"));

var err = function err(msg) {
  console.error("*********************************************** INOVUA REACTDATAGRID ENTERPRISE EDITION ***********************************************\n\n***************************** This is the Enterprise Edition of ReactDataGrid - all enterprise features are unlocked. ******************************\n\n************* You can only use this package to EVALUATE ReactDataGrid - it is not licensed for a development or production environment *************\n\n******************* If you want to purchase the Enterprise Edition or hide the license notice, email us contact@reactdatagrid.io *******************\n\n\n\n".concat(msg, "\n\n\n\n*****************************************************************************************************************************************\n    "));
};

var _default = function _default(props) {
  var LICENSE_KEY = props.licenseKey || ((typeof window === "undefined" ? "undefined" : (0, _typeof2.default)(window)) !== undefined ? window.REACTDATAGRID_LICENSE_KEY : '');
  var computedLicenseValid = (0, _react.useMemo)(function () {
    if (!LICENSE_KEY) {
      err("No license key found in \"licenseKey\" prop");
      return false;
    }

    var licenseInfo = (0, _decode.decode)(LICENSE_KEY);

    if (!licenseInfo || licenseInfo.Corrupt) {
      err("Corrupt license key found in \"licenseKey\" prop.");
      return false;
    }

    var currentVersionDate = new Date(_package.default.versionTimestamp);
    var licenseExpiryDate = new Date(licenseInfo.ExpiryDate);

    if (licenseExpiryDate < currentVersionDate) {
      err("Your license key expired on ".concat(licenseInfo.ExpiryDate, " but you're trying to use a version published on ").concat(currentVersionDate));
      return false;
    }

    return true;
  }, [LICENSE_KEY]);
  return {
    computedLicenseValid: computedLicenseValid
  };
};

exports.default = _default;