/**
 * Copyright Â© INOVUA TRADING.
 *
 * This source code is licensed under the Commercial License found in the
 * LICENSE file in the root directory of this source tree.
 */
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.decode = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _hash = _interopRequireDefault(require("./hash"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

var decode = function decode(licenseKey) {
  var fieldsMap = {};
  var fields = licenseKey.split(',').map(function (str) {
    var _str$split = str.split('='),
        _str$split2 = (0, _slicedToArray2.default)(_str$split, 2),
        name = _str$split2[0],
        value = _str$split2[1];

    fieldsMap[name] = {
      name: name,
      value: value
    };
    return [name, value];
  }).sort(function (a, b) {
    return a[0].localeCompare(b[0]);
  });
  var basicDecodeInfo = fields.reduce(function (acc, _ref) {
    var _ref2 = (0, _slicedToArray2.default)(_ref, 2),
        key = _ref2[0],
        value = _ref2[1];

    return _objectSpread((0, _defineProperty2.default)({}, key, value), acc);
  }, {});
  var seed = fieldsMap['ExpiryDate'] ? +new Date(fieldsMap['ExpiryDate'].value) : Date.now();
  var newZ = fields.map(function (_ref3) {
    var _ref4 = (0, _slicedToArray2.default)(_ref3, 2),
        name = _ref4[0],
        value = _ref4[1];

    if (name === 'Z') {
      return '';
    }

    var result = (0, _hash.default)(value || '', seed);
    return result;
  }).filter(function (x) {
    return x;
  }).join('');
  var Corrupt = newZ !== basicDecodeInfo.Z;

  var result = _objectSpread(_objectSpread({}, basicDecodeInfo), {}, {
    Corrupt: Corrupt
  });

  return result;
};

exports.decode = decode;