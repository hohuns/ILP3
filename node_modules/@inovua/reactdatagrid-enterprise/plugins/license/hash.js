/**
 * Copyright Â© INOVUA TRADING.
 *
 * This source code is licensed under the Commercial License found in the
 * LICENSE file in the root directory of this source tree.
 */
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

function signedCRCTable() {
  var c = 0;
  var table = (0, _toConsumableArray2.default)(new Array(256));

  for (var n = 0; n != 256; ++n) {
    c = n;
    c = c & 1 ? -306674912 ^ c >>> 1 : c >>> 1;
    c = c & 1 ? -306674912 ^ c >>> 1 : c >>> 1;
    c = c & 1 ? -306674912 ^ c >>> 1 : c >>> 1;
    c = c & 1 ? -306674912 ^ c >>> 1 : c >>> 1;
    c = c & 1 ? -306674912 ^ c >>> 1 : c >>> 1;
    c = c & 1 ? -306674912 ^ c >>> 1 : c >>> 1;
    c = c & 1 ? -306674912 ^ c >>> 1 : c >>> 1;
    c = c & 1 ? -306674912 ^ c >>> 1 : c >>> 1;
    table[n] = c;
  }

  return typeof Int32Array !== 'undefined' ? new Int32Array(table) : table;
}

var T = signedCRCTable();

function _default(str, seed) {
  var C = seed ^ -1;

  for (var i = 0, L = str.length, c, d; i < L;) {
    c = str.charCodeAt(i++);

    if (c < 0x80) {
      C = C >>> 8 ^ T[(C ^ c) & 0xff];
    } else if (c < 0x800) {
      C = C >>> 8 ^ T[(C ^ (192 | c >> 6 & 31)) & 0xff];
      C = C >>> 8 ^ T[(C ^ (128 | c & 63)) & 0xff];
    } else if (c >= 0xd800 && c < 0xe000) {
      c = (c & 1023) + 64;
      d = str.charCodeAt(i++) & 1023;
      C = C >>> 8 ^ T[(C ^ (240 | c >> 8 & 7)) & 0xff];
      C = C >>> 8 ^ T[(C ^ (128 | c >> 2 & 63)) & 0xff];
      C = C >>> 8 ^ T[(C ^ (128 | d >> 6 & 15 | (c & 3) << 4)) & 0xff];
      C = C >>> 8 ^ T[(C ^ (128 | d & 63)) & 0xff];
    } else {
      C = C >>> 8 ^ T[(C ^ (224 | c >> 12 & 15)) & 0xff];
      C = C >>> 8 ^ T[(C ^ (128 | c >> 6 & 63)) & 0xff];
      C = C >>> 8 ^ T[(C ^ (128 | c & 63)) & 0xff];
    }
  }

  return C ^ -1;
}