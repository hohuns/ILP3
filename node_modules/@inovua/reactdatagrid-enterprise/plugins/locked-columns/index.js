/**
 * Copyright Â© INOVUA TRADING.
 *
 * This source code is licensed under the Commercial License found in the
 * LICENSE file in the root directory of this source tree.
 */
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _updateLockedWrapperPositions = require("./updateLockedWrapperPositions");

var _default = {
  name: 'locked-columns',
  hook: function hook() {},
  defaultProps: function defaultProps() {
    return {
      updateLockedWrapperPositions: _updateLockedWrapperPositions.updateLockedWrapperPositions
    };
  },
  renderLockedStartCells: function renderLockedStartCells(_ref) {
    var lockedStartCount = _ref.lockedStartCount,
        isHeader = _ref.isHeader,
        lockedStartColumns = _ref.lockedStartColumns,
        virtualizeColumns = _ref.virtualizeColumns,
        rtl = _ref.rtl,
        getScrollLeftMax = _ref.getScrollLeftMax,
        lockedStartContent = _ref.lockedStartContent,
        initialCells = _ref.initialCells,
        sticky = _ref.sticky,
        scrollLeft = _ref.scrollLeft,
        groupProps = _ref.groupProps,
        expandGroupTitle = _ref.expandGroupTitle,
        lockedEndColumns = _ref.lockedEndColumns,
        nativeScroll = _ref.nativeScroll,
        scrollbarWidth = _ref.scrollbarWidth,
        virtualListBorderLeft = _ref.virtualListBorderLeft,
        virtualListBorderRight = _ref.virtualListBorderRight,
        style = _ref.style,
        addTransitionDuration = _ref.addTransitionDuration,
        lockedEndContent = _ref.lockedEndContent,
        hasRowDetails = _ref.hasRowDetails,
        initialRowHeight = _ref.initialRowHeight,
        rowHeight = _ref.rowHeight,
        lockedEndStartIndex = _ref.lockedEndStartIndex,
        availableWidth = _ref.availableWidth;

    if (lockedStartCount) {
      var startOffset = isHeader ? virtualListBorderLeft : 0;
      var startWrapperWidth = lockedStartColumns.reduce(_updateLockedWrapperPositions.sumColumnWidth, 0);
      var startWrapperStyle = {
        width: startWrapperWidth,
        minWidth: startWrapperWidth,
        background: 'inherit',
        height: '100%'
      };

      if (style) {
        if (style.background) {
          startWrapperStyle.background = style.background;
        }

        if (style.backgroundColor) {
          startWrapperStyle.backgroundColor = style.backgroundColor;
        }
      }

      if (startOffset) {
        startWrapperStyle.paddingLeft = startOffset;
        startWrapperStyle.position = 'relative';
        startWrapperStyle.left = -startOffset;
      }

      if (virtualizeColumns) {
        startWrapperStyle.height = rowHeight ? rowHeight : '100%';
        startWrapperStyle.position = 'absolute';
        startWrapperStyle.left = 0;
      } else {
        var transformStart = "translate3d(".concat(rtl && getScrollLeftMax ? -(getScrollLeftMax() - scrollLeft) : scrollLeft, "px, 0px, 0px)");

        if (sticky) {
          transformStart = 'translate3d(0px, 0px, 0px)';
        }

        startWrapperStyle.transform = transformStart;
      }

      var lockedStartInTransition = addTransitionDuration(lockedStartColumns, startWrapperStyle);
      return _react.default.createElement("div", {
        key: "lockedStartWrapper",
        className: "InovuaReactDataGrid__locked-start-wrapper ".concat(lockedStartInTransition ? 'InovuaReactDataGrid__locked-start-wrapper--transition' : '', " ").concat(sticky ? 'InovuaReactDataGrid__locked-start-wrapper--sticky' : '', " InovuaReactDataGrid__locked-start-wrapper--direction-").concat(rtl ? 'rtl' : 'ltr'),
        style: startWrapperStyle
      }, lockedStartContent || initialCells.slice(0, lockedStartCount));
    }
  },
  renderLockedEndCells: function renderLockedEndCells(_ref2) {
    var rtl = _ref2.rtl,
        scrollLeft = _ref2.scrollLeft,
        groupProps = _ref2.groupProps,
        expandGroupTitle = _ref2.expandGroupTitle,
        lockedEndColumns = _ref2.lockedEndColumns,
        nativeScroll = _ref2.nativeScroll,
        scrollbarWidth = _ref2.scrollbarWidth,
        isHeader = _ref2.isHeader,
        virtualListBorderLeft = _ref2.virtualListBorderLeft,
        virtualListBorderRight = _ref2.virtualListBorderRight,
        sticky = _ref2.sticky,
        style = _ref2.style,
        addTransitionDuration = _ref2.addTransitionDuration,
        lockedEndContent = _ref2.lockedEndContent,
        initialCells = _ref2.initialCells,
        hasRowDetails = _ref2.hasRowDetails,
        initialRowHeight = _ref2.initialRowHeight,
        lockedEndStartIndex = _ref2.lockedEndStartIndex,
        availableWidth = _ref2.availableWidth,
        virtualizeColumns = _ref2.virtualizeColumns;
    var lockEndPosition = rtl ? scrollLeft : (0, _updateLockedWrapperPositions.getLockedEndWrapperTranslate)({
      lockedEndColumns: lockedEndColumns,
      availableWidth: availableWidth,
      virtualizeColumns: virtualizeColumns,
      virtualListBorderRight: virtualListBorderRight
    }) + scrollLeft;
    var endWrapperWidth = groupProps && expandGroupTitle ? 0 : lockedEndColumns.reduce(_updateLockedWrapperPositions.sumColumnWidth, 0) + (nativeScroll ? scrollbarWidth || 0 : 0) + (isHeader ? virtualListBorderLeft + virtualListBorderRight : 0);
    var endWrapperStyle = {
      width: endWrapperWidth,
      minWidth: endWrapperWidth,
      transform: "translate3d(".concat(sticky ? 0 : lockEndPosition, "px, 0px, 0px)"),
      position: 'absolute',
      left: 0,
      background: 'inherit',
      height: '100%'
    };

    if (style) {
      if (style.background) {
        endWrapperStyle.background = style.background;
      }

      if (style.backgroundColor) {
        endWrapperStyle.backgroundColor = style.backgroundColor;
      }
    }

    var lockedEndInTransition = addTransitionDuration(lockedEndColumns, endWrapperStyle);

    var lockEndActiveBorderDiv = _react.default.createElement("div", {
      key: "--active-borders",
      className: "InovuaReactDataGrid__row-active-borders"
    });

    return _react.default.createElement("div", {
      key: "lockedEndWrapper",
      className: "InovuaReactDataGrid__locked-end-wrapper InovuaReactDataGrid__locked-end-wrapper--direction-".concat(rtl ? 'rtl' : 'ltr', " ").concat(sticky ? 'InovuaReactDataGrid__locked-end-wrapper--sticky' : '', " ").concat(lockedEndInTransition ? 'InovuaReactDataGrid__locked-end-wrapper--transition' : ''),
      style: endWrapperStyle
    }, lockedEndContent || initialCells.slice(lockedEndStartIndex), isHeader ? hasRowDetails ? _react.default.createElement("div", {
      key: "--active-borders-header",
      className: "InovuaReactDataGrid__row-active-borders-wrapper",
      style: {
        height: initialRowHeight,
        position: 'absolute',
        width: '100%',
        left: 0,
        top: 0,
        pointerEvents: 'none'
      }
    }, lockEndActiveBorderDiv) : lockEndActiveBorderDiv : null);
  }
};
exports.default = _default;