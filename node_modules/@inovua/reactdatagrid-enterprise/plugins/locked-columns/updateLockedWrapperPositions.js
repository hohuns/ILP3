/**
 * Copyright Â© INOVUA TRADING.
 *
 * This source code is licensed under the Commercial License found in the
 * LICENSE file in the root directory of this source tree.
 */
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.updateLockedWrapperPositions = exports.sumColumnWidth = exports.getLockedEndWrapperTranslate = void 0;

var sumColumnWidth = function sumColumnWidth(acc, c) {
  return acc + (!c.hidden ? c.computedWidth : 0);
};

exports.sumColumnWidth = sumColumnWidth;

var getLockedEndWrapperTranslate = function getLockedEndWrapperTranslate(_ref) {
  var virtualizeColumns = _ref.virtualizeColumns,
      lockedEndColumns = _ref.lockedEndColumns,
      availableWidth = _ref.availableWidth;
  var computedWidthSum = lockedEndColumns.reduce(sumColumnWidth, 0);
  var offset = 0;
  var result = offset + availableWidth - computedWidthSum;
  var lastLocked = lockedEndColumns[lockedEndColumns.length - 1];
  var rightOffset = lastLocked.computedOffset + lastLocked.computedWidth;

  if (rightOffset <= availableWidth) {
    result = lockedEndColumns[0].computedOffset;
  }

  return result;
};

exports.getLockedEndWrapperTranslate = getLockedEndWrapperTranslate;
var IDS = 1;

var updateLockedWrapperPositions = function updateLockedWrapperPositions(_ref2, scrollLeft, _) {
  var computedRowExpandEnabled = _ref2.computedRowExpandEnabled,
      computedStickyRows = _ref2.computedStickyRows,
      computedFooterRows = _ref2.computedFooterRows,
      computedLockedRows = _ref2.computedLockedRows,
      rowDetailsWidth = _ref2.rowDetailsWidth,
      lockedStartColumns = _ref2.lockedStartColumns,
      lockedEndColumns = _ref2.lockedEndColumns,
      virtualListBorderLeft = _ref2.virtualListBorderLeft,
      lockedRows = _ref2.lockedRows,
      getScrollLeftMax = _ref2.getScrollLeftMax,
      rtl = _ref2.rtl;
  var node;

  try {
    node = this.getDOMNode();
  } catch (ex) {
    return;
  }

  var transformStartPos = scrollLeft;
  var scrollLeftMax = getScrollLeftMax();

  if (rtl) {
    transformStartPos = -(scrollLeftMax - scrollLeft);
  }

  var lockedStartTransform = "translate3d(".concat(transformStartPos, "px, 0px, 0px)");

  if (computedRowExpandEnabled) {
    var rowContainer = node.querySelector('.inovua-react-virtual-list__row-container');

    if (rowContainer) {
      var dataId = rowContainer.getAttribute('data-id');

      if (!dataId) {
        dataId = Date.now() + IDS++;
        rowContainer.setAttribute('data-id', dataId);
      }

      var rowDetails = rowContainer.parentElement.querySelectorAll("[data-id=\"".concat(dataId, "\"] > .InovuaReactDataGrid__row > .InovuaReactDataGrid__row-details"));
      [].forEach.call(rowDetails, function (wrapper) {
        wrapper.style.transform = rowDetailsWidth !== 'min-viewport-width' ? lockedStartTransform : 'translate3d(0px, 0px, 0px)';
      });
    }
  }

  if (lockedRows && lockedRows.length) {
    var lockedRowsContainer = node.parentNode.querySelectorAll('.InovuaReactDataGrid__locked-row');
    var lockedRowsTransform = "translate3d(".concat(-scrollLeft, "px, 0px, 0px)");
    [].forEach.call(lockedRowsContainer, function (el) {
      el.style.transform = lockedRowsTransform;
    });
  }

  if (lockedStartColumns && lockedStartColumns.length) {
    var nodesStart = node.querySelectorAll('.InovuaReactDataGrid__locked-start-wrapper');
    [].forEach.call(nodesStart, function (wrapper) {
      wrapper.style.transform = lockedStartTransform;
    });

    if (computedLockedRows && computedLockedRows.length) {
      var lockedCellsStartRowsContainer = node.parentNode.querySelectorAll('.InovuaReactDataGrid__locked-row-group--start');
      [].forEach.call(lockedCellsStartRowsContainer, function (el) {
        el.style.transform = lockedStartTransform;
      });
    }

    if (computedFooterRows && computedFooterRows.length) {
      var footerCellsStartRowsContainer = node.parentNode.parentNode.parentNode.querySelectorAll('.InovuaReactDataGrid__footer-row-group--locked-start');
      [].forEach.call(footerCellsStartRowsContainer, function (el) {
        el.style.transform = lockedStartTransform;
      });
    }

    if (computedLockedRows && computedLockedRows.length) {
      var lockedRowsCellsStartRowsContainer = node.parentNode.querySelectorAll('.InovuaReactDataGrid__locked-row-group--locked-start');
      [].forEach.call(lockedRowsCellsStartRowsContainer, function (el) {
        el.style.transform = lockedStartTransform;
      });
    }
  }

  if (lockedEndColumns && lockedEndColumns.length) {
    var lockedEndPos;

    if (rtl) {
      lockedEndPos = scrollLeft;
    } else {
      lockedEndPos = getLockedEndWrapperTranslate(this.props) + scrollLeft;
    }

    var lockedEndTransform = "translate3d(".concat(lockedEndPos, "px, 0px, 0px)");
    var nodesEnd = node.querySelectorAll('.InovuaReactDataGrid__locked-end-wrapper:not(.InovuaReactDataGrid__locked-end-wrapper--sticky)');
    [].forEach.call(nodesEnd, function (wrapper) {
      wrapper.style.transform = lockedEndTransform;
    });

    if (lockedRows && lockedRows.length) {
      var lockedCellsEndRowsContainer = node.parentNode.querySelectorAll('.InovuaReactDataGrid__locked-row-group--end');
      [].forEach.call(lockedCellsEndRowsContainer, function (el) {
        el.style.transform = lockedEndTransform;
      });
    }

    if (computedFooterRows && computedFooterRows.length) {
      var _footerCellsStartRowsContainer = node.parentNode.parentNode.parentNode.querySelectorAll('.InovuaReactDataGrid__footer-row-group--locked-end');

      [].forEach.call(_footerCellsStartRowsContainer, function (el) {
        el.style.transform = lockedEndTransform;
      });
    }

    if (computedLockedRows && computedLockedRows.length) {
      var lockedRowCellsStartRowsContainer = node.parentNode.parentNode.querySelectorAll('.InovuaReactDataGrid__locked-row-group--locked-end');
      [].forEach.call(lockedRowCellsStartRowsContainer, function (el) {
        el.style.transform = lockedEndTransform;
      });
    }
  }

  if (computedStickyRows) {
    var stickyRowsContainer = node.querySelector('.InovuaReactDataGrid__virtual-list-sticky-rows-container');

    if (stickyRowsContainer) {
      stickyRowsContainer.style.transform = "translate3d(-".concat(scrollLeft, "px, 0px, 0px)");
    }

    if (lockedStartColumns || lockedEndColumns) {
      var activeRowIndicators = node.querySelectorAll('.InovuaReactDataGrid__row-active-borders-wrapper');
      [].forEach.call(activeRowIndicators, function (el) {
        el.style.transform = "translate3d(".concat(scrollLeft, "px, 0px, 0px)");
      });
    }
  }

  if (computedFooterRows && computedFooterRows.length) {
    var footerScroller = node.parentNode.parentNode.parentNode.querySelector('.InovuaReactDataGrid__footer-rows-container-scroller');

    if (footerScroller) {
      footerScroller.style.transform = "translate3d(-".concat(scrollLeft, "px, 0px, 0px)");
    }
  }
};

exports.updateLockedWrapperPositions = updateLockedWrapperPositions;