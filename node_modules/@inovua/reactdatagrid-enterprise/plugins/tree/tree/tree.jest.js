/**
 * Copyright Â© INOVUA TRADING.
 *
 * This source code is licensed under the Commercial License found in the
 * LICENSE file in the root directory of this source tree.
 */
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _index = require("./index");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

xdescribe('expandAtIndexes', function () {
  it('index', function () {
    var dataSource = (0, _index.expandAtIndexes)([{
      id: 2,
      nodes: [{
        id: 3
      }, {
        id: 4
      }]
    }, {
      id: 5,
      nodes: [{
        id: 6,
        nodes: [{
          id: 8
        }]
      }]
    }, {
      id: 7
    }], [0, 1], {
      generateIdFromPath: true
    });
    var level1DataSource = [{
      id: 2,
      nodes: [{
        id: 3
      }, {
        id: 4
      }]
    }, {
      id: '2/3',
      __nodeProps: {
        childIndex: 0,
        parentNodeId: 2,
        path: '2/3',
        depth: 1
      }
    }, {
      id: '2/4',
      __nodeProps: {
        childIndex: 1,
        parentNodeId: 2,
        path: '2/4',
        depth: 1
      }
    }, {
      id: 5,
      nodes: [{
        id: 6,
        nodes: [{
          id: 8
        }]
      }]
    }, {
      id: '5/6',
      nodes: [{
        id: 8
      }],
      __nodeProps: {
        childIndex: 0,
        parentNodeId: 5,
        path: '5/6',
        depth: 1
      }
    }, {
      id: 7
    }];
    expect(dataSource).toEqual(level1DataSource);
    var level2DataSource = (0, _index.expandAtIndexes)(level1DataSource, [4], {
      generateIdFromPath: true
    });
    expect(level2DataSource).toEqual([{
      id: 2,
      nodes: [{
        id: 3
      }, {
        id: 4
      }]
    }, {
      id: '2/3',
      __nodeProps: {
        childIndex: 0,
        parentNodeId: 2,
        path: '2/3',
        depth: 1
      }
    }, {
      id: '2/4',
      __nodeProps: {
        childIndex: 1,
        parentNodeId: 2,
        path: '2/4',
        depth: 1
      }
    }, {
      id: 5,
      nodes: [{
        id: 6,
        nodes: [{
          id: 8
        }]
      }]
    }, {
      id: '5/6',
      nodes: [{
        id: 8
      }],
      __nodeProps: {
        childIndex: 0,
        parentNodeId: 5,
        path: '5/6',
        depth: 1
      }
    }, {
      id: '5/6/8',
      __nodeProps: {
        childIndex: 0,
        parentNodeId: '5/6',
        path: '5/6/8',
        depth: 2
      }
    }, {
      id: 7
    }]);
  });
});
xdescribe('collapseAtIndexes', function () {
  it('index', function () {
    var dataSource = [{
      id: 2,
      nodes: [{
        id: 3
      }, {
        id: 4
      }]
    }, {
      id: 3,
      __nodeProps: {
        parentNodeId: 2,
        path: '2/3'
      }
    }, {
      id: 4,
      __nodeProps: {
        parentNodeId: 2,
        path: '2/4'
      }
    }, {
      id: 5,
      nodes: [{
        id: 6
      }]
    }, {
      id: 6,
      __nodeProps: {
        parentNodeId: 5,
        path: '5/6'
      }
    }, {
      id: 7
    }];
    var newDataSource = (0, _index.collapseAtIndexes)(dataSource, [0, 3], {
      generateIdFromPath: false
    });
    expect(newDataSource).toEqual([{
      id: 2,
      nodes: [{
        id: 3
      }, {
        id: 4
      }]
    }, {
      id: 5,
      nodes: [{
        id: 6
      }]
    }, {
      id: 7
    }]);
  });
});
xdescribe('expandByIds', function () {
  it('index', function () {
    var six = {
      id: 6,
      nodes: [{
        id: 7
      }]
    };
    var nine = {
      id: 9,
      nodes: [{
        id: 10
      }]
    };
    var five = {
      id: 5,
      nodes: [six, {
        id: 8
      }]
    };
    var three = {
      id: 3,
      nodes: [{
        id: 4
      }, five, nine]
    };
    var dataSource = [{
      id: 1
    }, {
      id: 2
    }, three, {
      id: 11,
      nodes: [{
        id: 12
      }]
    }];

    var _expandByIdsWithInfo = (0, _index.expandByIdsWithInfo)(dataSource, {
      11: true,
      3: true,
      5: true,
      9: true,
      6: true
    }, {
      idToIndexMap: {
        1: 0,
        2: 1,
        3: 2,
        11: 3
      },
      nodeProps: function nodeProps() {
        return undefined;
      }
    }),
        expandedSource = _expandByIdsWithInfo.data,
        idToIndexMap = _expandByIdsWithInfo.idToIndexMap;

    expect(expandedSource).toEqual([{
      id: 1
    }, {
      id: 2
    }, three, {
      id: 4,
      __nodeProps: undefined
    }, _objectSpread(_objectSpread({}, five), {}, {
      __nodeProps: undefined
    }), _objectSpread(_objectSpread({}, six), {}, {
      __nodeProps: undefined
    }), {
      id: 7,
      __nodeProps: undefined
    }, {
      id: 8,
      __nodeProps: undefined
    }, _objectSpread(_objectSpread({}, nine), {}, {
      __nodeProps: undefined
    }), {
      id: 10,
      __nodeProps: undefined
    }, {
      id: 11,
      nodes: [{
        id: 12
      }],
      __nodeProps: undefined
    }, {
      id: 12,
      __nodeProps: undefined
    }]);
    expect(idToIndexMap).toEqual({
      1: 0,
      2: 1,
      3: 2,
      4: 3,
      5: 4,
      6: 5,
      7: 6,
      8: 7,
      9: 8,
      10: 9,
      11: 10,
      12: 11
    });
  });
});
xdescribe('expandAtIndex', function () {
  it('index', function () {
    var dataSource = (0, _index.expandAtIndex)([{
      id: 2
    }, {
      id: 3,
      nodes: [{
        id: 4
      }]
    }, {
      id: 5
    }], 1, {
      generateIdFromPath: true
    });
    expect(dataSource).toEqual([{
      id: 2
    }, {
      id: 3,
      nodes: [{
        id: 4
      }]
    }, {
      id: '3/4',
      __nodeProps: {
        childIndex: 0,
        depth: 1,
        parentNodeId: 3,
        path: '3/4'
      }
    }, {
      id: 5
    }]);
  });
  it('index without generateIdFromPath', function () {
    var dataSource = (0, _index.expandAtIndex)([{
      id: 2
    }, {
      id: 3,
      nodes: [{
        id: 4
      }]
    }, {
      id: 5
    }], 1, {
      generateIdFromPath: false
    });
    expect(dataSource).toEqual([{
      id: 2
    }, {
      id: 3,
      nodes: [{
        id: 4
      }]
    }, {
      id: 4,
      __nodeProps: {
        childIndex: 0,
        parentNodeId: 3,
        path: '3/4',
        depth: 1
      }
    }, {
      id: 5
    }]);
  });
  it('expandAtIndex with non-existent index', function () {
    var dataSource = [{
      id: 2
    }, {
      id: 3,
      nodes: [{
        id: 4
      }]
    }, {
      id: 5
    }];
    expect((0, _index.expandAtIndex)(dataSource, 100)).toBe(dataSource);
  });
  it('expandAtIndex with existent index with no nodes', function () {
    var dataSource = [{
      id: 2
    }, {
      id: 3,
      nodes: [{
        id: 4
      }]
    }, {
      id: 5
    }];
    expect((0, _index.expandAtIndex)(dataSource, 0)).toBe(dataSource);
  });
  it('idProperty is generated correctly', function () {
    var dataSource = [{
      name: 2
    }, {
      name: 3,
      nodes: [{
        name: 4
      }]
    }, {
      name: 5
    }];
    var newDataSource = (0, _index.expandAtIndex)(dataSource, 1, {
      generateIdFromPath: true,
      pathSeparator: '/',
      idProperty: 'name'
    });
    expect(newDataSource).toEqual([{
      name: 2
    }, {
      name: 3,
      nodes: [{
        name: 4
      }]
    }, {
      name: '3/4',
      __nodeProps: {
        childIndex: 0,
        parentNodeId: 3,
        path: '3/4',
        depth: 1
      }
    }, {
      name: 5
    }]);
  });
});
xdescribe('collapseAtIndex', function () {
  it('index', function () {
    var dataSource = (0, _index.collapseAtIndex)([{
      name: 2
    }, {
      name: 3,
      id: 3,
      nodes: [{
        name: 4
      }, {
        name: 6
      }]
    }, {
      name: '3/4',
      __nodeProps: {
        parentNodeId: 3,
        path: '3/4'
      }
    }, {
      name: '3/6',
      __nodeProps: {
        parentNodeId: 3,
        path: '3/6'
      }
    }, {
      name: 5
    }], 1, {
      generateIdFromPath: true
    });
    expect(dataSource).toEqual([{
      name: 2
    }, {
      name: 3,
      id: 3,
      nodes: [{
        name: 4
      }, {
        name: 6
      }]
    }, {
      name: 5
    }]);
  });
  it('with no valid index', function () {
    var dataSource = [{
      name: 3
    }];
    var newDataSource = (0, _index.collapseAtIndex)(dataSource, 2);
    expect(newDataSource).toBe(dataSource);
  });
});
describe('sorting', function () {
  it('sortTreeData shallow sort', function () {
    var dataSource = [{
      id: 2,
      __nodeProps: {
        path: '2',
        depth: 0
      }
    }, {
      id: '2/3',
      name: 'z',
      __nodeProps: {
        path: '2/3',
        depth: 1
      }
    }, {
      id: '2/3/1',
      name: 'z',
      __nodeProps: {
        path: '2/3/1',
        depth: 2
      }
    }, {
      id: '2/3/1/1',
      name: 'za',
      __nodeProps: {
        path: '2/3/1/1',
        depth: 3
      }
    }, {
      id: '2/3/2',
      name: 'y',
      __nodeProps: {
        path: '2/3/2',
        depth: 2
      }
    }, {
      id: '2/4',
      name: 'y',
      __nodeProps: {
        path: '2/4',
        depth: 1
      }
    }, {
      id: '2/4/1',
      name: 'z',
      __nodeProps: {
        path: '2/4/1',
        depth: 2
      }
    }, {
      id: '2/4/2',
      name: 'y',
      __nodeProps: {
        path: '2/4/2',
        depth: 2
      }
    }, {
      id: 5,
      __nodeProps: {
        path: '5',
        depth: 0
      }
    }, {
      id: '5/6',
      name: 'r',
      __nodeProps: {
        path: '5/6',
        depth: 1
      }
    }, {
      id: '5/6/8',
      name: 'a',
      __nodeProps: {
        path: '5/6/8',
        depth: 2
      }
    }, {
      id: '5/11',
      name: 'q',
      __nodeProps: {
        path: '5/11',
        depth: 1
      }
    }, {
      id: 7,
      __nodeProps: {
        path: '7',
        depth: 0
      }
    }];
    var result = (0, _index.sortTreeData)({
      name: 'name',
      dir: 1
    }, dataSource, {
      depth: 1,
      deep: false
    });
    expect(result).toEqual([{
      id: 2,
      __nodeProps: {
        path: '2',
        depth: 0
      }
    }, {
      id: '2/4',
      name: 'y',
      __nodeProps: {
        path: '2/4',
        depth: 1
      }
    }, {
      id: '2/4/1',
      name: 'z',
      __nodeProps: {
        path: '2/4/1',
        depth: 2
      }
    }, {
      id: '2/4/2',
      name: 'y',
      __nodeProps: {
        path: '2/4/2',
        depth: 2
      }
    }, {
      id: '2/3',
      name: 'z',
      __nodeProps: {
        path: '2/3',
        depth: 1
      }
    }, {
      id: '2/3/1',
      name: 'z',
      __nodeProps: {
        path: '2/3/1',
        depth: 2
      }
    }, {
      id: '2/3/1/1',
      name: 'za',
      __nodeProps: {
        path: '2/3/1/1',
        depth: 3
      }
    }, {
      id: '2/3/2',
      name: 'y',
      __nodeProps: {
        path: '2/3/2',
        depth: 2
      }
    }, {
      id: 5,
      __nodeProps: {
        path: '5',
        depth: 0
      }
    }, {
      id: '5/11',
      name: 'q',
      __nodeProps: {
        path: '5/11',
        depth: 1
      }
    }, {
      id: '5/6',
      name: 'r',
      __nodeProps: {
        path: '5/6',
        depth: 1
      }
    }, {
      id: '5/6/8',
      name: 'a',
      __nodeProps: {
        path: '5/6/8',
        depth: 2
      }
    }, {
      id: 7,
      __nodeProps: {
        path: '7',
        depth: 0
      }
    }]);
  });
  it('sortTreeData deep sort', function () {
    var dataSource = [{
      id: 2,
      __nodeProps: {
        path: '2',
        depth: 0
      }
    }, {
      id: '2/3',
      name: 'z',
      __nodeProps: {
        path: '2/3',
        depth: 1
      }
    }, {
      id: '2/3/1',
      name: 'z',
      __nodeProps: {
        path: '2/3/1',
        depth: 2
      }
    }, {
      id: '2/3/1/1',
      name: 'za',
      __nodeProps: {
        path: '2/3/1/1',
        depth: 3
      }
    }, {
      id: '2/3/2',
      name: 'y',
      __nodeProps: {
        path: '2/3/2',
        depth: 2
      }
    }, {
      id: '2/4',
      name: 'y',
      __nodeProps: {
        path: '2/4',
        depth: 1
      }
    }, {
      id: '2/4/1',
      name: 'z',
      __nodeProps: {
        path: '2/4/1',
        depth: 2
      }
    }, {
      id: '2/4/2',
      name: 'y',
      __nodeProps: {
        path: '2/4/2',
        depth: 2
      }
    }, {
      id: 5,
      __nodeProps: {
        path: '5',
        depth: 0
      }
    }, {
      id: '5/6',
      name: 'r',
      __nodeProps: {
        path: '5/6',
        depth: 1
      }
    }, {
      id: '5/6/8',
      name: 'a',
      __nodeProps: {
        path: '5/6/8',
        depth: 2
      }
    }, {
      id: '5/11',
      name: 'q',
      __nodeProps: {
        path: '5/11',
        depth: 1
      }
    }, {
      id: 7,
      __nodeProps: {
        path: '7',
        depth: 0
      }
    }];
    var result = (0, _index.sortTreeData)({
      name: 'name',
      dir: 1
    }, dataSource, {
      depth: 1,
      deep: true
    });
    expect(result).toEqual([{
      id: 2,
      __nodeProps: {
        path: '2',
        depth: 0
      }
    }, {
      id: '2/4',
      name: 'y',
      __nodeProps: {
        path: '2/4',
        depth: 1
      }
    }, {
      id: '2/4/2',
      name: 'y',
      __nodeProps: {
        path: '2/4/2',
        depth: 2
      }
    }, {
      id: '2/4/1',
      name: 'z',
      __nodeProps: {
        path: '2/4/1',
        depth: 2
      }
    }, {
      id: '2/3',
      name: 'z',
      __nodeProps: {
        path: '2/3',
        depth: 1
      }
    }, {
      id: '2/3/2',
      name: 'y',
      __nodeProps: {
        path: '2/3/2',
        depth: 2
      }
    }, {
      id: '2/3/1',
      name: 'z',
      __nodeProps: {
        path: '2/3/1',
        depth: 2
      }
    }, {
      id: '2/3/1/1',
      name: 'za',
      __nodeProps: {
        path: '2/3/1/1',
        depth: 3
      }
    }, {
      id: 5,
      __nodeProps: {
        path: '5',
        depth: 0
      }
    }, {
      id: '5/11',
      name: 'q',
      __nodeProps: {
        path: '5/11',
        depth: 1
      }
    }, {
      id: '5/6',
      name: 'r',
      __nodeProps: {
        path: '5/6',
        depth: 1
      }
    }, {
      id: '5/6/8',
      name: 'a',
      __nodeProps: {
        path: '5/6/8',
        depth: 2
      }
    }, {
      id: 7,
      __nodeProps: {
        path: '7',
        depth: 0
      }
    }]);
  });
  it('should sort data correctly', function () {
    var dataSource = [{
      id: 1,
      __nodeProps: {
        path: '1',
        depth: 0
      }
    }, {
      id: '1/1',
      __nodeProps: {
        path: '1/1',
        depth: 1
      }
    }, {
      id: '1/2',
      __nodeProps: {
        path: '1/2',
        depth: 1
      }
    }, {
      id: '1/3',
      __nodeProps: {
        path: '1/3',
        depth: 1
      }
    }, {
      id: 2,
      __nodeProps: {
        path: '2',
        depth: 0
      }
    }, {
      id: '2/1',
      __nodeProps: {
        path: '2/1',
        depth: 1
      }
    }, {
      id: '2/2',
      __nodeProps: {
        path: '2/2',
        depth: 1
      }
    }, {
      id: '2/3',
      __nodeProps: {
        path: '2/3',
        depth: 1
      }
    }, {
      id: 3,
      __nodeProps: {
        path: '3',
        depth: 0
      }
    }, {
      id: '3/1',
      __nodeProps: {
        path: '3/1',
        depth: 1
      }
    }, {
      id: '3/1/1',
      __nodeProps: {
        path: '3/1/1',
        depth: 2
      }
    }, {
      id: '3/1/2',
      __nodeProps: {
        path: '3/1/2',
        depth: 2
      }
    }, {
      id: '3/2',
      __nodeProps: {
        path: '3/2',
        depth: 1
      }
    }];
    var result = (0, _index.sortTreeData)([{
      name: 'id',
      dir: -1
    }], dataSource, {
      depth: 0,
      deep: true
    });
    expect(result).toEqual([{
      id: 3,
      __nodeProps: {
        path: '3',
        depth: 0
      }
    }, {
      id: '3/2',
      __nodeProps: {
        path: '3/2',
        depth: 1
      }
    }, {
      id: '3/1',
      __nodeProps: {
        path: '3/1',
        depth: 1
      }
    }, {
      id: '3/1/2',
      __nodeProps: {
        path: '3/1/2',
        depth: 2
      }
    }, {
      id: '3/1/1',
      __nodeProps: {
        path: '3/1/1',
        depth: 2
      }
    }, {
      id: 2,
      __nodeProps: {
        path: '2',
        depth: 0
      }
    }, {
      id: '2/3',
      __nodeProps: {
        path: '2/3',
        depth: 1
      }
    }, {
      id: '2/2',
      __nodeProps: {
        path: '2/2',
        depth: 1
      }
    }, {
      id: '2/1',
      __nodeProps: {
        path: '2/1',
        depth: 1
      }
    }, {
      id: 1,
      __nodeProps: {
        path: '1',
        depth: 0
      }
    }, {
      id: '1/3',
      __nodeProps: {
        path: '1/3',
        depth: 1
      }
    }, {
      id: '1/2',
      __nodeProps: {
        path: '1/2',
        depth: 1
      }
    }, {
      id: '1/1',
      __nodeProps: {
        path: '1/1',
        depth: 1
      }
    }]);
  });
});