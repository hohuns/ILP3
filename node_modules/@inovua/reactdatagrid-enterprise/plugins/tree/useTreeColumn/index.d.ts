/**
 * Copyright Â© INOVUA TRADING.
 *
 * This source code is licensed under the Commercial License found in the
 * LICENSE file in the root directory of this source tree.
 */
import { MutableRefObject } from 'react';
import { TypeDataGridProps, TypeComputedProps, TypeExpandedNodes, TypeNodeCache } from '../../../types';
declare const useTreeColumn: (props: TypeDataGridProps, computedProps: TypeComputedProps, computedPropsRef: MutableRefObject<TypeComputedProps | null>) => {
    clearNodeChildrenCache: (nodeId: string | number, recursive: boolean | undefined, treeCache: TypeNodeCache | undefined, clearedMap?: {
        [key: string]: boolean;
    } | undefined) => {
        [key: string]: boolean;
    };
    toggleNodeExpand: (dataOrIndex: object | number) => void;
    loadNodeAsync: (data: number | object, callback?: (() => void) | undefined) => void;
    collapsingNodesRef: MutableRefObject<{
        [key: string]: boolean;
    }>;
    setLoadingNodes: import("react").Dispatch<import("react").SetStateAction<{
        [key: string]: boolean;
    }>>;
    computedTreeEnabled: boolean;
    computedLoadNode: (({ node, nodeProps, }: {
        node: object;
        nodeProps: import("../../../types").TypeNodeProps;
    }) => object[] | Promise<object[]>) | undefined;
    computedExpandedNodes: TypeExpandedNodes | undefined;
    computedLoadingNodes: {
        [key: string]: boolean;
    };
    computedNodeCache: TypeNodeCache;
    getNodeCache: () => TypeNodeCache;
    setNodeCache: (nodeCache: TypeNodeCache, info?: {
        nodeId: string | number;
        node: object;
    } | undefined) => void;
    appendCacheForNode: (nodeId: string | number, node: object) => void;
    isNodeExpandableAt: (index: number) => boolean;
    isNodeExpanded: (data: object | number) => boolean;
    setNodeExpandedAt: (index: number, expanded: boolean) => void;
    setNodeExpandedById: (id: string | number | any, expanded: boolean, config?: {
        force?: boolean;
    }) => void;
    collapseAllTreeNodes: () => void;
    expandAllTreeNodes: () => void;
};
export default useTreeColumn;
