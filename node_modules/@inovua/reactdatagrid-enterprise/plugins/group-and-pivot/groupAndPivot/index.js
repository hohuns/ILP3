/**
 * Copyright Â© INOVUA TRADING.
 *
 * This source code is licensed under the Commercial License found in the
 * LICENSE file in the root directory of this source tree.
 */
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.updateBucketSummaries = exports.getDefaultGroupSummaryValue = exports.flatten = exports.default = void 0;

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

var get = function get(item, field) {
  return item[field];
};

var defaultStringify = function defaultStringify(obj) {
  var type = (0, _typeof2.default)(obj);
  return type == 'string' || type === 'number' || type === 'boolean' ? "".concat(obj) : JSON.stringify(obj);
};

var getShowSummaryRow = function getShowSummaryRow(showGroupSummaryRow, groupData, pivot) {
  if (!showGroupSummaryRow || !groupData || pivot) {
    return false;
  }

  if (typeof showGroupSummaryRow === 'function') {
    showGroupSummaryRow = showGroupSummaryRow(groupData);
  }

  if (showGroupSummaryRow === true) {
    showGroupSummaryRow = 'end';
  }

  if (!showGroupSummaryRow) {
    showGroupSummaryRow = false;
  }

  return showGroupSummaryRow;
};

var completeBucketSummaries = function completeBucketSummaries(bucket, _ref) {
  var groupSummaryReducer = _ref.groupSummaryReducer,
      groupColumnSummaryReducers = _ref.groupColumnSummaryReducers,
      pivotColumnSummaryReducers = _ref.pivotColumnSummaryReducers;

  if (groupSummaryReducer && groupSummaryReducer.complete) {
    bucket.groupSummary = groupSummaryReducer.complete(bucket.groupSummary, bucket.array);
  }

  if (groupColumnSummaryReducers) {
    bucket.groupColumnSummary = Object.keys(groupColumnSummaryReducers).reduce(function (acc, key) {
      var value = acc[key];
      var reducer = groupColumnSummaryReducers[key];

      if (reducer.complete) {
        acc[key] = reducer.complete(value, bucket.array);
      }

      return acc;
    }, bucket.groupColumnSummary);

    if (bucket.pivotSummary !== null) {
      completePivotBucketSummaries(bucket, {
        groupColumnSummaryReducers: groupColumnSummaryReducers,
        pivotColumnSummaryReducers: pivotColumnSummaryReducers
      });
    }
  }

  return bucket;
};

var completeGroupColumnSummaryReducers = function completeGroupColumnSummaryReducers(target, array, groupColumnSummaryReducers) {
  if (!target || !groupColumnSummaryReducers) {
    return null;
  }

  return Object.keys(groupColumnSummaryReducers).reduce(function (acc, colId) {
    var reducer = groupColumnSummaryReducers[colId];

    if (reducer.complete) {
      acc[colId] = reducer.complete(acc[colId], array);
    }

    return acc;
  }, target);
};

var completePivotBucketSummaries = function completePivotBucketSummaries(pivotSummaryBucket, _ref2) {
  var groupColumnSummaryReducers = _ref2.groupColumnSummaryReducers,
      pivotColumnSummaryReducers = _ref2.pivotColumnSummaryReducers;

  if (!pivotSummaryBucket.pivotSummary) {
    return;
  }

  Object.keys(pivotSummaryBucket.pivotSummary).forEach(function (groupName) {
    var pivotBucket = pivotSummaryBucket.pivotSummary[groupName];
    pivotBucket.values = completeGroupColumnSummaryReducers(pivotBucket.values, pivotBucket.array, groupColumnSummaryReducers);
    completePivotBucketSummaries(pivotBucket, {
      groupColumnSummaryReducers: groupColumnSummaryReducers,
      pivotColumnSummaryReducers: pivotColumnSummaryReducers
    });

    if (pivotBucket.pivotColumnSummary && pivotColumnSummaryReducers && pivotColumnSummaryReducers[pivotBucket.field]) {
      var pivotColumnSummaryReducer = pivotColumnSummaryReducers[pivotBucket.field];

      if (pivotColumnSummaryReducer.complete) {
        pivotBucket.pivotColumnSummary[pivotBucket.field] = pivotColumnSummaryReducer.complete(pivotBucket.pivotColumnSummary[pivotBucket.field], pivotBucket.array);
      }
    }
  });
};

var createGroupItem = function createGroupItem(key, bucket) {
  return {
    __group: true,
    leaf: !bucket.data,
    value: key,
    depth: bucket.depth,
    groupSummary: bucket.groupSummary,
    groupColumnSummary: bucket.groupColumnSummary,
    pivotSummary: bucket.pivotSummary,
    keyPath: bucket.keyPath,
    fieldPath: bucket.fieldPath
  };
};

var flatten = function flatten(bucket, _ref3) {
  var pivot = _ref3.pivot,
      groupSummaryReducer = _ref3.groupSummaryReducer,
      groupColumnSummaryReducers = _ref3.groupColumnSummaryReducers,
      pivotColumnSummaryReducers = _ref3.pivotColumnSummaryReducers,
      isCollapsed = _ref3.isCollapsed,
      showGroupSummaryRow = _ref3.showGroupSummaryRow;
  var data = [];
  var indexesInGroups = [];
  var groupCounts = [];
  completeBucketSummaries(bucket, {
    groupSummaryReducer: groupSummaryReducer,
    groupColumnSummaryReducers: groupColumnSummaryReducers,
    pivotColumnSummaryReducers: pivotColumnSummaryReducers
  });
  var shouldInclude = true;
  var showSummaryRow;
  var summaryGroupItem;

  if (!bucket.data) {
    var groupItem = createGroupItem(bucket.key, bucket);
    data = [groupItem];
    indexesInGroups = [-1];
    groupCounts = [-1];
    shouldInclude = !pivot;

    if (isCollapsed && isCollapsed(groupItem)) {
      shouldInclude = false;
    }

    if (shouldInclude) {
      showSummaryRow = getShowSummaryRow(showGroupSummaryRow, groupItem, pivot);
      summaryGroupItem = showSummaryRow ? _objectSpread(_objectSpread({}, groupItem.groupColumnSummary), {}, {
        __parentGroup: groupItem,
        __summary: showSummaryRow
      }) : null;
      var indexesInGroupsOffset = 0;

      if (showSummaryRow === 'start') {
        data.push(summaryGroupItem);
        groupCounts.push(-1);
        indexesInGroups.push(-1);
      }

      data = data.concat(bucket.array);
      indexesInGroups = indexesInGroups.concat(bucket.array.map(function (_, index) {
        return index + indexesInGroupsOffset;
      }));
      groupCounts = groupCounts.concat(bucket.array.map(function (_) {
        return bucket.array.length;
      }));

      if (showSummaryRow === 'end') {
        data.push(summaryGroupItem);
        indexesInGroups.push(-1);
        groupCounts.push(-1);
      }
    }
  } else {
    var _groupItem = bucket.key != null ? createGroupItem(bucket.key, bucket) : null;

    data = _groupItem ? [_groupItem] : [];
    indexesInGroups = _groupItem ? [-1] : [];
    groupCounts = _groupItem ? [-1] : [];

    if (_groupItem && isCollapsed && isCollapsed(_groupItem)) {
      shouldInclude = false;
    }

    if (shouldInclude) {
      showSummaryRow = getShowSummaryRow(showGroupSummaryRow, _groupItem, pivot);
      summaryGroupItem = showSummaryRow ? _objectSpread(_objectSpread({}, _groupItem.groupColumnSummary), {}, {
        __parentGroup: _groupItem,
        __summary: showSummaryRow
      }) : null;

      if (showSummaryRow === 'start') {
        data.push(summaryGroupItem);
        indexesInGroups.push(-1);
        groupCounts.push(-1);
      }

      data = bucket.order.reduce(function (data, key) {
        var childBucket = bucket.data[key];
        var result = flatten(childBucket, {
          pivot: pivot,
          isCollapsed: isCollapsed,
          showGroupSummaryRow: showGroupSummaryRow,
          groupColumnSummaryReducers: groupColumnSummaryReducers,
          groupSummaryReducer: groupSummaryReducer,
          pivotColumnSummaryReducers: pivotColumnSummaryReducers
        });
        indexesInGroups = indexesInGroups.concat(result.indexesInGroups);
        groupCounts = groupCounts.concat(result.groupCounts);
        return data.concat(result.data);
      }, data);

      if (showSummaryRow === 'end') {
        data.push(summaryGroupItem);
        indexesInGroups.push(-1);
        groupCounts.push(-1);
      }
    }
  }

  return {
    indexesInGroups: indexesInGroups,
    groupCounts: groupCounts,
    bucket: bucket,
    data: data
  };
};

exports.flatten = flatten;

var buildDataBucket = function buildDataBucket(_ref4) {
  var field = _ref4.field,
      key = _ref4.key,
      parent = _ref4.parent,
      groupSummaryReducer = _ref4.groupSummaryReducer,
      groupColumnSummaryReducers = _ref4.groupColumnSummaryReducers,
      pivotColumnSummaryReducers = _ref4.pivotColumnSummaryReducers;
  return {
    key: key,
    field: field,
    fieldPath: parent && field ? [].concat((0, _toConsumableArray2.default)(parent.fieldPath), [field]) : [],
    keyPath: parent && key ? [].concat((0, _toConsumableArray2.default)(parent.keyPath), [key]) : [],
    order: [],
    array: [],
    data: null,
    depth: parent ? parent.depth + 1 : 0,
    groupSummary: groupSummaryReducer ? groupSummaryReducer.initialValue : null,
    groupColumnSummary: getDefaultGroupSummaryValue(groupColumnSummaryReducers),
    pivotColumnSummary: getDefaultGroupSummaryValue(pivotColumnSummaryReducers),
    pivotSummary: null
  };
};

var groupAndPivot = function groupAndPivot(data, _ref5) {
  var groupBy = _ref5.groupBy,
      pivot = _ref5.pivot,
      columnsMap = _ref5.columnsMap,
      _ref5$stringify = _ref5.stringify,
      stringify = _ref5$stringify === void 0 ? defaultStringify : _ref5$stringify,
      groupSummaryReducer = _ref5.groupSummaryReducer,
      groupColumnSummaryReducers = _ref5.groupColumnSummaryReducers,
      pivotColumnSummaryReducers = _ref5.pivotColumnSummaryReducers;
  var masterBucket = buildDataBucket({
    field: null,
    parent: null,
    key: null,
    groupSummaryReducer: groupSummaryReducer,
    groupColumnSummaryReducers: groupColumnSummaryReducers,
    pivotColumnSummaryReducers: pivotColumnSummaryReducers
  });

  if (pivot && pivot.length) {
    masterBucket.pivotUniqueValuesPerColumn = {
      field: null,
      values: null
    };
  }

  var onItem = function onItem(item) {
    var rootBucket = masterBucket;
    updateBucketSummaries(rootBucket, item, {
      groupSummaryReducer: groupSummaryReducer,
      groupColumnSummaryReducers: groupColumnSummaryReducers,
      columnsMap: columnsMap
    });
    groupBy.forEach(function (field) {
      var fieldValue = get(item, field);
      var toString = columnsMap[field] ? columnsMap[field].groupToString || stringify : stringify;
      var stringKey = toString(fieldValue, {
        data: item,
        field: field
      });

      if (!rootBucket.data) {
        rootBucket.data = {};
      }

      var currentBucket = rootBucket.data[stringKey];

      if (!currentBucket) {
        currentBucket = rootBucket.data[stringKey] = buildDataBucket({
          field: field,
          key: stringKey,
          parent: rootBucket,
          groupSummaryReducer: groupSummaryReducer,
          groupColumnSummaryReducers: groupColumnSummaryReducers
        });
        rootBucket.order.push(stringKey);
      }

      currentBucket.array.push(item);
      updateBucketSummaries(currentBucket, item, {
        groupSummaryReducer: groupSummaryReducer,
        groupColumnSummaryReducers: groupColumnSummaryReducers,
        columnsMap: columnsMap
      });

      if (pivot && pivot.length) {
        var pivotBucketOwner = currentBucket;
        var uniqueValuesRoot = masterBucket.pivotUniqueValuesPerColumn;
        pivot.forEach(function (field) {
          field = typeof field === 'string' ? field : field.name;
          var fieldValue = get(item, field);
          var col = columnsMap[field];
          var toString = col ? col.pivotToString || col.groupToString || stringify : stringify;
          var stringKey = toString(fieldValue, {
            data: item,
            field: field
          });

          if (!pivotBucketOwner.pivotSummary) {
            pivotBucketOwner.pivotSummary = {};
          }

          if (!pivotBucketOwner.pivotColumnSummary) {
            pivotBucketOwner.pivotColumnSummary = {};
          }

          var currentPivotSummaryBucket = pivotBucketOwner.pivotSummary;
          pivotBucketOwner = updateBucketPivotSummary(currentPivotSummaryBucket, item, {
            field: field,
            groupName: stringKey,
            groupColumnSummaryReducers: groupColumnSummaryReducers,
            pivotColumnSummaryReducers: pivotColumnSummaryReducers ? (0, _defineProperty2.default)({}, field, pivotColumnSummaryReducers[field]) : undefined,
            columnsMap: columnsMap
          });

          if (!uniqueValuesRoot.field) {
            uniqueValuesRoot.field = field;
            uniqueValuesRoot.values = {};
          }

          if (!uniqueValuesRoot.values[stringKey]) {
            uniqueValuesRoot.values[stringKey] = {
              field: null,
              values: null
            };
          }

          uniqueValuesRoot = uniqueValuesRoot.values[stringKey];
        });
      }

      rootBucket = currentBucket;
    });
  };

  data.forEach(onItem);
  return masterBucket;
};

var updateBucketSummaries = function updateBucketSummaries(currentBucket, item, _ref7) {
  var groupSummaryReducer = _ref7.groupSummaryReducer,
      groupColumnSummaryReducers = _ref7.groupColumnSummaryReducers,
      columnsMap = _ref7.columnsMap;

  if (groupSummaryReducer) {
    currentBucket.groupSummary = groupSummaryReducer.reducer(currentBucket.groupSummary, item, item);
  }

  if (groupColumnSummaryReducers) {
    currentBucket.groupColumnSummary = Object.keys(groupColumnSummaryReducers).reduce(function (columnSummaries, colId) {
      var col = columnsMap[colId];
      var value = col.name ? item[col.name] : item[colId];
      columnSummaries[colId] = groupColumnSummaryReducers[colId].reducer(columnSummaries[colId], value, item);
      return columnSummaries;
    }, currentBucket.groupColumnSummary);
  }
};

exports.updateBucketSummaries = updateBucketSummaries;

var updateBucketPivotSummary = function updateBucketPivotSummary(currentBucket, item, _ref8) {
  var groupColumnSummaryReducers = _ref8.groupColumnSummaryReducers,
      pivotColumnSummaryReducers = _ref8.pivotColumnSummaryReducers,
      groupName = _ref8.groupName,
      field = _ref8.field,
      columnsMap = _ref8.columnsMap;
  groupColumnSummaryReducers = groupColumnSummaryReducers || {};
  pivotColumnSummaryReducers = pivotColumnSummaryReducers || {};

  if (!currentBucket[groupName]) {
    currentBucket[groupName] = {
      array: [],
      field: field,
      values: getDefaultGroupSummaryValue(groupColumnSummaryReducers),
      pivotColumnSummary: getDefaultGroupSummaryValue(pivotColumnSummaryReducers),
      pivotSummary: null
    };
  }

  currentBucket[groupName].array.push(item);
  currentBucket[groupName].values = Object.keys(groupColumnSummaryReducers).reduce(function (columnSummaries, colId) {
    var col = columnsMap[colId];
    var value = col.name ? item[col.name] : item[colId];
    columnSummaries[colId] = groupColumnSummaryReducers[colId].reducer(columnSummaries[colId], value, item);
    return columnSummaries;
  }, currentBucket[groupName].values);
  currentBucket[groupName].pivotColumnSummary = Object.keys(pivotColumnSummaryReducers).reduce(function (pivotColumnSummaries, colId) {
    if (pivotColumnSummaryReducers[colId]) {
      pivotColumnSummaries[colId] = pivotColumnSummaryReducers[colId].reducer(pivotColumnSummaries[colId], groupName, item);
    }

    return pivotColumnSummaries;
  }, currentBucket[groupName].pivotColumnSummary);
  return currentBucket[groupName];
};

var getDefaultGroupSummaryValue = function getDefaultGroupSummaryValue(groupColumnSummaryReducers) {
  return groupColumnSummaryReducers ? Object.keys(groupColumnSummaryReducers).reduce(function (acc, key) {
    if (groupColumnSummaryReducers[key]) {
      acc[key] = groupColumnSummaryReducers[key].initialValue;
    }

    return acc;
  }, {}) : null;
};

exports.getDefaultGroupSummaryValue = getDefaultGroupSummaryValue;
var _default = groupAndPivot;
exports.default = _default;