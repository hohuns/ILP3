/**
 * Copyright Â© INOVUA TRADING.
 *
 * This source code is licensed under the Commercial License found in the
 * LICENSE file in the root directory of this source tree.
 */
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.computeSummary = void 0;

var computeSummary = function computeSummary(dataArray, config) {
  var columnsMap = config.columnsMap || {};

  if ((config.groupSummaryReducer || config.groupColumnSummaryReducers) && Array.isArray(dataArray)) {
    var columnsWithSummaries = Object.keys(config.groupColumnSummaryReducers || {}).filter(function (colName) {
      return !!columnsMap[colName];
    });
    var result = dataArray.reduce(function (acc, item, index, arr) {
      if (acc.groupSummary !== undefined) {
        acc.groupSummary = config.groupSummaryReducer.reducer(acc.groupSummary, item, index, arr);
      }

      if (acc.groupColumnSummaries !== undefined) {
        acc.groupColumnSummaries = columnsWithSummaries.reduce(function (acc, colName) {
          var fn = config.groupColumnSummaryReducers[colName].reducer;
          acc[colName] = fn(acc[colName], item[colName], index, arr);
          return acc;
        }, acc.groupColumnSummaries);
      }

      return acc;
    }, {
      groupSummary: config.groupSummaryReducer && config.groupSummaryReducer.reducer ? config.groupSummaryReducer.initialValue : undefined,
      groupColumnSummaries: columnsWithSummaries.length ? columnsWithSummaries.reduce(function (acc, colName) {
        if (config.groupColumnSummaryReducers[colName]) {
          acc[colName] = config.groupColumnSummaryReducers[colName].initialValue;
        }

        return acc;
      }, {}) : undefined
    });

    if (result.groupSummary !== undefined && config.groupSummaryReducer && config.groupSummaryReducer.complete) {
      result.groupSummary = config.groupSummaryReducer.complete(result.groupSummary, dataArray);
    }

    if (result.groupColumnSummaries) {
      result.groupColumnSummaries = Object.keys(result.groupColumnSummaries).reduce(function (acc, colName) {
        var value = acc[colName];

        if (config.groupColumnSummaryReducers[colName] && typeof config.groupColumnSummaryReducers[colName].complete == 'function') {
          acc[colName] = config.groupColumnSummaryReducers[colName].complete(value, dataArray);
        }

        return acc;
      }, result.groupColumnSummaries);
    }

    return result;
  }
};

exports.computeSummary = computeSummary;