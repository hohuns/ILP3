/**
 * Copyright Â© INOVUA TRADING.
 *
 * This source code is licensed under the Commercial License found in the
 * LICENSE file in the root directory of this source tree.
 */
"use strict";

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _groupAndPivot = _interopRequireWildcard(require("./groupAndPivot"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var _default = function _default(_ref) {
  var groupBy = _ref.groupBy,
      config = _ref.config,
      computedProps = _ref.computedProps,
      batchUpdateQueue = _ref.batchUpdateQueue,
      columnsMap = _ref.columnsMap;
  var pivot = computedProps.pivot;

  if (Array.isArray(groupBy) && groupBy.length) {
    var groupAndPivotData = (0, _groupAndPivot.default)(config.data, {
      groupBy: groupBy,
      pivot: pivot,
      columnsMap: columnsMap,
      stringify: computedProps.groupToString,
      groupSummaryReducer: computedProps.groupSummaryReducer,
      groupColumnSummaryReducers: computedProps.groupColumnSummaryReducers,
      pivotColumnSummaryReducers: computedProps.pivotColumnSummaryReducers
    });
    var groupArray = [];
    var groupKeys = {};
    var lastTopGroupCollapsed = false;
    var flattenedData = (0, _groupAndPivot.flatten)(groupAndPivotData, {
      pivot: pivot || null,
      showGroupSummaryRow: computedProps.groupColumn ? null : computedProps.showGroupSummaryRow || null,
      groupSummaryReducer: computedProps.groupSummaryReducer || null,
      groupColumnSummaryReducers: computedProps.groupColumnSummaryReducers || null,
      pivotColumnSummaryReducers: computedProps.pivotColumnSummaryReducers || null,
      isCollapsed: function isCollapsed(group) {
        groupArray.push(group);
        groupKeys[group.keyPath.join(computedProps.groupPathSeparator)] = true;
        var collapsed = computedProps.isGroupCollapsed(group);

        if (group.depth === 1) {
          lastTopGroupCollapsed = collapsed;
        }

        return collapsed;
      }
    });
    config.computedShowEmptyRows = lastTopGroupCollapsed ? false : undefined;
    config.data = flattenedData.data;
    groupArray.forEach(function (group) {
      var keyPath = group.keyPath;
      var root = flattenedData.bucket;

      for (var i = 0, len = keyPath.length; i < len; i++) {
        var key = keyPath[i];

        if (!root || !root.data) {
          break;
        }

        root = root.data[key];
      }

      group.array = root ? root.array : [];
    });
    batchUpdateQueue(function () {
      computedProps.setComputedGroupRelatedInfo({
        computedPivotUniqueValuesPerColumn: groupAndPivotData.pivotUniqueValuesPerColumn,
        computedGroupArray: groupArray,
        computedGroupKeys: groupKeys,
        computedGroupCounts: flattenedData.groupCounts || [],
        computedIndexesInGroups: flattenedData.indexesInGroups
      });
    });
  }

  return config;
};

exports.default = _default;