/**
 * Copyright Â© INOVUA TRADING.
 *
 * This source code is licensed under the Commercial License found in the
 * LICENSE file in the root directory of this source tree.
 */
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _useProperty7 = _interopRequireDefault(require("@inovua/reactdatagrid-community/hooks/useProperty"));

var _react = require("react");

var _computeData = _interopRequireDefault(require("@inovua/reactdatagrid-community/hooks/useDataSource/computeData"));

var _batchUpdate = _interopRequireDefault(require("@inovua/reactdatagrid-community/utils/batchUpdate"));

var _isControlledValue = _interopRequireDefault(require("@inovua/reactdatagrid-community/utils/isControlledValue"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

var keepValidGroupBy = function keepValidGroupBy(groupBy, columnsMap) {
  if (groupBy && groupBy.length) {
    return groupBy.map(function (colId) {
      if (!columnsMap) {
        return undefined;
      }

      var col = columnsMap[colId];

      if (!col) {
        return undefined;
      }

      return col.id || col.name;
    }).filter(function (x) {
      return !!x;
    });
  }

  return groupBy;
};

var useGroupBy = function useGroupBy(props, computedProps, computedPropsRef) {
  var _useProperty = (0, _useProperty7.default)(props, 'groupBy'),
      _useProperty2 = (0, _slicedToArray2.default)(_useProperty, 2),
      computedGroupBy = _useProperty2[0],
      initialSetGroupBy = _useProperty2[1];

  var _useState = (0, _react.useState)({
    computedIndexesInGroups: {},
    computedGroupArray: [],
    computedGroupKeys: {}
  }),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      computedGroupRelatedInfo = _useState2[0],
      setComputedGroupRelatedInfo = _useState2[1];

  var _useProperty3 = (0, _useProperty7.default)(props, 'collapsedGroups', undefined, {
    onChange: function onChange() {}
  }),
      _useProperty4 = (0, _slicedToArray2.default)(_useProperty3, 2),
      computedCollapsedGroups = _useProperty4[0],
      setCollapsedGroups = _useProperty4[1];

  var defaultExpandedGorups = computedProps && computedProps.defaultCollapsedGroups === true ? {} : true;

  var _useProperty5 = (0, _useProperty7.default)(props, 'expandedGroups', defaultExpandedGorups, {
    onChange: function onChange() {}
  }),
      _useProperty6 = (0, _slicedToArray2.default)(_useProperty5, 2),
      computedExpandedGroups = _useProperty6[0],
      setExpandedGroups = _useProperty6[1];

  var setCollapsedAndExpanded = (0, _react.useCallback)(function (_ref) {
    var collapsedGroups = _ref.collapsedGroups,
        expandedGroups = _ref.expandedGroups;
    var computedProps = computedPropsRef.current;

    if (!computedProps) {
      return;
    }

    var queue = (0, _batchUpdate.default)();
    queue.commit(function () {
      setCollapsedGroups(collapsedGroups);
      setExpandedGroups(expandedGroups);
    });

    if (computedProps.onGroupCollapseChange) {
      computedProps.onGroupCollapseChange(collapsedGroups, expandedGroups);
    }
  }, []);

  var setGroupBy = function setGroupBy(groupBy) {
    if (groupBy && typeof groupBy === 'string') {
      groupBy = [groupBy];
    }

    var computedProps = computedPropsRef.current;

    if (!computedProps) {
      return;
    }

    groupBy = keepValidGroupBy(groupBy, computedProps.columnsMap);

    if ((0, _isControlledValue.default)(props.groupBy)) {
      initialSetGroupBy(groupBy);
      return;
    }

    var queue = (0, _batchUpdate.default)();
    var data = (0, _computeData.default)({
      groupBy: groupBy
    }, computedProps, queue);
    queue.commit(function () {
      if (data !== undefined) {
        computedProps.silentSetData(data);
      }

      initialSetGroupBy(groupBy);
    });
  };

  var isGroupCollapsed = function isGroupCollapsed(group) {
    var computedProps = computedPropsRef.current;

    if (!computedProps) {
      return false;
    }

    var sep = computedProps.groupPathSeparator;
    var path = "".concat((group.keyPath || group.valuePath).join(sep));
    var collapsedGroups = computedProps.computedCollapsedGroups;

    if (collapsedGroups === true) {
      if (computedProps.computedExpandedGroups) {
        return !computedProps.computedExpandedGroups[path];
      }

      return true;
    }

    return !!collapsedGroups[path];
  };

  var expandGroup = function expandGroup(group) {
    var path = Array.isArray(group) ? group : typeof group == 'string' ? [group] : group.keyPath;

    if (isGroupCollapsed({
      keyPath: path
    })) {
      onGroupToggle(path);
    }
  };

  var collapseGroup = function collapseGroup(group) {
    var path = Array.isArray(group) ? group : typeof group == 'string' ? [group] : group.keyPath;

    if (!isGroupCollapsed({
      keyPath: path
    })) {
      onGroupToggle(path);
    }
  };

  var onGroupToggle = function onGroupToggle(path) {
    var computedProps = computedPropsRef.current;

    if (!computedProps) {
      return;
    }

    var sep = computedProps.groupPathSeparator,
        computedCollapsedGroups = computedProps.computedCollapsedGroups;
    var stringPath = path.join(sep);
    var newCollapsedGroups = computedCollapsedGroups === true ? true : Object.assign({}, computedCollapsedGroups);
    var newExpandedGroups = computedExpandedGroups === true ? true : Object.assign({}, computedExpandedGroups);

    if (newExpandedGroups === true) {
      if (newCollapsedGroups !== true) {
        if (newCollapsedGroups[stringPath]) {
          delete newCollapsedGroups[stringPath];
        } else {
          newCollapsedGroups[stringPath] = true;
        }
      }
    } else {
      if (newCollapsedGroups === true) {
        if (newExpandedGroups[stringPath]) {
          delete newExpandedGroups[stringPath];
        } else {
          newExpandedGroups[stringPath] = true;
        }
      }
    }

    setCollapsedAndExpanded({
      collapsedGroups: newCollapsedGroups,
      expandedGroups: newExpandedGroups
    });
  };

  var toggleGroup = function toggleGroup(group) {
    var computedProps = computedPropsRef.current;

    if (!computedProps) {
      return;
    }

    if (group && group.keyPath) {
      if (computedProps.computedPivot && computedProps.computedGroupBy && group.depth === computedProps.computedGroupBy.length) {
        return;
      }

      onGroupToggle(group.keyPath);
    }
  };

  var addGroupByColumn = function addGroupByColumn(column) {
    var computedProps = computedPropsRef.current;

    if (!computedProps) {
      return;
    }

    var computedColumn = computedProps.getColumnBy(column);

    if (!computedColumn) {
      return;
    }

    var groupBy = computedProps.computedGroupBy;

    if (!Array.isArray(groupBy)) {
      groupBy = [];
    }

    if (computedColumn.name && groupBy.indexOf(computedColumn.name) == -1) {
      setGroupBy([].concat((0, _toConsumableArray2.default)(groupBy), [computedColumn.name]));
    }
  };

  var removeGroupByColumn = function removeGroupByColumn(column) {
    var computedProps = computedPropsRef.current;

    if (!computedProps) {
      return;
    }

    var computedColumn = computedProps.getColumnBy(column);
    var groupBy = computedProps.computedGroupBy;

    if (!Array.isArray(groupBy)) {
      return;
    }

    if (groupBy.indexOf(computedColumn.id) != -1) {
      setGroupBy(groupBy.filter(function (g) {
        return g != computedColumn.id;
      }));
    }
  };

  var collapseAllGroups = function collapseAllGroups() {
    setCollapsedAndExpanded({
      collapsedGroups: true,
      expandedGroups: {}
    });
  };

  var expandAllGroups = function expandAllGroups() {
    setCollapsedAndExpanded({
      expandedGroups: true,
      collapsedGroups: {}
    });
  };

  return _objectSpread({
    computedGroupBy: computedGroupBy,
    onGroupToggle: onGroupToggle,
    toggleGroup: toggleGroup,
    setGroupBy: setGroupBy,
    removeGroupByColumn: removeGroupByColumn,
    addGroupByColumn: addGroupByColumn,
    isGroupCollapsed: isGroupCollapsed,
    expandGroup: expandGroup,
    collapseGroup: collapseGroup,
    computedCollapsedGroups: computedCollapsedGroups,
    computedExpandedGroups: computedExpandedGroups,
    onGroupByChange: setGroupBy,
    setComputedGroupRelatedInfo: setComputedGroupRelatedInfo,
    collapseAllGroups: collapseAllGroups,
    expandAllGroups: expandAllGroups
  }, computedGroupRelatedInfo);
};

var _default = useGroupBy;
exports.default = _default;