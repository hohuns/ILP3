/**
 * Copyright Â© INOVUA TRADING.
 *
 * This source code is licensed under the Commercial License found in the
 * LICENSE file in the root directory of this source tree.
 */
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactCleanProps = _interopRequireDefault(require("@inovua/reactdatagrid-community/packages/react-clean-props"));

var _join = _interopRequireDefault(require("@inovua/reactdatagrid-community/packages/join"));

var _GroupToolbarItem = _interopRequireDefault(require("./GroupToolbarItem"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var GroupToolbar = function (_React$Component) {
  (0, _inherits2.default)(GroupToolbar, _React$Component);

  var _super = _createSuper(GroupToolbar);

  function GroupToolbar(props) {
    var _this;

    (0, _classCallCheck2.default)(this, GroupToolbar);
    _this = _super.call(this, props);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "domRef", void 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "renderItem", function (column, name, index) {
      if (!column) {
        return null;
      }

      var dragThis;
      var style;
      var _this$state = _this.state,
          dragging = _this$state.dragging,
          _this$state$shifted = _this$state.shifted,
          shifted = _this$state$shifted === void 0 ? [] : _this$state$shifted;

      if (shifted[index] != null) {
        style = {
          position: 'relative',
          left: shifted[index]
        };
      }

      if (dragging) {
        var dragIndex = dragging.dragIndex,
            diff = dragging.left;

        if (index == dragIndex) {
          dragThis = true;
          style = {
            position: 'relative',
            left: diff,
            zIndex: 10
          };
        }
      }

      var groupItem = _react.default.createElement(_GroupToolbarItem.default, {
        index: index,
        rtl: _this.props.rtl,
        dragging: dragThis,
        style: style,
        renderGroupItem: _this.props.renderGroupItem,
        theme: _this.props.theme,
        renderSortTool: _this.props.renderSortTool,
        onMouseDown: _this.props.onItemMouseDown.bind((0, _assertThisInitialized2.default)(_this), column, index),
        key: column.id || column.name || index,
        column: column,
        onSortClick: _this.props.onSortClick,
        onClear: _this.onClear.bind((0, _assertThisInitialized2.default)(_this), column, name),
        ref: _this.refGroupItem.bind((0, _assertThisInitialized2.default)(_this), column)
      });

      if (_this.state.insertIndex == index) {
        return [_this.renderArrow(), groupItem];
      }

      return groupItem;
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "renderArrow", function () {
      return _react.default.createElement("div", {
        className: "InovuaReactDataGrid__group-toolbar-insert-arrow",
        style: {
          height: _this.state.arrowHeight
        }
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "setGroupBy", function (groupBy) {
      if (_this.props.onGroupByChange && JSON.stringify(groupBy) != JSON.stringify(_this.props.groupBy)) {
        _this.props.onGroupByChange(groupBy);
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onClear", function (column, name) {
      var groupBy = _this.p.groupBy;

      if (Array.isArray(groupBy)) {
        var index = groupBy.indexOf(name);

        if (index == -1) {
          return;
        }

        _this.setGroupBy([].concat((0, _toConsumableArray2.default)(groupBy.slice(0, index)), (0, _toConsumableArray2.default)(groupBy.slice(index + 1))));
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getCells", function () {
      var _this$props = _this.props,
          columns = _this$props.columns,
          groupBy = _this$props.groupBy;

      if (Array.isArray(groupBy) && groupBy.length) {
        return groupBy.map(function (name) {
          return _this.groupItems[columns[name].id];
        });
      }

      return [];
    });
    _this.state = {
      dragging: null,
      insertIndex: -1,
      groupBy: props.defaultGroupBy
    };
    _this.groupItems = {};

    _this.refGroupItem = function (column, groupItem) {
      _this.groupItems[column.id] = groupItem;
    };

    _this.domRef = (0, _react.createRef)();
    return _this;
  }

  (0, _createClass2.default)(GroupToolbar, [{
    key: "render",
    value: function render() {
      var _this2 = this;

      var props = this.p = Object.assign({}, this.props);
      props.groupBy = props.groupBy || this.state.groupBy;
      var groupBy = props.groupBy,
          theme = props.theme,
          columns = props.columns;
      var className = (0, _join.default)(props.className, 'InovuaReactDataGrid__group-toolbar', "InovuaReactDataGrid__group-toolbar--direction-".concat(props.rtl ? 'rtl' : 'ltr'), "InovuaReactDataGrid__group-toolbar--theme-".concat(theme));
      var content;

      if (Array.isArray(groupBy) && groupBy.length) {
        content = groupBy.map(function (name, index) {
          return _this2.renderItem(columns[name], name, index);
        });
      } else {
        content = _react.default.createElement(_GroupToolbarItem.default, {
          theme: this.props.theme,
          rtl: this.props.rtl,
          placeholder: true,
          style: {
            cursor: 'auto'
          }
        }, this.props.placeholder);
      }

      var divProps = (0, _reactCleanProps.default)(props, GroupToolbar.propTypes);
      return _react.default.createElement("div", _objectSpread(_objectSpread({
        ref: this.domRef
      }, divProps), {}, {
        className: className
      }), content, this.state.insertIndex == groupBy.length && this.renderArrow());
    }
  }]);
  return GroupToolbar;
}(_react.default.Component);

exports.default = GroupToolbar;
GroupToolbar.propTypes = {
  clearIcon: _propTypes.default.node,
  columns: _propTypes.default.object,
  groupBy: _propTypes.default.arrayOf(_propTypes.default.string),
  onGroupByChange: _propTypes.default.func.isRequired,
  renderGroupItem: _propTypes.default.func,
  onItemMouseDown: _propTypes.default.func,
  onSortClick: _propTypes.default.func,
  renderSortTool: _propTypes.default.func,
  placeholder: _propTypes.default.node,
  rtl: _propTypes.default.bool,
  theme: _propTypes.default.string
};
GroupToolbar.defaultProps = {
  theme: 'default',
  placeholder: 'Drag header to group'
};