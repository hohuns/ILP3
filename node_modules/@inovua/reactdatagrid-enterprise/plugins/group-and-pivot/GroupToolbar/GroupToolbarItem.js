/**
 * Copyright Â© INOVUA TRADING.
 *
 * This source code is licensed under the Commercial License found in the
 * LICENSE file in the root directory of this source tree.
 */
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactCleanProps = _interopRequireDefault(require("@inovua/reactdatagrid-community/packages/react-clean-props"));

var _renderSortTool = _interopRequireDefault(require("@inovua/reactdatagrid-community/Layout/ColumnLayout/Cell/renderSortTool"));

var _join = _interopRequireDefault(require("@inovua/reactdatagrid-community/packages/join"));

var _humanize = _interopRequireDefault(require("@inovua/reactdatagrid-community/utils/humanize"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var ICON_SIZE = 10;
var SORT_ICON_SIZE = 10;

var getItemContent = function getItemContent(column) {
  var header = column.header,
      name = column.name,
      groupHeader = column.groupHeader;

  if (groupHeader !== undefined) {
    if (typeof groupHeader !== 'function') {
      return groupHeader;
    }

    return groupHeader(column);
  }

  if (header !== undefined) {
    if (typeof header !== 'function') {
      return header;
    }

    return header(column, {
      column: column,
      group: true,
      headerProps: undefined,
      cellProps: undefined,
      contextMenu: undefined
    });
  }

  return (0, _humanize.default)(name || '');
};

var emptyObject = {};

var GroupToolbarItem = function (_React$Component) {
  (0, _inherits2.default)(GroupToolbarItem, _React$Component);

  var _super = _createSuper(GroupToolbarItem);

  function GroupToolbarItem(props) {
    var _this;

    (0, _classCallCheck2.default)(this, GroupToolbarItem);
    _this = _super.call(this, props);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "domRef", void 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onSortClick", function () {
      if (_this.dragging) {
        return;
      }

      if (_this.props.onSortClick) {
        _this.props.onSortClick(_this.props.column);
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "renderSortTool", function () {
      var column = _this.props.column || emptyObject;
      var sortable = column.computedSortable;

      var _ref = column.computedSortInfo || emptyObject,
          direction = _ref.dir;

      var render = column.renderSortTool || _this.props.renderSortTool;
      return (0, _renderSortTool.default)({
        sortable: sortable,
        direction: direction,
        renderSortTool: render,
        size: SORT_ICON_SIZE
      }, _objectSpread(_objectSpread({}, column), {}, {
        groupToolbarItem: true
      }));
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "renderClearIcon", function () {
      var _this$props = _this.props,
          clearIcon = _this$props.clearIcon,
          placeholder = _this$props.placeholder;
      var column = _this.props.column || emptyObject;
      var sortable = column.computedSortable;
      var dragging = _this.state.dragging || _this.props.dragging;

      if (!clearIcon) {
        return null;
      }

      var style = clearIcon.props ? clearIcon.props.style : null;

      if (dragging || placeholder) {
        style = Object.assign({}, style, {
          visibility: 'hidden'
        });
      }

      return _react.default.createElement("div", {
        key: "clearTool",
        onClick: _this.onClear,
        style: style,
        className: (0, _join.default)(clearIcon.props && clearIcon.props.className, 'InovuaReactDataGrid__group-toolbar-item__clear-icon', !sortable && 'InovuaReactDataGrid__group-toolbar-item__clear-icon-no-sortable')
      }, clearIcon);
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "setTop", function (top) {
      _this.setState({
        top: top
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "setLeft", function (left) {
      _this.setState({
        left: left
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "setRight", function (right) {
      _this.setState({
        right: right
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "setHeight", function (height) {
      _this.setState({
        height: height
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "setWidth", function (width) {
      _this.setState({
        width: width
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "setDragging", function (dragging, callback) {
      _this.setState({
        dragging: dragging
      }, callback);
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onClear", function (event) {
      event.stopPropagation();
      setTimeout(function () {
        _this.props.onClear(event);
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getVisibleIndex", function () {
      return _this.props.column.computedVisibleIndex;
    });
    _this.state = {
      dragging: false
    };
    _this.domRef = (0, _react.createRef)();
    return _this;
  }

  (0, _createClass2.default)(GroupToolbarItem, [{
    key: "render",
    value: function render() {
      var _ref2;

      var props = this.props,
          state = this.state;
      var column = props.column || emptyObject;
      var sortable = column.computedSortable;
      var dragging = props.dragging || state.dragging;
      var className = (0, _join.default)(props.className, 'InovuaReactDataGrid__group-toolbar-item', dragging && 'InovuaReactDataGrid__group-toolbar-item--dragging', "InovuaReactDataGrid__group-toolbar-item--direction-".concat(this.props.rtl ? 'rtl' : 'ltr'), sortable && 'InovuaReactDataGrid__group-toolbar-item--sortable', props.placeholder && 'InovuaReactDataGrid__group-toolbar-item--placeholder', "InovuaReactDataGrid__group-toolbar-item--theme-".concat(props.theme));
      var divProps = (0, _reactCleanProps.default)(props, GroupToolbarItem.propTypes);
      var onClick = sortable ? this.onSortClick : null;
      var children = props.placeholder ? props.children : getItemContent(column);
      var style = dragging ? (_ref2 = {
        top: state.top || 0
      }, (0, _defineProperty2.default)(_ref2, this.props.rtl ? 'right' : 'left', this.props.rtl ? state.right || 0 : state.left || 0), (0, _defineProperty2.default)(_ref2, "height", state.height || 0), _ref2) : {};

      var domProps = _objectSpread(_objectSpread({}, divProps), {}, {
        ref: this.domRef,
        style: _objectSpread(_objectSpread({}, props.style), style),
        className: className,
        onClick: onClick,
        children: [children, this.renderSortTool(), this.renderClearIcon()]
      });

      var result;

      if (this.props.renderGroupItem) {
        result = this.props.renderGroupItem(domProps, {
          column: column,
          onClear: this.onClear
        });
      }

      if (result === undefined) {
        result = _react.default.createElement("div", _objectSpread({}, domProps));
      }

      return result;
    }
  }]);
  return GroupToolbarItem;
}(_react.default.Component);

exports.default = GroupToolbarItem;
GroupToolbarItem.propTypes = {
  clearIcon: _propTypes.default.node,
  dragging: _propTypes.default.bool,
  onClear: _propTypes.default.func,
  placeholder: _propTypes.default.bool,
  rtl: _propTypes.default.bool,
  renderSortTool: _propTypes.default.func,
  theme: _propTypes.default.string,
  index: _propTypes.default.number,
  onSortClick: _propTypes.default.func,
  renderGroupItem: _propTypes.default.func,
  column: _propTypes.default.object
};
GroupToolbarItem.defaultProps = {
  clearIcon: _react.default.createElement("svg", {
    height: ICON_SIZE,
    width: ICON_SIZE,
    viewBox: "0 0 10 10"
  }, _react.default.createElement("path", {
    fill: "none",
    fillRule: "evenodd",
    strokeLinecap: "round",
    strokeWidth: "1.33",
    d: "M1 1l8 8m0-8L1 9"
  }))
};