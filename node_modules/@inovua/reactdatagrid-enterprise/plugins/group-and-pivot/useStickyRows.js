/**
 * Copyright Â© INOVUA TRADING.
 *
 * This source code is licensed under the Commercial License found in the
 * LICENSE file in the root directory of this source tree.
 */
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _react = require("react");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

var useStickyRows = function useStickyRows(props, computedProps, computedPropsRef) {
  var _useState = (0, _react.useState)(null),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      stickyIndexes = _useState2[0],
      setStickyGroupsIndexes = _useState2[1];

  var stickyRows;

  if (props.treeEnabled || !!props.treeColumn) {
    stickyRows = props.stickyTreeNodes ? stickyIndexes : null;
  } else {
    stickyRows = props.stickyGroupRows ? stickyIndexes : null;
  }

  var computedStickyRows = (0, _react.useMemo)(function () {
    var result = stickyRows == null ? stickyRows : _objectSpread({}, stickyRows);
    return result;
  }, [stickyRows, computedProps.rtl, computedProps.data, computedProps.size, computedProps.viewportAvailableWidth, computedProps.columnFlexes, computedProps.columnSizes, computedProps.lockedEndColumns, computedProps.lockedStartColumns, computedProps.visibleColumns, computedProps.computedActiveIndex]);
  return {
    computedStickyRows: computedStickyRows,
    setStickyGroupsIndexes: setStickyGroupsIndexes
  };
};

var _default = useStickyRows;
exports.default = _default;