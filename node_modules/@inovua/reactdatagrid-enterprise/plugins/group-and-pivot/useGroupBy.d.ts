/**
 * Copyright Â© INOVUA TRADING.
 *
 * This source code is licensed under the Commercial License found in the
 * LICENSE file in the root directory of this source tree.
 */
import { TypeGroupBy, TypeDataGridProps, TypeComputedProps, TypeCollapsedGroups, TypeGetColumnByParam, TypeExpandedGroups } from '../../types';
import { MutableRefObject, Dispatch, SetStateAction } from 'react';
declare const useGroupBy: (props: TypeDataGridProps, computedProps: TypeComputedProps, computedPropsRef: MutableRefObject<TypeComputedProps | null>) => {
    computedGroupBy: TypeGroupBy;
    setGroupBy: (groupBy: TypeGroupBy) => void;
    isGroupCollapsed: (group: any) => boolean;
    setComputedGroupRelatedInfo: Dispatch<SetStateAction<any>>;
    computedCollapsedGroups: TypeCollapsedGroups;
    computedExpandedGroups: TypeExpandedGroups;
    computedIndexesInGroups: any;
    computedGroupArray: object[];
    onGroupByChange: (groupBy: TypeGroupBy) => void;
    onGroupToggle: (group: string[]) => void;
    toggleGroup: (group: any) => void;
    expandGroup: (group: {
        keyPath: string[];
    } | string[]) => void;
    collapseGroup: (group: {
        keyPath: string[];
    } | string[]) => void;
    removeGroupByColumn: (column: TypeGetColumnByParam) => void;
    addGroupByColumn: (column: TypeGetColumnByParam) => void;
    collapseAllGroups: () => void;
    expandAllGroups: () => void;
};
export default useGroupBy;
