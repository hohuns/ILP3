/**
 * Copyright Â© INOVUA TRADING.
 *
 * This source code is licensed under the Commercial License found in the
 * LICENSE file in the root directory of this source tree.
 */
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = require("react");

var _useDataSource = require("@inovua/reactdatagrid-community/hooks/useDataSource");

var hook = function hook(props, computedProps, computedPropsRef) {
  var rafId = (0, _react.useRef)(null);
  var hasVerticalScrollbar = (0, _react.useCallback)(function () {
    var computedProps = computedPropsRef.current;

    if (!computedProps) {
      return false;
    }

    var scrollContainer = computedProps.getVirtualList().scrollContainer;
    var result = scrollContainer ? scrollContainer.hasVerticalScrollbar() : false;
    return result;
  }, []);

  var loadNextPageWhileNoScrollbar = function loadNextPageWhileNoScrollbar() {
    var computedProps = computedPropsRef.current;

    if (!computedProps) {
      return;
    }

    var props = computedProps.initialProps;

    if (Array.isArray(props.dataSource)) {
      return;
    }

    if ((0, _useDataSource.isLivePagination)(props) && computedProps.hasNextPage() && !hasVerticalScrollbar()) {
      var loadNextDelay = computedProps.livePaginationLoadNextDelay;

      if (loadNextDelay === false) {
        if (computedProps.dataPromiseRef.current) {
          computedProps.dataPromiseRef.current.then(function () {
            if (!hasVerticalScrollbar()) {
              computedProps.gotoNextPage({
                append: true
              });
            }
          });
        }

        return;
      }

      var delay = loadNextDelay === true ? computedProps.checkResizeDelay : loadNextDelay;

      if (typeof delay == 'number') {
        setTimeout(function () {
          if (Array.isArray(computedPropsRef.current.dataSource)) {
            return;
          }

          if (computedProps.dataPromiseRef.current) {
            computedProps.dataPromiseRef.current.then(function () {
              if (!hasVerticalScrollbar()) {
                computedProps.gotoNextPage({
                  append: true
                });
              }
            });
          }
        }, delay);
      }
    }
  };

  (0, _react.useEffect)(function () {
    if (!computedPropsRef.current.computedLivePagination) {
      return;
    }

    if (!computedPropsRef.current.computedLoading) {
      if (rafId.current) {
        cancelAnimationFrame(rafId.current);
        rafId.current = null;
      }

      rafId.current = requestAnimationFrame(function () {
        var lastId = rafId.current = requestAnimationFrame(function () {
          if (!computedPropsRef.current.computedLoading && rafId.current === lastId) {
            loadNextPageWhileNoScrollbar();
          }
        });
      });
    }
  });
  return {};
};

var _default = {
  name: 'live-pagination',
  hook: hook,
  defaultProps: function defaultProps() {
    return {};
  }
};
exports.default = _default;