/**
 * Copyright Â© INOVUA TRADING.
 *
 * This source code is licensed under the Commercial License found in the
 * LICENSE file in the root directory of this source tree.
 */
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));

var _join = _interopRequireDefault(require("@inovua/reactdatagrid-community/packages/join"));

var _react = _interopRequireDefault(require("react"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

var defaultClassName = 'InovuaReactDataGrid__locked-row-cell';

var LockedCellRow = function LockedCellRow(_ref) {
  var row = _ref.row,
      rowIndex = _ref.rowIndex,
      computedProps = _ref.computedProps,
      first = _ref.first,
      last = _ref.last,
      lastInSection = _ref.lastInSection,
      firstInSection = _ref.firstInSection,
      rtl = _ref.rtl,
      column = _ref.column,
      columnIndex = _ref.columnIndex,
      showBorderRight = _ref.showBorderRight,
      showBorderBottom = _ref.showBorderBottom,
      showBorderLeft = _ref.showBorderLeft,
      computedWidth = _ref.computedWidth,
      rowPosition = _ref.rowPosition;
  var value;
  var render = column.lockedRowCellRender;

  if (row.render) {
    if (typeof row.render === 'function') {
      render = row.render;
    } else if (typeof row.render[column.id] === 'function') {
      render = row.render[column.id];
    } else {
      render = row.render;
    }
  }

  if (typeof render === 'function') {
    value = render({
      summary: computedProps.computedSummary,
      row: row,
      rowIndex: rowIndex,
      rowPosition: rowPosition,
      render: row.render,
      column: column,
      columnIndex: columnIndex
    }, computedProps);
  } else if (render != null) {
    value = render;

    if (render[column.id] !== undefined) {
      value = render[column.id];
    } else {
      if ((0, _typeof2.default)(render) === 'object' && !render.props) {
        value = null;
      }
    }
  }

  var lockedRowCellStyle = computedProps.lockedRowCellStyle;

  if (row.cellStyle) {
    lockedRowCellStyle = row.cellStyle;
  }

  if (lockedRowCellStyle) {
    if (typeof lockedRowCellStyle === 'function') {
      var result = lockedRowCellStyle({
        style: lockedRowCellStyle,
        summary: computedProps.computedSummary,
        row: row,
        rowIndex: rowIndex,
        column: column,
        columnIndex: columnIndex,
        value: value,
        first: first,
        last: last,
        showBorderLeft: showBorderLeft,
        showBorderRight: showBorderRight,
        showBorderBottom: showBorderBottom,
        firstInSection: firstInSection,
        lastInSection: lastInSection
      }, computedProps);

      if (result !== undefined) {
        lockedRowCellStyle = _objectSpread({}, result);
      }
    }
  }

  lockedRowCellStyle = _objectSpread(_objectSpread({}, lockedRowCellStyle), {}, {
    width: computedWidth
  });

  if (computedProps.useRowHeightForLockedRows && computedProps.rowHeight) {
    lockedRowCellStyle.height = computedProps.rowHeight;
  }

  var lockedRowCellClassName = computedProps.lockedRowCellClassName || '';

  if (row.cellClassName) {
    lockedRowCellClassName = row.cellClassName;
  }

  if (lockedRowCellClassName) {
    if (typeof lockedRowCellClassName === 'function') {
      lockedRowCellClassName = lockedRowCellClassName({
        style: lockedRowCellStyle,
        summary: computedProps.computedSummary,
        row: row,
        column: column,
        columnIndex: columnIndex,
        value: value,
        rowIndex: rowIndex,
        firstInSection: firstInSection,
        lastInSection: lastInSection
      }, computedProps) || '';
    }
  }

  return _react.default.createElement("div", {
    className: (0, _join.default)(defaultClassName, lockedRowCellClassName, "".concat(defaultClassName, "--row-position-").concat(row.position), column.computedLocked ? "".concat(defaultClassName, "--locked-").concat(column.computedLocked) : "".concat(defaultClassName, "--unlocked"), first && "".concat(defaultClassName, "--first"), "".concat(defaultClassName, "--direction-").concat(rtl ? 'rtl' : 'ltr'), last && "".concat(defaultClassName, "--last"), lastInSection && "".concat(defaultClassName, "--last-in-section"), firstInSection && "".concat(defaultClassName, "--first-in-section"), showBorderRight && "".concat(defaultClassName, "--show-border-right"), showBorderBottom && "".concat(defaultClassName, "--show-border-bottom"), showBorderLeft && "".concat(defaultClassName, "--show-border-left")),
    style: lockedRowCellStyle,
    key: column.id
  }, value);
};

var _default = LockedCellRow;
exports.default = _default;