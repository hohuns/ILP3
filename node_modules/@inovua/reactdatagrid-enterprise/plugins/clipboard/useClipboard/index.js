/**
 * Copyright Â© INOVUA TRADING.
 *
 * This source code is licensed under the Commercial License found in the
 * LICENSE file in the root directory of this source tree.
 */
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useClipboard = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = require("react");

var _renderClipboardContextMenu = _interopRequireDefault(require("./renderClipboardContextMenu"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

var useClipboard = function useClipboard(_props, computedProps, computedPropsRef) {
  var clipboard = (0, _react.useRef)(false);
  var preventBlurOnContextMenuOpen = (0, _react.useRef)(false);

  if (!computedProps.enableClipboard) {
    return null;
  }

  var copyActiveRowToClipboard = function copyActiveRowToClipboard() {
    var computedProps = computedPropsRef.current;

    if (!computedProps) {
      return null;
    }

    if (computedProps.computedCellSelection) {
      return null;
    }

    var activeRow = computedProps.getActiveItem();

    if (computedProps.onCopyActiveRowChange) {
      computedProps.onCopyActiveRowChange(activeRow);
    }

    var idProperty = computedProps.idProperty;
    var compoundIdProperty = idProperty.includes(computedProps.idPropertySeparator);

    if (activeRow && navigator.clipboard) {
      var clonedActiveRow = Object.assign({}, activeRow);

      if (compoundIdProperty) {
        var activeRowId = computedProps.getItemId(clonedActiveRow);
        var parts = idProperty.split(computedProps.idPropertySeparator);
        parts.reduce(function (itemObj, id) {
          if (activeRowId === itemObj[id]) {
            if (itemObj) {
              delete itemObj[id];
            }
          }

          return itemObj[id];
        }, clonedActiveRow);
      } else {
        delete clonedActiveRow[idProperty];
      }

      var parsedActiveRow = JSON.stringify(clonedActiveRow);
      navigator.clipboard.writeText(parsedActiveRow).then(function () {
        if (Object.keys(clonedActiveRow).length > 0) {
          clipboard.current = true;
        }
      }).catch(function (e) {
        return console.warn(e);
      });
    }
  };

  var pasteActiveRowFromClipboard = function pasteActiveRowFromClipboard() {
    var computedProps = computedPropsRef.current;

    if (!computedProps) {
      return null;
    }

    if (computedProps.computedCellSelection) {
      return null;
    }

    if (navigator.clipboard) {
      navigator.clipboard.readText().then(function (data) {
        var parsedData = JSON.parse(data);
        var activeIndex = computedProps.computedActiveIndex;

        if (computedProps.onPasteActiveRowChange) {
          computedProps.onPasteActiveRowChange(parsedData);
        }

        if (activeIndex != null) {
          computedProps.setItemAt(activeIndex, parsedData, {
            replace: false,
            deepCloning: true
          });
        }
      });
    }
  };

  var copySelectedCellsToClipboard = function copySelectedCellsToClipboard() {
    var computedProps = computedPropsRef.current;

    if (!computedProps) {
      return null;
    }

    if (!computedProps.computedCellSelection) {
      return null;
    }

    var selectedCells = computedProps.computedCellSelection;
    var rows = {};
    Object.keys(selectedCells).map(function (key) {
      var parsedKey = key.split(',');
      var index = parseInt(parsedKey[0]);
      var column = parsedKey[1];
      var data = computedProps.getData();

      if (index !== undefined && column !== undefined) {
        var cellValue = data[index][column];
        rows[index] = Object.assign({}, rows[index], (0, _defineProperty2.default)({}, column, cellValue));
      }
    });

    if (computedProps.onCopySelectedCellsChange) {
      computedProps.onCopySelectedCellsChange(rows);
    }

    if (!!rows && navigator.clipboard) {
      var parsedSelectedCells = JSON.stringify(rows);
      navigator.clipboard.writeText(parsedSelectedCells).then(function () {
        if (Object.keys(rows).length > 0) {
          clipboard.current = true;
        }
      }).catch(function (e) {
        return console.warn(e);
      });
    }
  };

  var pasteSelectedCellsFromClipboard = function pasteSelectedCellsFromClipboard() {
    var computedProps = computedPropsRef.current;

    if (!computedProps) {
      return null;
    }

    if (!computedProps.computedCellSelection) {
      return null;
    }

    if (navigator.clipboard) {
      navigator.clipboard.readText().then(function (data) {
        var parsedData = JSON.parse(data);

        var _computedProps$comput = (0, _slicedToArray2.default)(computedProps.computedActiveCell, 2),
            activeRow = _computedProps$comput[0],
            activeColumn = _computedProps$comput[1];

        var dataArray = Object.keys(parsedData).map(function (key, index) {
          var columns = {};
          Object.keys(parsedData[key]).map(function (columnKey, i) {
            var column = computedProps.getColumnBy(activeColumn + i);

            if (column) {
              var id = column.id;
              var computedColumn = (0, _defineProperty2.default)({}, id, parsedData[key][columnKey]);
              columns[index] = Object.assign({}, columns[index], computedColumn);
            }
          });
          return Object.assign({}, _objectSpread({
            id: activeRow + index
          }, columns[index]));
        });

        if (computedProps.onPasteSelectedCellsChange) {
          computedProps.onPasteSelectedCellsChange(dataArray);
        }

        computedProps.setItemsAt(dataArray, {
          replace: false
        });
      });
    }
  };

  var clipboardContextMenu = function clipboardContextMenu() {
    var computedProps = computedPropsRef.current;

    if (!computedProps) {
      return null;
    }

    if (computedProps.renderRowContextMenu) {
      return;
    }

    computedProps.initialProps.renderRowContextMenu = _renderClipboardContextMenu.default;
  };

  clipboardContextMenu();
  return {
    copyActiveRowToClipboard: copyActiveRowToClipboard,
    pasteActiveRowFromClipboard: pasteActiveRowFromClipboard,
    copySelectedCellsToClipboard: copySelectedCellsToClipboard,
    pasteSelectedCellsFromClipboard: pasteSelectedCellsFromClipboard,
    clipboard: clipboard,
    preventBlurOnContextMenuOpen: preventBlurOnContextMenuOpen
  };
};

exports.useClipboard = useClipboard;