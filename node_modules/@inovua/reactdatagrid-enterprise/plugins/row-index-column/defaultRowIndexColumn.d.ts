/**
 * Copyright Â© INOVUA TRADING.
 *
 * This source code is licensed under the Commercial License found in the
 * LICENSE file in the root directory of this source tree.
 */
import React, { Dispatch, SetStateAction, ReactNode } from 'react';
import { id as ROW_INDEX_COLUMN_ID } from '@inovua/reactdatagrid-community/normalizeColumns/defaultRowIndexColumnId';
import { TypeComputedColumn } from '@inovua/reactdatagrid-community/types/TypeColumn';
declare type TypeRowResizeHandleProps = {
    data: any;
    rowIndex: number;
    remoteRowIndex: number;
    rowIndexInGroup: number;
    renderIndex?: (index: number) => ReactNode;
    column: TypeComputedColumn;
};
export declare const RowResizeIndicator: ({ handle, height, column, }: {
    column: TypeComputedColumn;
    height: number;
    handle: (handleArg: {
        setOffset: Dispatch<SetStateAction<number>>;
        setActive: Dispatch<SetStateAction<boolean>>;
        setHovered: Dispatch<SetStateAction<boolean>>;
        setConstrained: Dispatch<SetStateAction<boolean>>;
        setInitialWidth: Dispatch<SetStateAction<number>>;
    }) => void;
}) => JSX.Element;
export declare const RowResizeHandle: React.MemoExoticComponent<({ rowIndex, data, remoteRowIndex, renderIndex, rowIndexInGroup, column, }: TypeRowResizeHandleProps) => JSX.Element>;
declare const _default: {
    id: string;
    rowIndexColumn: boolean;
    rowResize: boolean;
    cellSelectable: boolean;
    autoLock: boolean;
    headerAlign: string;
    textAlign: string;
    className: string;
    render: ({ remoteRowIndex, data, rowIndex, rowIndexInGroup, }: {
        data: any;
        rowIndexInGroup: number;
        rowIndex: number;
        remoteRowIndex: number;
    }, { column, }: {
        column: TypeComputedColumn & {
            renderIndex?: ((index: number) => ReactNode) | undefined;
        };
    }) => JSX.Element;
    header: string;
    showInContextMenu: boolean;
    showColumnMenuSortOptions: boolean;
    showColumnMenuGroupOptions: boolean;
    showColumnMenuTool: boolean;
    sortable: boolean;
    editable: boolean;
    draggable: boolean;
    groupBy: boolean;
    defaultWidth: number;
    minWidth: number;
};
export default _default;
export { ROW_INDEX_COLUMN_ID as rowExpandColumnId };
