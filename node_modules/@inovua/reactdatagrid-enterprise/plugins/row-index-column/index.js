/**
 * Copyright Â© INOVUA TRADING.
 *
 * This source code is licensed under the Commercial License found in the
 * LICENSE file in the root directory of this source tree.
 */
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _isMobile = _interopRequireDefault(require("@inovua/reactdatagrid-community/packages/isMobile"));

var _react = _interopRequireWildcard(require("react"));

var _defaultRowIndexColumn = require("./defaultRowIndexColumn");

var _defaultRowIndexColumnId = require("@inovua/reactdatagrid-community/normalizeColumns/defaultRowIndexColumnId");

var _maybeAddRowIndexColumn = _interopRequireDefault(require("./maybeAddRowIndexColumn"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var emptyRowResizeHandle = {
  setOffset: function setOffset() {},
  setActive: function setActive() {},
  setConstrained: function setConstrained() {},
  setInitialWidth: function setInitialWidth() {},
  setHovered: function setHovered() {}
};
var _default = {
  name: 'row-index-column',
  maybeAddColumns: _maybeAddRowIndexColumn.default,
  hook: function hook(props, computedProps) {
    computedProps.rowResizeHandleRef = (0, _react.useRef)(emptyRowResizeHandle);
  },
  defaultProps: function defaultProps() {
    return {
      rowResizeHandleWidth: _isMobile.default ? 15 : 5
    };
  },
  renderRowResizeIndicator: function renderRowResizeIndicator(computedProps) {
    var rowResizeHandle = _react.default.useCallback(function (_ref) {
      var setOffset = _ref.setOffset,
          setActive = _ref.setActive,
          setConstrained = _ref.setConstrained,
          setHovered = _ref.setHovered,
          setInitialWidth = _ref.setInitialWidth;
      computedProps.rowResizeHandleRef.current = {
        setOffset: setOffset,
        setActive: setActive,
        setConstrained: setConstrained,
        setHovered: setHovered,
        setInitialWidth: setInitialWidth
      };
    }, []);

    return computedProps.rowIndexColumn ? _react.default.createElement(_defaultRowIndexColumn.RowResizeIndicator, {
      column: computedProps.columnsMap[_defaultRowIndexColumnId.id],
      handle: rowResizeHandle,
      height: computedProps.rowResizeHandleWidth
    }) : null;
  }
};
exports.default = _default;