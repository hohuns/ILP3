/**
 * Copyright Â© INOVUA TRADING.
 *
 * This source code is licensed under the Commercial License found in the
 * LICENSE file in the root directory of this source tree.
 */
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.RowResizeIndicator = exports.RowResizeHandle = void 0;
Object.defineProperty(exports, "rowExpandColumnId", {
  enumerable: true,
  get: function get() {
    return _defaultRowIndexColumnId.id;
  }
});

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _react = _interopRequireWildcard(require("react"));

var _dragHelper = _interopRequireDefault(require("@inovua/reactdatagrid-community/packages/drag-helper"));

var _region = _interopRequireDefault(require("@inovua/reactdatagrid-community/packages/region"));

var _join = _interopRequireDefault(require("@inovua/reactdatagrid-community/packages/join"));

var _selectParent = _interopRequireDefault(require("@inovua/reactdatagrid-community/common/selectParent"));

var _isMobile = _interopRequireDefault(require("@inovua/reactdatagrid-community/packages/isMobile"));

var _context = _interopRequireDefault(require("@inovua/reactdatagrid-community/context"));

var _defaultRowIndexColumnId = require("@inovua/reactdatagrid-community/normalizeColumns/defaultRowIndexColumnId");

var _batchUpdate = _interopRequireDefault(require("@inovua/reactdatagrid-community/utils/batchUpdate"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var stopPropagation = function stopPropagation(e) {
  return e.stopPropagation();
};

var useRowResize = function useRowResize(rowIndex, config) {
  var computedProps = (0, _react.useContext)(_context.default);

  if (rowIndex == null) {
    rowIndex = computedProps.rowResizeIndexRef.current;
  }

  var setActive = function setActive(active) {
    var queue = (0, _batchUpdate.default)();
    queue.commit(function () {
      if (config && config.setActive) {
        config.setActive(active);
      }

      computedProps.rowResizeHandleRef.current.setHovered(false);
      computedProps.rowResizeHandleRef.current.setActive(active);
      computedProps.coverHandleRef.current.setActive(active);
      computedProps.coverHandleRef.current.setCursor(active ? 'ns-resize' : '');
    });
  };

  var setConstrained = function setConstrained(constrained) {
    var queue = (0, _batchUpdate.default)();
    queue.commit(function () {
      if (config && config.setConstrained) {
        config.setConstrained(constrained);
      }

      computedProps.rowResizeHandleRef.current.setConstrained(constrained);
    });
  };

  var onResizeDragInit = function onResizeDragInit(_ref) {
    var constrained = _ref.constrained,
        offset = _ref.offset;
    var queue = (0, _batchUpdate.default)();
    queue.commit(function () {
      setActive(true);
      setConstrained(constrained);
      computedProps.rowResizeIndexRef.current = rowIndex;
      computedProps.rowResizeHandleRef.current.setOffset(offset);
    });
  };

  var onResizeDrag = function onResizeDrag(_ref2) {
    var constrained = _ref2.constrained,
        offset = _ref2.offset;
    var queue = (0, _batchUpdate.default)();
    queue.commit(function () {
      setConstrained(constrained);
      computedProps.rowResizeHandleRef.current.setOffset(offset);
    });
  };

  var onResizeDrop = function onResizeDrop(_ref3) {
    var rowHeight = _ref3.rowHeight,
        rowId = _ref3.rowId;
    var queue = (0, _batchUpdate.default)();
    queue.commit(function () {
      setActive(false);
      setConstrained(false);
      computedProps.setRowHeightById(rowHeight, rowId);
      computedProps.rowResizeIndexRef.current = null;
    });
  };

  var onDoubleClick = function onDoubleClick() {
    var rowId = computedProps.getItemId(config.data);
    var defaultRowHeight = computedProps.rowHeight;
    var currentRowHeight = computedProps.getRowHeightById(rowId);

    if (currentRowHeight !== defaultRowHeight) {
      var queue = (0, _batchUpdate.default)();
      queue.commit(function () {
        setActive(false);
        setConstrained(false);
        computedProps.setRowHeightById(null, rowId);
      });
    }
  };

  var onMouseDown = function onMouseDown(event) {
    event.preventDefault();
    var rowNode = (0, _selectParent.default)('.InovuaReactDataGrid__row', event.target);

    if (!rowNode) {
      rowNode = computedProps.getVirtualList().rows.filter(function (r) {
        return r.props.index === rowIndex;
      })[0];

      if (rowNode) {
        rowNode = rowNode.node;
      }
    }

    var constrainTo = _region.default.from(computedProps.getDOMNode());

    var rowRegion = _region.default.from(rowNode);

    var rowId = computedProps.getItemId(config.data);
    var initialPosition = rowRegion.bottom - constrainTo.top - 1;
    var initialSize = computedProps.getRowHeightById(rowId);
    var minRowHeight = computedProps.minRowHeight || 10;
    var maxRowHeight = computedProps.maxRowHeight;
    constrainTo.set({
      top: rowRegion.top + minRowHeight
    });

    if (maxRowHeight) {
      constrainTo.set({
        bottom: rowRegion.top + maxRowHeight
      });
    }

    var isContrained = function isContrained(dragRegion) {
      var constrained = dragRegion.top <= constrainTo.top || dragRegion.bottom >= constrainTo.bottom;
      return constrained;
    };

    rowRegion.set({
      top: rowRegion.bottom
    });
    var dropped = false;
    (0, _dragHelper.default)(event, {
      constrainTo: constrainTo,
      region: rowRegion,
      onDragInit: function onDragInit(e, config) {
        var constrained = isContrained(config.dragRegion);
        setTimeout(function () {
          if (dropped) {
            return;
          }

          onResizeDragInit({
            offset: initialPosition,
            constrained: constrained
          });
        }, 150);
      },
      onDrag: function onDrag(e, config) {
        e.preventDefault();
        e.stopPropagation();
        var diff = config.diff.top;
        var offset = initialPosition + diff;
        var constrained = isContrained(config.dragRegion);
        e.preventDefault();
        onResizeDrag({
          constrained: constrained,
          offset: offset
        });
      },
      onDrop: function onDrop(e, config) {
        dropped = true;
        var diff = config.diff.top;
        onResizeDrop({
          rowHeight: initialSize + diff,
          rowId: rowId
        });
      }
    });
  };

  return {
    onMouseDown: onMouseDown,
    onDoubleClick: onDoubleClick
  };
};

var RowResizeIndicator = function RowResizeIndicator(_ref4) {
  var handle = _ref4.handle,
      height = _ref4.height,
      column = _ref4.column;

  var _useState = (0, _react.useState)(0),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      offset = _useState2[0],
      setOffset = _useState2[1];

  var _useState3 = (0, _react.useState)(false),
      _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
      hovered = _useState4[0],
      setHovered = _useState4[1];

  var _useState5 = (0, _react.useState)(false),
      _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
      active = _useState6[0],
      setActive = _useState6[1];

  var _useState7 = (0, _react.useState)(false),
      _useState8 = (0, _slicedToArray2.default)(_useState7, 2),
      constrained = _useState8[0],
      setConstrained = _useState8[1];

  var _useState9 = (0, _react.useState)(0),
      _useState10 = (0, _slicedToArray2.default)(_useState9, 2),
      initialWidth = _useState10[0],
      setInitialWidth = _useState10[1];

  (0, _react.useEffect)(function () {
    handle({
      setOffset: setOffset,
      setActive: setActive,
      setConstrained: setConstrained,
      setHovered: setHovered,
      setInitialWidth: setInitialWidth
    });
  }, []);

  var _useRowResize = useRowResize(null),
      onMouseDown = _useRowResize.onMouseDown,
      onDoubleClick = _useRowResize.onDoubleClick;

  var style = {
    transform: "translate3d(0px, ".concat(offset - Math.floor(height / 2) - 1, "px, 0px)"),
    height: height,
    left: column.computedOffset
  };

  if (hovered && !(active || constrained)) {
    style.width = initialWidth || 20;
  }

  return _react.default.createElement("div", {
    style: style,
    className: (0, _join.default)("InovuaReactDataGrid__row-resize-indicator", active && "InovuaReactDataGrid__row-resize-indicator--active", hovered && "InovuaReactDataGrid__row-resize-indicator--hovered", _isMobile.default && "InovuaReactDataGrid__row-resize-indicator--mobile", constrained && "InovuaReactDataGrid__row-resize-indicator--constrained"),
    onTouchStart: onMouseDown,
    onClick: stopPropagation,
    onDoubleClick: onDoubleClick
  });
};

exports.RowResizeIndicator = RowResizeIndicator;

var RowResizeHandle = _react.default.memo(function (_ref5) {
  var rowIndex = _ref5.rowIndex,
      data = _ref5.data,
      remoteRowIndex = _ref5.remoteRowIndex,
      renderIndex = _ref5.renderIndex,
      rowIndexInGroup = _ref5.rowIndexInGroup,
      column = _ref5.column;
  var computedProps = (0, _react.useContext)(_context.default);

  var _useState11 = (0, _react.useState)(false),
      _useState12 = (0, _slicedToArray2.default)(_useState11, 2),
      active = _useState12[0],
      doSetActive = _useState12[1];

  var _useState13 = (0, _react.useState)(false),
      _useState14 = (0, _slicedToArray2.default)(_useState13, 2),
      constrained = _useState14[0],
      doSetConstrained = _useState14[1];

  var domRef = (0, _react.useRef)(null);

  var _useRowResize2 = useRowResize(rowIndex, {
    rowIndexInGroup: rowIndexInGroup,
    data: data,
    remoteRowIndex: remoteRowIndex,
    setActive: doSetActive,
    setConstrained: doSetConstrained
  }),
      onMouseDown = _useRowResize2.onMouseDown,
      onDoubleClick = _useRowResize2.onDoubleClick;

  var onMouseEnter = function onMouseEnter() {
    if (!computedProps) {
      return;
    }

    var queue = (0, _batchUpdate.default)();

    var constrainTo = _region.default.from(computedProps.getDOMNode());

    var handleRegion = _region.default.from(domRef.current);

    var initialPosition = handleRegion.bottom - constrainTo.top;
    queue.commit(function () {
      computedProps.rowResizeHandleRef.current.setHovered(true);
      computedProps.rowResizeHandleRef.current.setOffset(initialPosition);
      computedProps.rowResizeHandleRef.current.setInitialWidth(column.computedWidth);
    });
  };

  var onMouseLeave = function onMouseLeave() {
    if (!computedProps) {
      return;
    }

    computedProps.rowResizeHandleRef.current.setHovered(false);
  };

  var indexToRender = rowIndexInGroup != null ? rowIndexInGroup : remoteRowIndex;
  return _react.default.createElement(_react.default.Fragment, null, renderIndex ? renderIndex(indexToRender) : indexToRender + 1, _react.default.createElement("div", {
    ref: domRef,
    className: (0, _join.default)("InovuaReactDataGrid__row-resize-handle", _isMobile.default && "InovuaReactDataGrid__row-resize-handle--mobile"),
    style: {
      width: column.computedWidth,
      height: computedProps ? computedProps.rowResizeHandleWidth : 10
    },
    onMouseEnter: onMouseEnter,
    onMouseLeave: onMouseLeave,
    onMouseDown: onMouseDown,
    onClick: stopPropagation,
    onDoubleClick: onDoubleClick
  }));
});

exports.RowResizeHandle = RowResizeHandle;
var _default = {
  id: _defaultRowIndexColumnId.id,
  rowIndexColumn: true,
  rowResize: true,
  cellSelectable: false,
  autoLock: true,
  headerAlign: 'center',
  textAlign: 'center',
  className: 'InovuaReactDataGrid__row-index-column',
  render: function render(_ref6, _ref7) {
    var remoteRowIndex = _ref6.remoteRowIndex,
        data = _ref6.data,
        rowIndex = _ref6.rowIndex,
        rowIndexInGroup = _ref6.rowIndexInGroup;
    var column = _ref7.column;
    return _react.default.createElement(RowResizeHandle, {
      data: data,
      rowIndex: rowIndex,
      rowIndexInGroup: rowIndexInGroup,
      remoteRowIndex: remoteRowIndex,
      renderIndex: column.renderIndex,
      column: column
    });
  },
  header: '',
  showInContextMenu: false,
  showColumnMenuSortOptions: false,
  showColumnMenuGroupOptions: false,
  showColumnMenuTool: false,
  sortable: false,
  editable: false,
  draggable: false,
  groupBy: false,
  defaultWidth: 40,
  minWidth: 40
};
exports.default = _default;