/**
 * Copyright Â© INOVUA TRADING.
 *
 * This source code is licensed under the Commercial License found in the
 * LICENSE file in the root directory of this source tree.
 */
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var dropIndexValidation = function dropIndexValidation(_ref) {
  var data = _ref.data,
      count = _ref.count,
      dragIndex = _ref.dragIndex,
      dropIndex = _ref.dropIndex,
      isRowReorderValid = _ref.isRowReorderValid,
      selectedGroup = _ref.selectedGroup,
      selectedParent = _ref.selectedParent,
      nodePathSeparator = _ref.nodePathSeparator,
      groupPathSeparator = _ref.groupPathSeparator,
      allowRowReoderBetweenGroups = _ref.allowRowReoderBetweenGroups,
      computedGroupBy = _ref.computedGroupBy,
      computedTreeEnabled = _ref.computedTreeEnabled,
      generateIdFromPath = _ref.generateIdFromPath,
      enableTreeRowReorderParentChange = _ref.enableTreeRowReorderParentChange;
  var iterateRows = false;
  var validDropPositions = [];

  if (computedGroupBy && computedGroupBy.length > 0) {
    validDropPositions = data.reduce(function (acc, curr, i) {
      if (curr.__group) {
        var value = curr.keyPath.join(groupPathSeparator);

        if (!value.localeCompare(selectedGroup)) {
          iterateRows = true;
        } else {
          if (!allowRowReoderBetweenGroups) {
            iterateRows = false;
          }
        }
      }

      if (allowRowReoderBetweenGroups) {
        iterateRows = true;
      }

      if (!curr.__group && iterateRows) {
        acc[i] = true;
      } else {
        acc[i] = false;
      }

      return acc;
    }, {});
  } else if (computedTreeEnabled && generateIdFromPath) {
    validDropPositions = data.reduce(function (acc, curr, i) {
      var _curr$__nodeProps = curr.__nodeProps,
          leafNode = _curr$__nodeProps.leafNode,
          path = _curr$__nodeProps.path;

      if (!data[dragIndex].__nodeProps.leafNode) {
        acc[i] = false;
      } else {
        var parentNodeId = getParentNodeId(path, nodePathSeparator);
        var selectedParentNodeId = selectedParent ? getParentNodeId(selectedParent, nodePathSeparator) : '';

        if (!leafNode) {
          acc[i] = false;
        } else {
          if (enableTreeRowReorderParentChange) {
            acc[i] = true;
          } else {
            if (parentNodeId === selectedParentNodeId) {
              acc[i] = true;
            } else {
              acc[i] = false;
            }
          }
        }
      }

      return acc;
    }, {});
  } else {
    validDropPositions = (0, _toConsumableArray2.default)(Array(count)).reduce(function (acc, _curr, i) {
      acc[i] = true;
      return acc;
    }, {});
    validDropPositions[count] = true;
  }

  if (isRowReorderValid) {
    validDropPositions[dropIndex] = isRowReorderValid({
      dragRowIndex: dragIndex,
      dropRowIndex: dropIndex
    });
  }

  return validDropPositions;
};

var getParentNodeId = function getParentNodeId(path, pathSeparator) {
  if (pathSeparator) {
    var parsedPath = path.split(pathSeparator);
    parsedPath.pop();
    var parentNodeId = parsedPath.join(pathSeparator);
    return parentNodeId;
  }

  return path;
};

var _default = dropIndexValidation;
exports.default = _default;