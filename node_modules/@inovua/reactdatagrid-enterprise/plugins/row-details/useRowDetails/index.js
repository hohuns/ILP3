/**
 * Copyright Â© INOVUA TRADING.
 *
 * This source code is licensed under the Commercial License found in the
 * LICENSE file in the root directory of this source tree.
 */
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = require("react");

var _useProperty7 = _interopRequireDefault(require("@inovua/reactdatagrid-community/hooks/useProperty"));

var _sealedObjectFactory = _interopRequireDefault(require("@inovua/reactdatagrid-community/utils/sealedObjectFactory"));

var _batchUpdate = _interopRequireDefault(require("@inovua/reactdatagrid-community/utils/batchUpdate"));

var _isControlledProperty = _interopRequireDefault(require("@inovua/reactdatagrid-community/utils/isControlledProperty"));

var _renderDetailsGrid = _interopRequireDefault(require("./renderDetailsGrid"));

var _isRowExpandEnabled_FromProps = require("@inovua/reactdatagrid-community/utils/isRowExpandEnabled_FromProps");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

var EXPANDABLE_ROW_INFO = (0, _sealedObjectFactory.default)({
  rowIndex: undefined,
  data: undefined,
  id: undefined
});

var getRowHeights_FromProps = function getRowHeights_FromProps(computedProps) {
  return computedProps.computedRowHeights || {};
};

var setRowHeightById_FromProps = function setRowHeightById_FromProps(rowHeight, id, computedProps) {
  var rowHeights = _objectSpread({}, getRowHeights_FromProps(computedProps));

  var changed = false;

  if (rowHeight != null) {
    if (rowHeights[id] !== rowHeight) {
      rowHeights[id] = rowHeight;
      changed = true;
    }
  } else {
    if (rowHeights[id]) {
      delete rowHeights[id];
      changed = true;
    }
  }

  if (changed) {
    computedProps.setRowHeights(rowHeights);
  }
};

var updateExpandedHeights_FromProps = function updateExpandedHeights_FromProps(computedProps, rowHeights) {
  var rowExpandHeight = computedProps.rowExpandHeight,
      dataMap = computedProps.dataMap;
  var expandedRows = getExpandedMap_FromProps(computedProps);
  var defaultRowHeight = computedProps.rowHeight;
  var heights = {};
  var dataIndexMap = computedProps.dataIndexMap;

  if (dataIndexMap) {
    for (var itemId in expandedRows) {
      var index = dataIndexMap[itemId];

      if (index !== undefined) {
        if (typeof rowExpandHeight === 'number') {
          heights[index] = rowExpandHeight;
        } else if (typeof rowExpandHeight === 'function') {
          var currentRowHeight = rowExpandHeight({
            data: dataMap && dataMap[itemId]
          });
          heights[index] = currentRowHeight;
        }
      }
    }
  }

  rowHeights = rowHeights || getRowHeights_FromProps(computedProps);

  if (rowHeights && dataIndexMap) {
    for (var _itemId in rowHeights) {
      var _index = dataIndexMap[_itemId];

      if (_index !== undefined) {
        heights[_index] = rowHeights[_itemId];
      }
    }
  }

  if (computedProps.initialProps.onUpdateRowHeights) {
    computedProps.initialProps.onUpdateRowHeights(heights, computedProps);
  }

  computedProps.rowHeightManager.setValues({
    defaultRowHeight: defaultRowHeight,
    map: heights
  });
};

var setExpandedMap_FromProps = function setExpandedMap_FromProps(expandedMap, collapsedMap) {
  var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {
    id: null,
    data: null,
    expanded: false
  },
      id = _ref.id,
      data = _ref.data,
      expanded = _ref.expanded;

  var computedProps = arguments.length > 3 ? arguments[3] : undefined;
  var index;

  if (expandedMap === true && !computedProps.multiRowExpand) {
    throw new Error('cannot expand all when multiRowExpand is false');
  }

  if (data) {
    index = computedProps.dataIndexMap[id];

    if (!expanded) {
      var rowHeights = computedProps.computedRowHeights;

      if (rowHeights && rowHeights[id]) {
        rowHeights = _objectSpread({}, rowHeights);
        delete rowHeights[id];
        computedProps.setRowHeights(rowHeights);
      }

      if (computedProps.initialProps.onRowCollapse && computedProps.initialProps.onRowCollapse({
        data: data,
        id: id,
        index: index
      }) === false) {
        return;
      }
    } else {
      if (!computedProps.isRowExpandableAt(index)) {
        return;
      }

      if (computedProps.initialProps.onRowExpand && computedProps.initialProps.onRowExpand({
        data: data,
        id: id,
        index: index
      }) === false) {
        return;
      }

      if (!computedProps.multiRowExpand) {
        expandedMap = (0, _defineProperty2.default)({}, id, true);
      }
    }

    if (computedProps.initialProps.onRowExpandChange && computedProps.initialProps.onRowExpandChange({
      expandedRows: expandedMap,
      collapsedRows: collapsedMap,
      id: id,
      index: index,
      data: data,
      rowExpanded: expanded
    }) === false) {
      return;
    }
  }

  if (computedProps.initialProps.onExpandedRowsChange) {
    computedProps.initialProps.onExpandedRowsChange({
      expandedRows: expandedMap,
      collapsedRows: collapsedMap,
      rowExpanded: expanded,
      data: data,
      id: id,
      index: index
    });
  }

  if (!(0, _isControlledProperty.default)(computedProps.initialProps, 'expandedRows') && !(0, _isControlledProperty.default)(computedProps.initialProps, 'collapsedRows') || computedProps.initialProps.expandedRows === true && !(0, _isControlledProperty.default)(computedProps.initialProps, 'collapsedRows')) {
    var queue = (0, _batchUpdate.default)();
    queue(function () {
      computedProps.setExpandedRows(expandedMap);
      computedProps.setCollapsedRows(collapsedMap);
    });
    queue.commit();
  }
};

var isRowExpandableAt_FromProps = function isRowExpandableAt_FromProps(rowIndex, computedProps) {
  var data = computedProps.getItemAt(rowIndex);

  if (!data) {
    return false;
  }

  if (data.__group) {
    return false;
  }

  var id = computedProps.getItemId(data);

  if (computedProps.unexpandableRows && computedProps.unexpandableRows[id]) {
    return false;
  }

  if (!computedProps.isRowExpandable) {
    return true;
  }

  EXPANDABLE_ROW_INFO.id = id;
  EXPANDABLE_ROW_INFO.data = data;
  EXPANDABLE_ROW_INFO.rowIndex = rowIndex;
  return computedProps.isRowExpandable(EXPANDABLE_ROW_INFO);
};

var getExpandedMap_FromProps = function getExpandedMap_FromProps(computedProps) {
  if (!(0, _isRowExpandEnabled_FromProps.isRowExpandEnabled_FromProps)(computedProps)) {
    return undefined;
  }

  var expandedRows = computedProps.computedExpandedRows;

  if (expandedRows !== undefined && expandedRows !== true) {
    expandedRows = _objectSpread({}, expandedRows);
    Object.keys(getUnexpandableRowsMap_FromProps(computedProps)).forEach(function (k) {
      delete expandedRows[k];
    });
  }

  if (expandedRows === true) {
    expandedRows = computedProps.data.reduce(function (acc, item, index) {
      if (computedProps.isRowExpanded(index)) {
        acc[computedProps.getItemId(item)] = true;
      }

      return acc;
    }, {});
  }

  if ((0, _typeof2.default)(expandedRows) !== 'object' && expandedRows !== true) {
    expandedRows = {};
  }

  return expandedRows;
};

var getUnexpandableRows_FromProps = function getUnexpandableRows_FromProps(computedProps) {
  var groupBy = computedProps.computedGroupBy;
  var initialProps = computedProps.initialProps;

  if (!groupBy && !initialProps.isRowExpandable) {
    return [];
  }

  if (groupBy && !initialProps.isRowExpandable) {
    return computedProps.computedGroupArray || [];
  }

  return computedProps.data.filter(function (_, index) {
    return !isRowExpandableAt_FromProps(index, computedProps);
  });
};

var getUnexpandableRowsMap_FromProps = function getUnexpandableRowsMap_FromProps(computedProps) {
  if (computedProps.unexpandableRows) {
    return computedProps.unexpandableRows;
  }

  return getUnexpandableRows_FromProps(computedProps).reduce(function (acc, data) {
    var id = computedProps.getItemId(data);
    acc[id] = true;
    return acc;
  }, {});
};

var getCollapsedMap_FromProps = function getCollapsedMap_FromProps(computedProps) {
  if (!computedProps.computedRowExpandEnabled) {
    return undefined;
  }

  if (!computedProps.multiRowExpand) {
    return undefined;
  }

  var result = computedProps.computedCollapsedRows || {};

  if (computedProps.computedGroupBy && computedProps.computedGroupKeys) {
    result = _objectSpread(_objectSpread({}, result), computedProps.computedGroupKeys);
  }

  if (computedProps.unexpandableRows) {
    result = _objectSpread(_objectSpread({}, result), computedProps.unexpandableRows);
  }

  if (computedProps.initialProps.isRowExpandable) {
    result = _objectSpread({}, result);
    computedProps.data.forEach(function (item, index) {
      if (!computedProps.isRowExpandableAt(index)) {
        result[computedProps.getItemId(item)] = true;
      }
    });
  }

  return result;
};

var isRowExpandedById_FromProps = function isRowExpandedById_FromProps(id, computedProps) {
  var expandedRows = computedProps.computedExpandedRows;

  if (!expandedRows) {
    return false;
  }

  var isExpanded;

  if (expandedRows === true) {
    var collapsedRows = getCollapsedMap_FromProps(computedProps) || {};
    isExpanded = !collapsedRows[id];
  } else {
    isExpanded = !!expandedRows[id];
  }

  if (isExpanded) {
    isExpanded = computedProps.isRowExpanded(computedProps.getRowIndexById(id));
  }

  return isExpanded;
};

var isRowExpanded_FromProps = function isRowExpanded_FromProps(data, computedProps) {
  if (data == null) {
    return false;
  }

  var index = undefined;

  if (typeof data == 'number') {
    index = data;
    data = computedProps.getItemAt(data);
  }

  var expandedRows = computedProps.computedExpandedRows;
  var id = computedProps.getItemId(data);

  if (!expandedRows) {
    return false;
  }

  var isExpanded;

  if (expandedRows === true) {
    var collapsedMap = getCollapsedMap_FromProps(computedProps) || {};
    isExpanded = !collapsedMap[id];
  } else {
    isExpanded = expandedRows ? !!expandedRows[id] : false;
  }

  if (isExpanded) {
    if (index === undefined) {
      index = computedProps.getRowIndexById(id);
    }

    isExpanded = computedProps.isRowExpandableAt(index);
  }

  return isExpanded;
};

var setRowExpandedById_FromProps = function setRowExpandedById_FromProps(id, expanded, computedProps) {
  var data = computedProps.dataMap[id];

  if (!data) {
    return;
  }

  var expandedRowsValue = computedProps.computedExpandedRows;

  if (expandedRowsValue === true) {
    var collapsedMap = _objectSpread({}, computedProps.getCollapsedMap() || {});

    if (!expanded) {
      collapsedMap[id] = true;
    } else {
      delete collapsedMap[id];
    }

    setExpandedMap_FromProps(true, collapsedMap, {
      data: data,
      expanded: expanded,
      id: id
    }, computedProps);
    return;
  }

  var expandedMap = _objectSpread({}, computedProps.getExpandedMap());

  if (!expanded) {
    delete expandedMap[id];
  } else {
    expandedMap[id] = true;
  }

  setExpandedMap_FromProps(expandedMap, undefined, {
    data: data,
    expanded: expanded,
    id: id
  }, computedProps);
};

var useRowDetails = function useRowDetails(props, computedProps, computedPropsRef) {
  var _useProperty = (0, _useProperty7.default)(props, 'expandedRows'),
      _useProperty2 = (0, _slicedToArray2.default)(_useProperty, 2),
      expandedRows = _useProperty2[0],
      setExpandedRows = _useProperty2[1];

  var _useProperty3 = (0, _useProperty7.default)(props, 'collapsedRows'),
      _useProperty4 = (0, _slicedToArray2.default)(_useProperty3, 2),
      collapsedRows = _useProperty4[0],
      setCollapsedRows = _useProperty4[1];

  var _useProperty5 = (0, _useProperty7.default)(props, 'rowHeights'),
      _useProperty6 = (0, _slicedToArray2.default)(_useProperty5, 2),
      rowHeights = _useProperty6[0],
      doSetRowHeights = _useProperty6[1];

  var setRowHeights = (0, _react.useCallback)(function (rowHeights) {
    var computedProps = computedPropsRef.current;

    if (!computedProps) {
      return;
    }

    doSetRowHeights(rowHeights);
  }, []);
  var isRowExpandEnabled = (0, _react.useCallback)(function () {
    var computedProps = computedPropsRef.current;

    if (!computedProps) {
      return false;
    }

    return (0, _isRowExpandEnabled_FromProps.isRowExpandEnabled_FromProps)(computedProps);
  }, []);
  var isRowExpandableAt = (0, _react.useCallback)(function (rowIndex) {
    var computedProps = computedPropsRef.current;

    if (!computedProps) {
      return false;
    }

    return isRowExpandableAt_FromProps(rowIndex, computedProps);
  }, []);
  var isRowExpandableById = (0, _react.useCallback)(function (rowId) {
    var computedProps = computedPropsRef.current;

    if (!computedProps) {
      return false;
    }

    var index = computedProps.getRowIndexById(rowId);
    return isRowExpandableAt(index);
  }, []);
  var isRowExpanded = (0, _react.useCallback)(function (data) {
    var computedProps = computedPropsRef.current;

    if (!computedProps) {
      return false;
    }

    return isRowExpanded_FromProps(data, computedProps);
  }, []);
  var getCollapsedMap = (0, _react.useCallback)(function () {
    var computedProps = computedPropsRef.current;

    if (!computedProps) {
      return undefined;
    }

    return getCollapsedMap_FromProps(computedProps);
  }, []);
  var getExpandedMap = (0, _react.useCallback)(function () {
    var computedProps = computedPropsRef.current;

    if (!computedProps) {
      return undefined;
    }

    return getExpandedMap_FromProps(computedProps);
  }, []);
  var setRowExpandedById = (0, _react.useCallback)(function (id, expanded) {
    var computedProps = computedPropsRef.current;

    if (!computedProps) {
      return;
    }

    setRowExpandedById_FromProps(id, expanded, computedProps);
  }, []);
  var toggleRowExpandById = (0, _react.useCallback)(function (id) {
    var computedProps = computedPropsRef.current;

    if (!computedProps) {
      return;
    }

    setRowExpandedById_FromProps(id, !isRowExpandedById(id), computedProps);
  }, []);
  var setRowExpandedAt = (0, _react.useCallback)(function (index, expanded) {
    var data = computedProps.getItemAt(index);

    if (!data) {
      return;
    }

    var id = computedProps.getItemId(data);
    return setRowExpandedById(id, expanded);
  }, []);
  var setRowHeightById = (0, _react.useCallback)(function (rowHeight, id) {
    var computedProps = computedPropsRef.current;

    if (!computedProps) {
      return;
    }

    setRowHeightById_FromProps(rowHeight, id, computedProps);
  }, []);
  var toggleRowExpand = (0, _react.useCallback)(function (dataOrIndex) {
    var computedProps = computedPropsRef.current;

    if (!computedProps) {
      return;
    }

    var data = typeof dataOrIndex === 'number' ? computedProps.data[dataOrIndex] : dataOrIndex;

    if (!data) {
      return;
    }

    var id = computedProps.getItemId(data);
    var expanded = isRowExpanded(data);
    return setRowExpandedById(id, !expanded);
  }, []);
  var isRowExpandedById = (0, _react.useCallback)(function (id) {
    var computedProps = computedPropsRef.current;

    if (!computedProps) {
      return false;
    }

    return isRowExpandedById_FromProps(id, computedProps);
  }, []);
  var computedCollapsedRows = collapsedRows;
  var computedExpandedRows = expandedRows;
  var computedRowExpandEnabled = (0, _isRowExpandEnabled_FromProps.isRowExpandEnabled_FromProps)(props);
  (0, _react.useLayoutEffect)(function () {
    var computedProps = computedPropsRef.current;

    if (!computedProps) {
      return;
    }

    if (computedProps.wasMountedRef.current === false) {
      return;
    }

    updateExpandedHeights_FromProps(computedProps);
  }, [props.rowHeight, props.rowExpandHeight, computedProps.dataIndexMap, rowHeights, computedExpandedRows, computedCollapsedRows, computedRowExpandEnabled]);
  var detailsGridInfoRef = (0, _react.useRef)({});
  var renderDetailsGrid = (0, _react.useCallback)(function (rowDetailsInfo) {
    var computedProps = computedPropsRef.current;

    if (!computedProps) {
      return;
    }

    return (0, _renderDetailsGrid.default)(rowDetailsInfo, computedProps);
  }, []);
  var onDetailsDidMount = (0, _react.useCallback)(function (childGridComputedPropsRef) {
    var childGridComputedProps = childGridComputedPropsRef.current;

    if (!childGridComputedProps) {
      return;
    }

    childGridComputedProps.detailsGridInfoRef.current.__detailsPersisted = false;
    var rowDetailsInfo = childGridComputedProps.initialProps.__parentRowInfo;
    var info = detailsGridInfoRef.current;

    if (info.masterDetailsKeys && info.unmountedDetails && info.masterDetailsInstances) {
      var cacheKey = info.masterDetailsKeys[rowDetailsInfo.id];
      info.masterDetailsInstances[cacheKey] = childGridComputedProps;
      delete info.unmountedDetails[cacheKey];
    }
  }, []);
  var getSelfRestoreProperties = (0, _react.useCallback)(function () {
    var computedProps = computedPropsRef.current;

    if (!computedProps) {
      return null;
    }

    var info = computedProps.detailsGridInfoRef.current;
    return {
      rowHeightManager: computedProps.rowHeightManager,
      masterDetailsCache: info.masterDetailsCache,
      masterDetailsKeys: info.masterDetailsKeys,
      originalDetailsGrids: info.originalDetailsGrids,
      unmountedDetails: info.unmountedDetails
    };
  }, []);

  var persistUnmountedDetails = function persistUnmountedDetails() {
    var info = detailsGridInfoRef.current;

    if (info.masterDetailsInstances) {
      Object.keys(info.masterDetailsInstances).forEach(function (cacheKey) {
        var childGridComputedProps = info.masterDetailsInstances[cacheKey];

        if (childGridComputedProps) {
          onDetailsWillUnmount({
            current: childGridComputedProps
          });
        }
      });
    }
  };

  var onDetailsWillUnmount = (0, _react.useCallback)(function (childGridComputedPropsRef) {
    var childGridComputedProps = childGridComputedPropsRef.current;

    if (childGridComputedProps.detailsGridInfoRef.current.__detailsPersisted) {
      return;
    }

    var rowDetailsInfo = childGridComputedProps.initialProps.__parentRowInfo;
    childGridComputedProps.persistUnmountedDetails();
    var info = detailsGridInfoRef.current;

    if (info.masterDetailsKeys && info.unmountedDetails) {
      var cacheKey = info.masterDetailsKeys[rowDetailsInfo.id];
      info.unmountedDetails[cacheKey] = {
        state: childGridComputedProps.getState(),
        scrollTop: childGridComputedProps.getScrollTop(),
        scrollLeft: childGridComputedProps.getScrollLeft(),
        self: childGridComputedProps.getSelfRestoreProperties()
      };
    }

    childGridComputedProps.detailsGridInfoRef.current.__detailsPersisted = true;
  }, []);
  var onDetailsUpdateRowHeights = (0, _react.useCallback)(function (rowHeights, childComputedProps) {
    var computedProps = computedPropsRef.current;

    if (!computedProps) {
      return;
    }

    var getExtraRowHeights = function getExtraRowHeights(childComputedProps) {
      var rowHeight = childComputedProps.initialProps.rowHeight;
      var substractRowHeight = rowHeight;
      var result = Object.keys(rowHeights || {}).reduce(function (acc, rowId) {
        return acc + rowHeights[rowId] - substractRowHeight;
      }, 0);
      return result;
    };

    var parentRowInfo = childComputedProps.initialProps.__parentRowInfo;
    var extraHeight = getExtraRowHeights(childComputedProps);

    if (extraHeight) {
      setRowHeightById(computedProps.initialProps.rowExpandHeight + extraHeight, parentRowInfo.id);
    } else {
      setRowHeightById(null, parentRowInfo.id);
    }
  }, []);
  var getRowHeightById = (0, _react.useCallback)(function (id) {
    var computedProps = computedPropsRef.current;

    if (!computedProps) {
      return 0;
    }

    var rowHeights = getRowHeights_FromProps(computedProps);
    return rowHeights[id] || computedProps.rowHeight;
  }, []);
  var collapseAllRows = (0, _react.useCallback)(function () {
    var computedProps = computedPropsRef.current;

    if (!computedProps) {
      return;
    }

    setExpandedMap_FromProps({}, undefined, undefined, computedProps);
  }, []);
  var expandAllRows = (0, _react.useCallback)(function () {
    var computedProps = computedPropsRef.current;

    if (!computedProps) {
      return;
    }

    setExpandedMap_FromProps(true, getUnexpandableRowsMap_FromProps(computedProps), undefined, computedProps);
  }, []);
  var computedRenderRowDetails = props.renderRowDetails || (props.renderDetailsGrid ? renderDetailsGrid : null);
  return {
    detailsGridInfoRef: detailsGridInfoRef,
    setExpandedRows: setExpandedRows,
    setCollapsedRows: setCollapsedRows,
    getCollapsedMap: getCollapsedMap,
    getExpandedMap: getExpandedMap,
    setRowHeights: setRowHeights,
    isRowExpanded: isRowExpanded,
    isRowExpandableById: isRowExpandableById,
    setRowExpandedById: setRowExpandedById,
    setRowHeightById: setRowHeightById,
    setRowExpandedAt: setRowExpandedAt,
    getRowHeightById: getRowHeightById,
    collapseAllRows: collapseAllRows,
    expandAllRows: expandAllRows,
    isRowExpandedById: isRowExpandedById,
    isRowExpandEnabled: isRowExpandEnabled,
    isRowExpandableAt: isRowExpandableAt,
    toggleRowExpand: toggleRowExpand,
    toggleRowExpandById: toggleRowExpandById,
    computedRowHeights: rowHeights,
    computedExpandedRows: computedExpandedRows,
    computedCollapsedRows: computedCollapsedRows,
    computedRowExpandEnabled: computedRowExpandEnabled,
    computedRenderRowDetails: computedRenderRowDetails,
    onDetailsUpdateRowHeights: onDetailsUpdateRowHeights,
    onDetailsDidMount: onDetailsDidMount,
    onDetailsWillUnmount: onDetailsWillUnmount,
    getSelfRestoreProperties: getSelfRestoreProperties,
    persistUnmountedDetails: persistUnmountedDetails
  };
};

var _default = useRowDetails;
exports.default = _default;