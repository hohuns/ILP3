/**
 * Copyright Â© INOVUA TRADING.
 *
 * This source code is licensed under the Commercial License found in the
 * LICENSE file in the root directory of this source tree.
 */
import { TypeComputedProps, TypeDataGridProps, TypeExpandedRows, TypeCollapsedRows, TypeDetailsGridInfo } from '../../../types';
import { MutableRefObject } from 'react';
import { TypeRowDetailsInfo } from '../../../types';
declare const useRowDetails: (props: TypeDataGridProps, computedProps: TypeComputedProps, computedPropsRef: MutableRefObject<TypeComputedProps | null>) => {
    detailsGridInfoRef: MutableRefObject<TypeDetailsGridInfo>;
    setExpandedRows: (...args: any[]) => any;
    setCollapsedRows: (...args: any[]) => any;
    getCollapsedMap: () => {
        [key: string]: boolean;
    } | undefined;
    getExpandedMap: () => {
        [key: string]: boolean;
    } | undefined;
    setRowHeights: (rowHeights: {
        [key: string]: number;
    }) => void;
    isRowExpanded: (data: object | number) => boolean;
    isRowExpandableById: (rowId: string | number) => boolean;
    setRowExpandedById: (id: string | number, expanded: boolean) => void;
    setRowHeightById: (rowHeight: number | null, id: string | number) => void;
    setRowExpandedAt: (index: number, expanded: boolean) => void;
    getRowHeightById: (id: string | number) => number;
    collapseAllRows: () => void;
    expandAllRows: () => void;
    isRowExpandedById: (id: string | number) => boolean;
    isRowExpandEnabled: () => boolean;
    isRowExpandableAt: (rowIndex: number) => boolean;
    toggleRowExpand: (dataOrIndex: string | number) => void;
    toggleRowExpandById: (id: string | number) => void;
    computedRowHeights: {
        [key: string]: number;
    } | undefined;
    computedExpandedRows: TypeExpandedRows | undefined;
    computedCollapsedRows: TypeCollapsedRows | undefined;
    computedRowExpandEnabled: boolean;
    computedRenderRowDetails: ((rowDetailsInfo: TypeRowDetailsInfo) => any) | null;
    onDetailsUpdateRowHeights: (rowHeights: {
        [key: string]: number;
    }, childComputedProps: TypeComputedProps) => void;
    onDetailsDidMount: (childGridComputedPropsRef: MutableRefObject<TypeComputedProps | null>) => void;
    onDetailsWillUnmount: (childGridComputedPropsRef: MutableRefObject<TypeComputedProps>) => void;
    getSelfRestoreProperties: () => {
        rowHeightManager: any;
        masterDetailsCache: any;
        masterDetailsKeys: any;
        originalDetailsGrids: any;
        unmountedDetails: any;
    } | null;
    persistUnmountedDetails: () => void;
};
export default useRowDetails;
