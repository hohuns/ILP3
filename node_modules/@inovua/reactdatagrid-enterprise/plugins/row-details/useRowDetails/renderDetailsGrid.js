/**
 * Copyright Â© INOVUA TRADING.
 *
 * This source code is licensed under the Commercial License found in the
 * LICENSE file in the root directory of this source tree.
 */
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = require("react");

var _renderGridMenu2 = _interopRequireDefault(require("@inovua/reactdatagrid-community/renderGridMenu"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

var callAll = function callAll() {
  for (var _len = arguments.length, fns = new Array(_len), _key = 0; _key < _len; _key++) {
    fns[_key] = arguments[_key];
  }

  return function () {
    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }

    fns.forEach(function (fn) {
      fn && fn.apply(void 0, args);
    });
  };
};

var _default = function _default(rowDetailsInfo, computedProps) {
  var detailsGridCacheKey = computedProps.detailsGridCacheKey,
      renderDetailsGrid = computedProps.renderDetailsGrid;
  var info = computedProps.detailsGridInfoRef.current;
  info.masterDetailsInstances = info.masterDetailsInstances || {};
  info.masterDetailsKeys = info.masterDetailsKeys || {};
  info.unmountedDetails = info.unmountedDetails || {};
  info.masterDetailsCache = info.masterDetailsCache || {};
  info.originalDetailsGrids = info.originalDetailsGrids || {};
  var cachedGrid;
  var shouldUseCache;
  var cacheKey = rowDetailsInfo.id;

  if (detailsGridCacheKey) {
    if (detailsGridCacheKey === true) {
      cacheKey = rowDetailsInfo.id;
      shouldUseCache = true;
    }

    if (typeof detailsGridCacheKey === 'function') {
      shouldUseCache = true;
      cacheKey = detailsGridCacheKey(rowDetailsInfo);
    }
  }

  if (shouldUseCache) {
    cachedGrid = info.masterDetailsCache[cacheKey];
  }

  var detailsGridProps = {};
  var remount = info.unmountedDetails[cacheKey];

  if (remount) {
    detailsGridProps.initialState = remount.state;
    detailsGridProps.initialScrollTop = remount.scrollTop;
    detailsGridProps.initialScrollLeft = remount.scrollLeft;
    detailsGridProps.skipLoadOnMount = true;
    detailsGridProps.__selfAssign = remount.self;
  }

  detailsGridProps = _objectSpread(_objectSpread({}, detailsGridProps), {}, {
    __parentRowInfo: rowDetailsInfo,
    menuPortalContainer: computedProps.initialProps.menuPortalContainer || computedProps.getMenuPortalContainer(),
    renderInPortal: computedProps.renderInPortal,
    renderGridMenu: function renderGridMenu(menu, cProps) {
      return (0, _renderGridMenu2.default)(menu, cProps, computedProps.menusRef);
    },
    onScroll: computedProps.onScroll,
    parentComputedProps: computedProps,
    licenseKey: computedProps.licenseKey,
    onUpdateRowHeights: computedProps.onDetailsUpdateRowHeights,
    onDidMount: computedProps.onDetailsDidMount,
    onWillUnmount: computedProps.onDetailsWillUnmount
  });
  cachedGrid = cachedGrid || renderDetailsGrid(rowDetailsInfo, detailsGridProps);
  var oldKey = info.masterDetailsKeys[rowDetailsInfo.id];

  if (oldKey !== cacheKey && info.masterDetailsCache[oldKey] !== undefined) {
    delete info.masterDetailsCache[oldKey];
  }

  if (shouldUseCache) {
    info.masterDetailsKeys[rowDetailsInfo.id] = cacheKey;
    info.masterDetailsCache[cacheKey] = cachedGrid;
  }

  if (!computedProps.initialProps.growExpandHeightWithDetails) {
    return cachedGrid;
  }

  info.originalDetailsGrids[rowDetailsInfo.id] = cachedGrid;
  var clone = (0, _react.cloneElement)(cachedGrid, _objectSpread(_objectSpread({}, detailsGridProps), {}, {
    onUpdateRowHeights: cachedGrid.props.onUpdateRowHeights ? callAll(cachedGrid.props.onUpdateRowHeights, computedProps.onDetailsUpdateRowHeights) : computedProps.onDetailsUpdateRowHeights,
    onDidMount: cachedGrid.props.onDidMount ? callAll(cachedGrid.props.onDidMount, computedProps.onDetailsDidMount) : computedProps.onDetailsDidMount,
    onWillUnmount: cachedGrid.props.onWillUnmount ? callAll(cachedGrid.props.onWillUnmount, computedProps.onDetailsWillUnmount) : computedProps.onDetailsWillUnmount
  }));
  return clone;
};

exports.default = _default;