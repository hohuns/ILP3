/**
 * Copyright Â© INOVUA TRADING.
 *
 * This source code is licensed under the Commercial License found in the
 * LICENSE file in the root directory of this source tree.
 */
/// <reference types="react" />
declare const _default: {
    name: string;
    hook: (props: import("../../types").TypeDataGridProps, computedProps: import("../../types").TypeComputedProps, computedPropsRef: import("react").MutableRefObject<import("../../types").TypeComputedProps | null>) => {
        detailsGridInfoRef: import("react").MutableRefObject<import("../../types").TypeDetailsGridInfo>;
        setExpandedRows: (...args: any[]) => any;
        setCollapsedRows: (...args: any[]) => any;
        getCollapsedMap: () => {
            [key: string]: boolean;
        } | undefined;
        getExpandedMap: () => {
            [key: string]: boolean;
        } | undefined;
        setRowHeights: (rowHeights: {
            [key: string]: number;
        }) => void;
        isRowExpanded: (data: number | object) => boolean;
        isRowExpandableById: (rowId: string | number) => boolean;
        setRowExpandedById: (id: string | number, expanded: boolean) => void;
        setRowHeightById: (rowHeight: number | null, id: string | number) => void;
        setRowExpandedAt: (index: number, expanded: boolean) => void;
        getRowHeightById: (id: string | number) => number;
        collapseAllRows: () => void;
        expandAllRows: () => void;
        isRowExpandedById: (id: string | number) => boolean;
        isRowExpandEnabled: () => boolean;
        isRowExpandableAt: (rowIndex: number) => boolean;
        toggleRowExpand: (dataOrIndex: string | number) => void;
        toggleRowExpandById: (id: string | number) => void;
        computedRowHeights: {
            [key: string]: number;
        } | undefined;
        computedExpandedRows: import("../../types").TypeExpandedRows | undefined;
        computedCollapsedRows: import("../../types").TypeCollapsedRows | undefined;
        computedRowExpandEnabled: boolean;
        computedRenderRowDetails: ((rowDetailsInfo: import("../../types").TypeRowDetailsInfo) => any) | null;
        onDetailsUpdateRowHeights: (rowHeights: {
            [key: string]: number;
        }, childComputedProps: import("../../types").TypeComputedProps) => void;
        onDetailsDidMount: (childGridComputedPropsRef: import("react").MutableRefObject<import("../../types").TypeComputedProps | null>) => void;
        onDetailsWillUnmount: (childGridComputedPropsRef: import("react").MutableRefObject<import("../../types").TypeComputedProps>) => void;
        getSelfRestoreProperties: () => {
            rowHeightManager: any;
            masterDetailsCache: any;
            masterDetailsKeys: any;
            originalDetailsGrids: any;
            unmountedDetails: any;
        } | null;
        persistUnmountedDetails: () => void;
    };
    maybeAddColumns(columns: any, props: any): any;
    defaultProps: () => {};
};
export default _default;
