{"ast":null,"code":"/**\n * Copyright © INOVUA TRADING.\n *\n * This source code is licensed under the Commercial License found in the\n * LICENSE file in the root directory of this source tree.\n */\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar getDropRowIndex = function getDropRowIndex(_ref) {\n  var rowHeightManager = _ref.rowHeightManager,\n      dragBoxInitialRegion = _ref.dragBoxInitialRegion,\n      dragBoxOffsets = _ref.dragBoxOffsets,\n      initialDiffTop = _ref.initialDiffTop,\n      scrollTop = _ref.scrollTop,\n      dragIndex = _ref.dragIndex,\n      dir = _ref.dir;\n  var rowOffset = dragBoxInitialRegion.top - dragBoxOffsets.top + initialDiffTop + scrollTop;\n  var currentIndex = rowHeightManager.getRowAt(rowOffset);\n\n  if (currentIndex < 0) {\n    return {\n      index: -1\n    };\n  }\n\n  var nextRowIndex = currentIndex + dir;\n  var nextRowHeight = rowHeightManager.getRowHeight(nextRowIndex);\n  var nextRowOffset = rowHeightManager.getRowOffset(nextRowIndex);\n  var halfSize = nextRowHeight / 2;\n\n  if (nextRowOffset < 0) {\n    nextRowOffset = 0;\n  }\n\n  var newDropIndex = -1;\n\n  if (dir > 0) {\n    if (rowOffset >= nextRowOffset - halfSize) {\n      newDropIndex = nextRowIndex;\n    }\n  }\n\n  if (dir < 0) {\n    if (rowOffset > nextRowOffset + halfSize + nextRowHeight) {\n      newDropIndex = currentIndex === dragIndex ? dragIndex : currentIndex + 1;\n    } else {\n      newDropIndex = currentIndex;\n    }\n  }\n\n  if (newDropIndex === -1) {\n    newDropIndex = currentIndex;\n  }\n\n  return {\n    index: newDropIndex\n  };\n};\n\nvar _default = getDropRowIndex;\nexports.default = _default;","map":{"version":3,"sources":["/Users/sungjaejoo/Desktop/ILP-main/node_modules/@inovua/reactdatagrid-enterprise/plugins/row-reorder/utils/getDropRowIndex.js"],"names":["Object","defineProperty","exports","value","default","getDropRowIndex","_ref","rowHeightManager","dragBoxInitialRegion","dragBoxOffsets","initialDiffTop","scrollTop","dragIndex","dir","rowOffset","top","currentIndex","getRowAt","index","nextRowIndex","nextRowHeight","getRowHeight","nextRowOffset","getRowOffset","halfSize","newDropIndex","_default"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;;AAEA,IAAIC,eAAe,GAAG,SAASA,eAAT,CAAyBC,IAAzB,EAA+B;AACnD,MAAIC,gBAAgB,GAAGD,IAAI,CAACC,gBAA5B;AAAA,MACIC,oBAAoB,GAAGF,IAAI,CAACE,oBADhC;AAAA,MAEIC,cAAc,GAAGH,IAAI,CAACG,cAF1B;AAAA,MAGIC,cAAc,GAAGJ,IAAI,CAACI,cAH1B;AAAA,MAIIC,SAAS,GAAGL,IAAI,CAACK,SAJrB;AAAA,MAKIC,SAAS,GAAGN,IAAI,CAACM,SALrB;AAAA,MAMIC,GAAG,GAAGP,IAAI,CAACO,GANf;AAOA,MAAIC,SAAS,GAAGN,oBAAoB,CAACO,GAArB,GAA2BN,cAAc,CAACM,GAA1C,GAAgDL,cAAhD,GAAiEC,SAAjF;AACA,MAAIK,YAAY,GAAGT,gBAAgB,CAACU,QAAjB,CAA0BH,SAA1B,CAAnB;;AAEA,MAAIE,YAAY,GAAG,CAAnB,EAAsB;AACpB,WAAO;AACLE,MAAAA,KAAK,EAAE,CAAC;AADH,KAAP;AAGD;;AAED,MAAIC,YAAY,GAAGH,YAAY,GAAGH,GAAlC;AACA,MAAIO,aAAa,GAAGb,gBAAgB,CAACc,YAAjB,CAA8BF,YAA9B,CAApB;AACA,MAAIG,aAAa,GAAGf,gBAAgB,CAACgB,YAAjB,CAA8BJ,YAA9B,CAApB;AACA,MAAIK,QAAQ,GAAGJ,aAAa,GAAG,CAA/B;;AAEA,MAAIE,aAAa,GAAG,CAApB,EAAuB;AACrBA,IAAAA,aAAa,GAAG,CAAhB;AACD;;AAED,MAAIG,YAAY,GAAG,CAAC,CAApB;;AAEA,MAAIZ,GAAG,GAAG,CAAV,EAAa;AACX,QAAIC,SAAS,IAAIQ,aAAa,GAAGE,QAAjC,EAA2C;AACzCC,MAAAA,YAAY,GAAGN,YAAf;AACD;AACF;;AAED,MAAIN,GAAG,GAAG,CAAV,EAAa;AACX,QAAIC,SAAS,GAAGQ,aAAa,GAAGE,QAAhB,GAA2BJ,aAA3C,EAA0D;AACxDK,MAAAA,YAAY,GAAGT,YAAY,KAAKJ,SAAjB,GAA6BA,SAA7B,GAAyCI,YAAY,GAAG,CAAvE;AACD,KAFD,MAEO;AACLS,MAAAA,YAAY,GAAGT,YAAf;AACD;AACF;;AAED,MAAIS,YAAY,KAAK,CAAC,CAAtB,EAAyB;AACvBA,IAAAA,YAAY,GAAGT,YAAf;AACD;;AAED,SAAO;AACLE,IAAAA,KAAK,EAAEO;AADF,GAAP;AAGD,CAjDD;;AAmDA,IAAIC,QAAQ,GAAGrB,eAAf;AACAH,OAAO,CAACE,OAAR,GAAkBsB,QAAlB","sourcesContent":["/**\n * Copyright © INOVUA TRADING.\n *\n * This source code is licensed under the Commercial License found in the\n * LICENSE file in the root directory of this source tree.\n */\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar getDropRowIndex = function getDropRowIndex(_ref) {\n  var rowHeightManager = _ref.rowHeightManager,\n      dragBoxInitialRegion = _ref.dragBoxInitialRegion,\n      dragBoxOffsets = _ref.dragBoxOffsets,\n      initialDiffTop = _ref.initialDiffTop,\n      scrollTop = _ref.scrollTop,\n      dragIndex = _ref.dragIndex,\n      dir = _ref.dir;\n  var rowOffset = dragBoxInitialRegion.top - dragBoxOffsets.top + initialDiffTop + scrollTop;\n  var currentIndex = rowHeightManager.getRowAt(rowOffset);\n\n  if (currentIndex < 0) {\n    return {\n      index: -1\n    };\n  }\n\n  var nextRowIndex = currentIndex + dir;\n  var nextRowHeight = rowHeightManager.getRowHeight(nextRowIndex);\n  var nextRowOffset = rowHeightManager.getRowOffset(nextRowIndex);\n  var halfSize = nextRowHeight / 2;\n\n  if (nextRowOffset < 0) {\n    nextRowOffset = 0;\n  }\n\n  var newDropIndex = -1;\n\n  if (dir > 0) {\n    if (rowOffset >= nextRowOffset - halfSize) {\n      newDropIndex = nextRowIndex;\n    }\n  }\n\n  if (dir < 0) {\n    if (rowOffset > nextRowOffset + halfSize + nextRowHeight) {\n      newDropIndex = currentIndex === dragIndex ? dragIndex : currentIndex + 1;\n    } else {\n      newDropIndex = currentIndex;\n    }\n  }\n\n  if (newDropIndex === -1) {\n    newDropIndex = currentIndex;\n  }\n\n  return {\n    index: newDropIndex\n  };\n};\n\nvar _default = getDropRowIndex;\nexports.default = _default;"]},"metadata":{},"sourceType":"script"}