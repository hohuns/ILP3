{"ast":null,"code":"/**\n * Copyright © INOVUA TRADING.\n *\n * This source code is licensed under the Commercial License found in the\n * LICENSE file in the root directory of this source tree.\n */\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar getRangesForGroups = function getRangesForGroups(_ref) {\n  var data = _ref.data,\n      initialOffset = _ref.initialOffset,\n      rowHeightManager = _ref.rowHeightManager,\n      initialScrollTop = _ref.initialScrollTop;\n  var keyPath;\n  var depth = 0;\n  var value = '';\n  var ranges = data.map(function (row, i) {\n    if (!row) {\n      return;\n    }\n\n    var rowHeight = rowHeightManager.getRowHeight(i);\n    var top = rowHeightManager.getRowOffset(i);\n    var offset = top + initialOffset - (initialScrollTop || 0);\n    var bottom = offset + rowHeight;\n\n    if (row.__group) {\n      keyPath = row.keyPath;\n      depth = row.depth;\n      value = row.value;\n    }\n\n    var result = {\n      group: row.__group || false,\n      keyPath: keyPath,\n      leaf: row.leaf || false,\n      value: value,\n      depth: depth,\n      top: offset,\n      bottom: bottom,\n      height: rowHeight,\n      index: i\n    };\n    return result;\n  });\n  return ranges;\n};\n\nvar _default = getRangesForGroups;\nexports.default = _default;","map":{"version":3,"sources":["/Users/sungjaejoo/Desktop/리액트/인터로거/ILP-main/node_modules/@inovua/reactdatagrid-enterprise/plugins/row-reorder/utils/getRangesForGroups.js"],"names":["Object","defineProperty","exports","value","default","getRangesForGroups","_ref","data","initialOffset","rowHeightManager","initialScrollTop","keyPath","depth","ranges","map","row","i","rowHeight","getRowHeight","top","getRowOffset","offset","bottom","__group","result","group","leaf","height","index","_default"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;;AAEA,IAAIC,kBAAkB,GAAG,SAASA,kBAAT,CAA4BC,IAA5B,EAAkC;AACzD,MAAIC,IAAI,GAAGD,IAAI,CAACC,IAAhB;AAAA,MACIC,aAAa,GAAGF,IAAI,CAACE,aADzB;AAAA,MAEIC,gBAAgB,GAAGH,IAAI,CAACG,gBAF5B;AAAA,MAGIC,gBAAgB,GAAGJ,IAAI,CAACI,gBAH5B;AAIA,MAAIC,OAAJ;AACA,MAAIC,KAAK,GAAG,CAAZ;AACA,MAAIT,KAAK,GAAG,EAAZ;AACA,MAAIU,MAAM,GAAGN,IAAI,CAACO,GAAL,CAAS,UAAUC,GAAV,EAAeC,CAAf,EAAkB;AACtC,QAAI,CAACD,GAAL,EAAU;AACR;AACD;;AAED,QAAIE,SAAS,GAAGR,gBAAgB,CAACS,YAAjB,CAA8BF,CAA9B,CAAhB;AACA,QAAIG,GAAG,GAAGV,gBAAgB,CAACW,YAAjB,CAA8BJ,CAA9B,CAAV;AACA,QAAIK,MAAM,GAAGF,GAAG,GAAGX,aAAN,IAAuBE,gBAAgB,IAAI,CAA3C,CAAb;AACA,QAAIY,MAAM,GAAGD,MAAM,GAAGJ,SAAtB;;AAEA,QAAIF,GAAG,CAACQ,OAAR,EAAiB;AACfZ,MAAAA,OAAO,GAAGI,GAAG,CAACJ,OAAd;AACAC,MAAAA,KAAK,GAAGG,GAAG,CAACH,KAAZ;AACAT,MAAAA,KAAK,GAAGY,GAAG,CAACZ,KAAZ;AACD;;AAED,QAAIqB,MAAM,GAAG;AACXC,MAAAA,KAAK,EAAEV,GAAG,CAACQ,OAAJ,IAAe,KADX;AAEXZ,MAAAA,OAAO,EAAEA,OAFE;AAGXe,MAAAA,IAAI,EAAEX,GAAG,CAACW,IAAJ,IAAY,KAHP;AAIXvB,MAAAA,KAAK,EAAEA,KAJI;AAKXS,MAAAA,KAAK,EAAEA,KALI;AAMXO,MAAAA,GAAG,EAAEE,MANM;AAOXC,MAAAA,MAAM,EAAEA,MAPG;AAQXK,MAAAA,MAAM,EAAEV,SARG;AASXW,MAAAA,KAAK,EAAEZ;AATI,KAAb;AAWA,WAAOQ,MAAP;AACD,GA5BY,CAAb;AA6BA,SAAOX,MAAP;AACD,CAtCD;;AAwCA,IAAIgB,QAAQ,GAAGxB,kBAAf;AACAH,OAAO,CAACE,OAAR,GAAkByB,QAAlB","sourcesContent":["/**\n * Copyright © INOVUA TRADING.\n *\n * This source code is licensed under the Commercial License found in the\n * LICENSE file in the root directory of this source tree.\n */\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar getRangesForGroups = function getRangesForGroups(_ref) {\n  var data = _ref.data,\n      initialOffset = _ref.initialOffset,\n      rowHeightManager = _ref.rowHeightManager,\n      initialScrollTop = _ref.initialScrollTop;\n  var keyPath;\n  var depth = 0;\n  var value = '';\n  var ranges = data.map(function (row, i) {\n    if (!row) {\n      return;\n    }\n\n    var rowHeight = rowHeightManager.getRowHeight(i);\n    var top = rowHeightManager.getRowOffset(i);\n    var offset = top + initialOffset - (initialScrollTop || 0);\n    var bottom = offset + rowHeight;\n\n    if (row.__group) {\n      keyPath = row.keyPath;\n      depth = row.depth;\n      value = row.value;\n    }\n\n    var result = {\n      group: row.__group || false,\n      keyPath: keyPath,\n      leaf: row.leaf || false,\n      value: value,\n      depth: depth,\n      top: offset,\n      bottom: bottom,\n      height: rowHeight,\n      index: i\n    };\n    return result;\n  });\n  return ranges;\n};\n\nvar _default = getRangesForGroups;\nexports.default = _default;"]},"metadata":{},"sourceType":"script"}