{"ast":null,"code":"/**\n * Copyright Â© INOVUA TRADING.\n *\n * This source code is licensed under the Commercial License found in the\n * LICENSE file in the root directory of this source tree.\n */\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _useProperty7 = _interopRequireDefault(require(\"@inovua/reactdatagrid-community/hooks/useProperty\"));\n\nvar _react = require(\"react\");\n\nvar _computeData = _interopRequireDefault(require(\"@inovua/reactdatagrid-community/hooks/useDataSource/computeData\"));\n\nvar _batchUpdate = _interopRequireDefault(require(\"@inovua/reactdatagrid-community/utils/batchUpdate\"));\n\nvar _isControlledValue = _interopRequireDefault(require(\"@inovua/reactdatagrid-community/utils/isControlledValue\"));\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      (0, _defineProperty2.default)(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nvar keepValidGroupBy = function keepValidGroupBy(groupBy, columnsMap) {\n  if (groupBy && groupBy.length) {\n    return groupBy.map(function (colId) {\n      if (!columnsMap) {\n        return undefined;\n      }\n\n      var col = columnsMap[colId];\n\n      if (!col) {\n        return undefined;\n      }\n\n      return col.id || col.name;\n    }).filter(function (x) {\n      return !!x;\n    });\n  }\n\n  return groupBy;\n};\n\nvar useGroupBy = function useGroupBy(props, computedProps, computedPropsRef) {\n  var _useProperty = (0, _useProperty7.default)(props, 'groupBy'),\n      _useProperty2 = (0, _slicedToArray2.default)(_useProperty, 2),\n      computedGroupBy = _useProperty2[0],\n      initialSetGroupBy = _useProperty2[1];\n\n  var _useState = (0, _react.useState)({\n    computedIndexesInGroups: {},\n    computedGroupArray: [],\n    computedGroupKeys: {}\n  }),\n      _useState2 = (0, _slicedToArray2.default)(_useState, 2),\n      computedGroupRelatedInfo = _useState2[0],\n      setComputedGroupRelatedInfo = _useState2[1];\n\n  var _useProperty3 = (0, _useProperty7.default)(props, 'collapsedGroups', undefined, {\n    onChange: function onChange() {}\n  }),\n      _useProperty4 = (0, _slicedToArray2.default)(_useProperty3, 2),\n      computedCollapsedGroups = _useProperty4[0],\n      setCollapsedGroups = _useProperty4[1];\n\n  var defaultExpandedGorups = computedProps && computedProps.defaultCollapsedGroups === true ? {} : true;\n\n  var _useProperty5 = (0, _useProperty7.default)(props, 'expandedGroups', defaultExpandedGorups, {\n    onChange: function onChange() {}\n  }),\n      _useProperty6 = (0, _slicedToArray2.default)(_useProperty5, 2),\n      computedExpandedGroups = _useProperty6[0],\n      setExpandedGroups = _useProperty6[1];\n\n  var setCollapsedAndExpanded = (0, _react.useCallback)(function (_ref) {\n    var collapsedGroups = _ref.collapsedGroups,\n        expandedGroups = _ref.expandedGroups;\n    var computedProps = computedPropsRef.current;\n\n    if (!computedProps) {\n      return;\n    }\n\n    var queue = (0, _batchUpdate.default)();\n    queue.commit(function () {\n      setCollapsedGroups(collapsedGroups);\n      setExpandedGroups(expandedGroups);\n    });\n\n    if (computedProps.onGroupCollapseChange) {\n      computedProps.onGroupCollapseChange(collapsedGroups, expandedGroups);\n    }\n  }, []);\n\n  var setGroupBy = function setGroupBy(groupBy) {\n    if (groupBy && typeof groupBy === 'string') {\n      groupBy = [groupBy];\n    }\n\n    var computedProps = computedPropsRef.current;\n\n    if (!computedProps) {\n      return;\n    }\n\n    groupBy = keepValidGroupBy(groupBy, computedProps.columnsMap);\n\n    if ((0, _isControlledValue.default)(props.groupBy)) {\n      initialSetGroupBy(groupBy);\n      return;\n    }\n\n    var queue = (0, _batchUpdate.default)();\n    var data = (0, _computeData.default)({\n      groupBy: groupBy\n    }, computedProps, queue);\n    queue.commit(function () {\n      if (data !== undefined) {\n        computedProps.silentSetData(data);\n      }\n\n      initialSetGroupBy(groupBy);\n    });\n  };\n\n  var isGroupCollapsed = function isGroupCollapsed(group) {\n    var computedProps = computedPropsRef.current;\n\n    if (!computedProps) {\n      return false;\n    }\n\n    var sep = computedProps.groupPathSeparator;\n    var path = \"\".concat((group.keyPath || group.valuePath).join(sep));\n    var collapsedGroups = computedProps.computedCollapsedGroups;\n\n    if (collapsedGroups === true) {\n      if (computedProps.computedExpandedGroups) {\n        return !computedProps.computedExpandedGroups[path];\n      }\n\n      return true;\n    }\n\n    return !!collapsedGroups[path];\n  };\n\n  var expandGroup = function expandGroup(group) {\n    var path = Array.isArray(group) ? group : typeof group == 'string' ? [group] : group.keyPath;\n\n    if (isGroupCollapsed({\n      keyPath: path\n    })) {\n      onGroupToggle(path);\n    }\n  };\n\n  var collapseGroup = function collapseGroup(group) {\n    var path = Array.isArray(group) ? group : typeof group == 'string' ? [group] : group.keyPath;\n\n    if (!isGroupCollapsed({\n      keyPath: path\n    })) {\n      onGroupToggle(path);\n    }\n  };\n\n  var onGroupToggle = function onGroupToggle(path) {\n    var computedProps = computedPropsRef.current;\n\n    if (!computedProps) {\n      return;\n    }\n\n    var sep = computedProps.groupPathSeparator,\n        computedCollapsedGroups = computedProps.computedCollapsedGroups;\n    var stringPath = path.join(sep);\n    var newCollapsedGroups = computedCollapsedGroups === true ? true : Object.assign({}, computedCollapsedGroups);\n    var newExpandedGroups = computedExpandedGroups === true ? true : Object.assign({}, computedExpandedGroups);\n\n    if (newExpandedGroups === true) {\n      if (newCollapsedGroups !== true) {\n        if (newCollapsedGroups[stringPath]) {\n          delete newCollapsedGroups[stringPath];\n        } else {\n          newCollapsedGroups[stringPath] = true;\n        }\n      }\n    } else {\n      if (newCollapsedGroups === true) {\n        if (newExpandedGroups[stringPath]) {\n          delete newExpandedGroups[stringPath];\n        } else {\n          newExpandedGroups[stringPath] = true;\n        }\n      }\n    }\n\n    setCollapsedAndExpanded({\n      collapsedGroups: newCollapsedGroups,\n      expandedGroups: newExpandedGroups\n    });\n  };\n\n  var toggleGroup = function toggleGroup(group) {\n    var computedProps = computedPropsRef.current;\n\n    if (!computedProps) {\n      return;\n    }\n\n    if (group && group.keyPath) {\n      if (computedProps.computedPivot && computedProps.computedGroupBy && group.depth === computedProps.computedGroupBy.length) {\n        return;\n      }\n\n      onGroupToggle(group.keyPath);\n    }\n  };\n\n  var addGroupByColumn = function addGroupByColumn(column) {\n    var computedProps = computedPropsRef.current;\n\n    if (!computedProps) {\n      return;\n    }\n\n    var computedColumn = computedProps.getColumnBy(column);\n\n    if (!computedColumn) {\n      return;\n    }\n\n    var groupBy = computedProps.computedGroupBy;\n\n    if (!Array.isArray(groupBy)) {\n      groupBy = [];\n    }\n\n    if (computedColumn.name && groupBy.indexOf(computedColumn.name) == -1) {\n      setGroupBy([].concat((0, _toConsumableArray2.default)(groupBy), [computedColumn.name]));\n    }\n  };\n\n  var removeGroupByColumn = function removeGroupByColumn(column) {\n    var computedProps = computedPropsRef.current;\n\n    if (!computedProps) {\n      return;\n    }\n\n    var computedColumn = computedProps.getColumnBy(column);\n    var groupBy = computedProps.computedGroupBy;\n\n    if (!Array.isArray(groupBy)) {\n      return;\n    }\n\n    if (groupBy.indexOf(computedColumn.id) != -1) {\n      setGroupBy(groupBy.filter(function (g) {\n        return g != computedColumn.id;\n      }));\n    }\n  };\n\n  var collapseAllGroups = function collapseAllGroups() {\n    setCollapsedAndExpanded({\n      collapsedGroups: true,\n      expandedGroups: {}\n    });\n  };\n\n  var expandAllGroups = function expandAllGroups() {\n    setCollapsedAndExpanded({\n      expandedGroups: true,\n      collapsedGroups: {}\n    });\n  };\n\n  return _objectSpread({\n    computedGroupBy: computedGroupBy,\n    onGroupToggle: onGroupToggle,\n    toggleGroup: toggleGroup,\n    setGroupBy: setGroupBy,\n    removeGroupByColumn: removeGroupByColumn,\n    addGroupByColumn: addGroupByColumn,\n    isGroupCollapsed: isGroupCollapsed,\n    expandGroup: expandGroup,\n    collapseGroup: collapseGroup,\n    computedCollapsedGroups: computedCollapsedGroups,\n    computedExpandedGroups: computedExpandedGroups,\n    onGroupByChange: setGroupBy,\n    setComputedGroupRelatedInfo: setComputedGroupRelatedInfo,\n    collapseAllGroups: collapseAllGroups,\n    expandAllGroups: expandAllGroups\n  }, computedGroupRelatedInfo);\n};\n\nvar _default = useGroupBy;\nexports.default = _default;","map":{"version":3,"sources":["/Users/sungjaejoo/Desktop/ááµáá¢á¨áá³/ááµá«áá¥áá©áá¥/ILP-main/node_modules/@inovua/reactdatagrid-enterprise/plugins/group-and-pivot/useGroupBy.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","default","_defineProperty2","_toConsumableArray2","_slicedToArray2","_useProperty7","_react","_computeData","_batchUpdate","_isControlledValue","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","getOwnPropertyDescriptors","defineProperties","keepValidGroupBy","groupBy","columnsMap","map","colId","undefined","col","id","name","x","useGroupBy","props","computedProps","computedPropsRef","_useProperty","_useProperty2","computedGroupBy","initialSetGroupBy","_useState","useState","computedIndexesInGroups","computedGroupArray","computedGroupKeys","_useState2","computedGroupRelatedInfo","setComputedGroupRelatedInfo","_useProperty3","onChange","_useProperty4","computedCollapsedGroups","setCollapsedGroups","defaultExpandedGorups","defaultCollapsedGroups","_useProperty5","_useProperty6","computedExpandedGroups","setExpandedGroups","setCollapsedAndExpanded","useCallback","_ref","collapsedGroups","expandedGroups","current","queue","commit","onGroupCollapseChange","setGroupBy","data","silentSetData","isGroupCollapsed","group","sep","groupPathSeparator","path","concat","keyPath","valuePath","join","expandGroup","Array","isArray","onGroupToggle","collapseGroup","stringPath","newCollapsedGroups","assign","newExpandedGroups","toggleGroup","computedPivot","depth","addGroupByColumn","column","computedColumn","getColumnBy","indexOf","removeGroupByColumn","g","collapseAllGroups","expandAllGroups","onGroupByChange","_default"],"mappings":"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","sourcesContent":["/**\n * Copyright Â© INOVUA TRADING.\n *\n * This source code is licensed under the Commercial License found in the\n * LICENSE file in the root directory of this source tree.\n */\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _useProperty7 = _interopRequireDefault(require(\"@inovua/reactdatagrid-community/hooks/useProperty\"));\n\nvar _react = require(\"react\");\n\nvar _computeData = _interopRequireDefault(require(\"@inovua/reactdatagrid-community/hooks/useDataSource/computeData\"));\n\nvar _batchUpdate = _interopRequireDefault(require(\"@inovua/reactdatagrid-community/utils/batchUpdate\"));\n\nvar _isControlledValue = _interopRequireDefault(require(\"@inovua/reactdatagrid-community/utils/isControlledValue\"));\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nvar keepValidGroupBy = function keepValidGroupBy(groupBy, columnsMap) {\n  if (groupBy && groupBy.length) {\n    return groupBy.map(function (colId) {\n      if (!columnsMap) {\n        return undefined;\n      }\n\n      var col = columnsMap[colId];\n\n      if (!col) {\n        return undefined;\n      }\n\n      return col.id || col.name;\n    }).filter(function (x) {\n      return !!x;\n    });\n  }\n\n  return groupBy;\n};\n\nvar useGroupBy = function useGroupBy(props, computedProps, computedPropsRef) {\n  var _useProperty = (0, _useProperty7.default)(props, 'groupBy'),\n      _useProperty2 = (0, _slicedToArray2.default)(_useProperty, 2),\n      computedGroupBy = _useProperty2[0],\n      initialSetGroupBy = _useProperty2[1];\n\n  var _useState = (0, _react.useState)({\n    computedIndexesInGroups: {},\n    computedGroupArray: [],\n    computedGroupKeys: {}\n  }),\n      _useState2 = (0, _slicedToArray2.default)(_useState, 2),\n      computedGroupRelatedInfo = _useState2[0],\n      setComputedGroupRelatedInfo = _useState2[1];\n\n  var _useProperty3 = (0, _useProperty7.default)(props, 'collapsedGroups', undefined, {\n    onChange: function onChange() {}\n  }),\n      _useProperty4 = (0, _slicedToArray2.default)(_useProperty3, 2),\n      computedCollapsedGroups = _useProperty4[0],\n      setCollapsedGroups = _useProperty4[1];\n\n  var defaultExpandedGorups = computedProps && computedProps.defaultCollapsedGroups === true ? {} : true;\n\n  var _useProperty5 = (0, _useProperty7.default)(props, 'expandedGroups', defaultExpandedGorups, {\n    onChange: function onChange() {}\n  }),\n      _useProperty6 = (0, _slicedToArray2.default)(_useProperty5, 2),\n      computedExpandedGroups = _useProperty6[0],\n      setExpandedGroups = _useProperty6[1];\n\n  var setCollapsedAndExpanded = (0, _react.useCallback)(function (_ref) {\n    var collapsedGroups = _ref.collapsedGroups,\n        expandedGroups = _ref.expandedGroups;\n    var computedProps = computedPropsRef.current;\n\n    if (!computedProps) {\n      return;\n    }\n\n    var queue = (0, _batchUpdate.default)();\n    queue.commit(function () {\n      setCollapsedGroups(collapsedGroups);\n      setExpandedGroups(expandedGroups);\n    });\n\n    if (computedProps.onGroupCollapseChange) {\n      computedProps.onGroupCollapseChange(collapsedGroups, expandedGroups);\n    }\n  }, []);\n\n  var setGroupBy = function setGroupBy(groupBy) {\n    if (groupBy && typeof groupBy === 'string') {\n      groupBy = [groupBy];\n    }\n\n    var computedProps = computedPropsRef.current;\n\n    if (!computedProps) {\n      return;\n    }\n\n    groupBy = keepValidGroupBy(groupBy, computedProps.columnsMap);\n\n    if ((0, _isControlledValue.default)(props.groupBy)) {\n      initialSetGroupBy(groupBy);\n      return;\n    }\n\n    var queue = (0, _batchUpdate.default)();\n    var data = (0, _computeData.default)({\n      groupBy: groupBy\n    }, computedProps, queue);\n    queue.commit(function () {\n      if (data !== undefined) {\n        computedProps.silentSetData(data);\n      }\n\n      initialSetGroupBy(groupBy);\n    });\n  };\n\n  var isGroupCollapsed = function isGroupCollapsed(group) {\n    var computedProps = computedPropsRef.current;\n\n    if (!computedProps) {\n      return false;\n    }\n\n    var sep = computedProps.groupPathSeparator;\n    var path = \"\".concat((group.keyPath || group.valuePath).join(sep));\n    var collapsedGroups = computedProps.computedCollapsedGroups;\n\n    if (collapsedGroups === true) {\n      if (computedProps.computedExpandedGroups) {\n        return !computedProps.computedExpandedGroups[path];\n      }\n\n      return true;\n    }\n\n    return !!collapsedGroups[path];\n  };\n\n  var expandGroup = function expandGroup(group) {\n    var path = Array.isArray(group) ? group : typeof group == 'string' ? [group] : group.keyPath;\n\n    if (isGroupCollapsed({\n      keyPath: path\n    })) {\n      onGroupToggle(path);\n    }\n  };\n\n  var collapseGroup = function collapseGroup(group) {\n    var path = Array.isArray(group) ? group : typeof group == 'string' ? [group] : group.keyPath;\n\n    if (!isGroupCollapsed({\n      keyPath: path\n    })) {\n      onGroupToggle(path);\n    }\n  };\n\n  var onGroupToggle = function onGroupToggle(path) {\n    var computedProps = computedPropsRef.current;\n\n    if (!computedProps) {\n      return;\n    }\n\n    var sep = computedProps.groupPathSeparator,\n        computedCollapsedGroups = computedProps.computedCollapsedGroups;\n    var stringPath = path.join(sep);\n    var newCollapsedGroups = computedCollapsedGroups === true ? true : Object.assign({}, computedCollapsedGroups);\n    var newExpandedGroups = computedExpandedGroups === true ? true : Object.assign({}, computedExpandedGroups);\n\n    if (newExpandedGroups === true) {\n      if (newCollapsedGroups !== true) {\n        if (newCollapsedGroups[stringPath]) {\n          delete newCollapsedGroups[stringPath];\n        } else {\n          newCollapsedGroups[stringPath] = true;\n        }\n      }\n    } else {\n      if (newCollapsedGroups === true) {\n        if (newExpandedGroups[stringPath]) {\n          delete newExpandedGroups[stringPath];\n        } else {\n          newExpandedGroups[stringPath] = true;\n        }\n      }\n    }\n\n    setCollapsedAndExpanded({\n      collapsedGroups: newCollapsedGroups,\n      expandedGroups: newExpandedGroups\n    });\n  };\n\n  var toggleGroup = function toggleGroup(group) {\n    var computedProps = computedPropsRef.current;\n\n    if (!computedProps) {\n      return;\n    }\n\n    if (group && group.keyPath) {\n      if (computedProps.computedPivot && computedProps.computedGroupBy && group.depth === computedProps.computedGroupBy.length) {\n        return;\n      }\n\n      onGroupToggle(group.keyPath);\n    }\n  };\n\n  var addGroupByColumn = function addGroupByColumn(column) {\n    var computedProps = computedPropsRef.current;\n\n    if (!computedProps) {\n      return;\n    }\n\n    var computedColumn = computedProps.getColumnBy(column);\n\n    if (!computedColumn) {\n      return;\n    }\n\n    var groupBy = computedProps.computedGroupBy;\n\n    if (!Array.isArray(groupBy)) {\n      groupBy = [];\n    }\n\n    if (computedColumn.name && groupBy.indexOf(computedColumn.name) == -1) {\n      setGroupBy([].concat((0, _toConsumableArray2.default)(groupBy), [computedColumn.name]));\n    }\n  };\n\n  var removeGroupByColumn = function removeGroupByColumn(column) {\n    var computedProps = computedPropsRef.current;\n\n    if (!computedProps) {\n      return;\n    }\n\n    var computedColumn = computedProps.getColumnBy(column);\n    var groupBy = computedProps.computedGroupBy;\n\n    if (!Array.isArray(groupBy)) {\n      return;\n    }\n\n    if (groupBy.indexOf(computedColumn.id) != -1) {\n      setGroupBy(groupBy.filter(function (g) {\n        return g != computedColumn.id;\n      }));\n    }\n  };\n\n  var collapseAllGroups = function collapseAllGroups() {\n    setCollapsedAndExpanded({\n      collapsedGroups: true,\n      expandedGroups: {}\n    });\n  };\n\n  var expandAllGroups = function expandAllGroups() {\n    setCollapsedAndExpanded({\n      expandedGroups: true,\n      collapsedGroups: {}\n    });\n  };\n\n  return _objectSpread({\n    computedGroupBy: computedGroupBy,\n    onGroupToggle: onGroupToggle,\n    toggleGroup: toggleGroup,\n    setGroupBy: setGroupBy,\n    removeGroupByColumn: removeGroupByColumn,\n    addGroupByColumn: addGroupByColumn,\n    isGroupCollapsed: isGroupCollapsed,\n    expandGroup: expandGroup,\n    collapseGroup: collapseGroup,\n    computedCollapsedGroups: computedCollapsedGroups,\n    computedExpandedGroups: computedExpandedGroups,\n    onGroupByChange: setGroupBy,\n    setComputedGroupRelatedInfo: setComputedGroupRelatedInfo,\n    collapseAllGroups: collapseAllGroups,\n    expandAllGroups: expandAllGroups\n  }, computedGroupRelatedInfo);\n};\n\nvar _default = useGroupBy;\nexports.default = _default;"]},"metadata":{},"sourceType":"script"}