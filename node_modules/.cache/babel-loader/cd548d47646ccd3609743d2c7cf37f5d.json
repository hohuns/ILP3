{"ast":null,"code":"/** \n * Copyright Â© INOVUA TRADING.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _getScrollbarWidth = _interopRequireDefault(require(\"../packages/getScrollbarWidth\"));\n\nvar _defaultCheckColumnId = require(\"../normalizeColumns/defaultCheckColumnId\");\n\nvar _defaultRowReorderColumnId = require(\"../normalizeColumns/defaultRowReorderColumnId\");\n\nvar _defaultRowIndexColumnId = require(\"../normalizeColumns/defaultRowIndexColumnId\");\n\nvar _defaultRowExpandColumnId = require(\"../normalizeColumns/defaultRowExpandColumnId\");\n\nvar EMPTY_OBJECT = {};\n\nvar removeItemFromArray = function removeItemFromArray(array, obj) {\n  var index = array.indexOf(obj);\n\n  if (index >= 0) {\n    array.splice(index, 1);\n  }\n};\n\nvar getColumnsWidths = function getColumnsWidths(columns) {\n  return columns.reduce(function (width, column) {\n    return width + column.computedWidth;\n  }, 0);\n};\n\nvar checkForSpecialColumns = function checkForSpecialColumns(id) {\n  var specialColumns = [_defaultCheckColumnId.id, _defaultRowReorderColumnId.id, _defaultRowIndexColumnId.id, _defaultRowExpandColumnId.id];\n\n  if (specialColumns.indexOf(id) === -1) {\n    return false;\n  }\n\n  return true;\n};\n\nvar useColumnsSizing = function useColumnsSizing(_props, _computedProps, computedPropsRef) {\n  var computeColumnSizesToFit = function computeColumnSizesToFit(gridWidth) {\n    var computedProps = computedPropsRef.current;\n\n    if (!computedProps) {\n      return;\n    }\n\n    var visibleColumns = computedProps.visibleColumns;\n\n    if (gridWidth <= 0 || !visibleColumns.length) {\n      return;\n    }\n\n    var columnsToSize = [];\n    var columnsNotToSize = [];\n    visibleColumns.forEach(function (column) {\n      if (column.resizable === false) {\n        columnsNotToSize.push(column);\n      } else {\n        columnsToSize.push(column);\n      }\n    });\n    var columnsToResize = columnsToSize.slice(0);\n    var finished = false;\n\n    var updateColumnsNotToSize = function updateColumnsNotToSize(column) {\n      removeItemFromArray(columnsToResize, column);\n      columnsNotToSize.push(column);\n    };\n\n    var newColumnSizes = {};\n\n    while (!finished) {\n      finished = true;\n      var availableSpace = gridWidth - getColumnsWidths(columnsNotToSize);\n      var scale = availableSpace / getColumnsWidths(columnsToResize);\n      var spaceForLastColumn = availableSpace;\n\n      for (var i = columnsToResize.length - 1; i >= 0; i--) {\n        var column = columnsToResize[i];\n        var minWidth = column.computedMinWidth;\n        var maxWidth = column.computedMaxWidth;\n        var newWidth = Math.round(column.computedWidth * scale);\n\n        if (minWidth && newWidth < minWidth) {\n          newWidth = minWidth;\n          updateColumnsNotToSize(column);\n          finished = false;\n        } else if (maxWidth && newWidth > maxWidth) {\n          newWidth = maxWidth;\n          updateColumnsNotToSize(column);\n          finished = false;\n        } else if (i === 0) {\n          newWidth = spaceForLastColumn;\n        }\n\n        var columnId = column.id;\n        Object.assign(newColumnSizes, (0, _defineProperty2.default)({}, columnId, newWidth));\n        spaceForLastColumn -= newWidth;\n      }\n    }\n\n    if (computedProps.virtualizeColumns) {\n      var bodyRef = computedProps.bodyRef.current;\n      var columnLayout = bodyRef.columnLayout;\n      var headerLayout = columnLayout.headerLayout;\n      var header = headerLayout.header;\n      setTimeout(function () {\n        header.updateColumns();\n      }, 10);\n    }\n\n    var newReservedViewportWidth = computedProps.reservedViewportWidth;\n    var columnFlexes = computedProps.columnFlexes;\n    computedProps.computeColumnSizes(newColumnSizes || {}, columnFlexes || {}, newReservedViewportWidth, {\n      getColumnBy: computedProps.getColumnBy,\n      onColumnResize: computedProps.initialProps.onColumnResize,\n      onBatchColumnResize: computedProps.initialProps.onBatchColumnResize,\n      columnSizes: computedProps.columnSizes,\n      setColumnSizes: computedProps.setColumnSizes,\n      setColumnFlexes: computedProps.setColumnFlexes\n    });\n  };\n\n  var checkForAvaibleWidth = function checkForAvaibleWidth() {\n    var computedProps = computedPropsRef.current;\n\n    if (!computedProps) {\n      return;\n    }\n\n    var scrollbars = computedProps.scrollbars;\n    var hasVerticalScrollbar = scrollbars.vertical;\n    var scrollbarWidth = hasVerticalScrollbar ? (0, _getScrollbarWidth.default)() : 0;\n    var computedAvailableWidth = computedProps.availableWidth || 0;\n    var availableWidth = computedAvailableWidth - scrollbarWidth;\n\n    if (availableWidth > 0) {\n      computeColumnSizesToFit(availableWidth);\n    }\n  };\n\n  var computeColumnSizesAuto = function computeColumnSizesAuto(columns, callback) {\n    var computedProps = computedPropsRef.current;\n\n    if (!computedProps) {\n      return;\n    }\n\n    if (!columns.length) {\n      return;\n    }\n\n    columns.forEach(function (column) {\n      if (column.resizable === false || checkForSpecialColumns(column.id)) {} else {\n        callback(column);\n      }\n    });\n  };\n\n  var getCellForColumn = function getCellForColumn(column, row) {\n    var computedProps = computedPropsRef.current;\n\n    if (!computedProps) {\n      return;\n    }\n\n    var result;\n    var columnId = column.id;\n    var cells = row.getCells();\n\n    if (!cells.length) {\n      return;\n    }\n\n    cells.forEach(function (cell) {\n      var cellProps = cell.props;\n      var cellId = cellProps.id;\n\n      if (columnId === cellId) {\n        result = cell.domRef.current;\n      }\n    });\n    return result;\n  };\n\n  var getCellsForColumn = function getCellsForColumn(column) {\n    var computedProps = computedPropsRef.current;\n\n    if (!computedProps) {\n      return;\n    }\n\n    var result = [];\n\n    if (computedProps.getRows) {\n      computedProps.getRows().forEach(function (rowInstance) {\n        var row = rowInstance.row;\n        var cell = getCellForColumn(column, row);\n        result.push(cell);\n      });\n    }\n\n    return result;\n  };\n\n  var cloneIntoDummyContainer = function cloneIntoDummyContainer(cell, dummyContainer) {\n    var cellClone = cell && cell.cloneNode(true);\n\n    if (!cellClone) {\n      return;\n    }\n\n    cellClone.style.width = '';\n    cellClone.style.minWidth = '';\n    cellClone.style.maxWidth = '';\n    cellClone.style.position = 'static';\n    cellClone.style.left = '';\n    var rowClassName = 'InovuaReactDataGrid__row';\n    var headerClassName = 'InovuaReactDataGrid__header';\n    var headerCellClassName = 'InovuaReactDataGrid__column-header';\n    var isHeader = cellClone.classList.contains(headerCellClassName);\n    var cellContent;\n    cellContent = (0, _toConsumableArray2.default)(cellClone.children).find(function (cell) {\n      var className = isHeader ? 'InovuaReactDataGrid__column-header__content' : 'InovuaReactDataGrid__cell__content';\n      return cell.classList.contains(className);\n    });\n\n    if (cellContent) {\n      cellContent.style.width = 'fit-content';\n    } else {\n      cellClone.style.width = 'fit-content';\n    }\n\n    var cloneRow = document.createElement('div');\n    var cloneRowClassList = cloneRow.classList;\n\n    if (isHeader) {\n      cloneRowClassList.add(headerClassName);\n      cloneRow.style.position = 'static';\n    } else {\n      cloneRowClassList.add(rowClassName);\n    }\n\n    var rowElement = cell.parentElement;\n\n    while (rowElement) {\n      var isRow = [rowClassName, headerClassName].some(function (cls) {\n        return rowElement.classList.contains(cls);\n      });\n\n      if (isRow) {\n        for (var i = 0; i < rowElement.classList.length; i++) {\n          var item = rowElement.classList[i];\n          cloneRowClassList.add(item);\n        }\n\n        break;\n      }\n\n      rowElement = rowElement.parentElement;\n    }\n\n    cloneRow.appendChild(cellClone);\n    dummyContainer.appendChild(cloneRow);\n  };\n\n  var computeOptimizedWidth = function computeOptimizedWidth(column, skipHeader) {\n    var computedProps = computedPropsRef.current;\n\n    if (!computedProps) {\n      return -1;\n    }\n\n    var cells = getCellsForColumn(column);\n\n    if (!cells || !cells.length) {\n      return -1;\n    }\n\n    if (!skipHeader) {\n      var headerCell;\n      var header = computedProps.getHeader();\n      var headerCells = header.getCells();\n      headerCells.find(function (cell) {\n        var cellProps = cell.props;\n\n        if (cellProps.id === column.id) {\n          headerCell = cell.getDOMNode();\n        }\n      });\n\n      if (headerCell && headerCell.classList.contains('InovuaReactDataGrid__column-header__resize-wrapper')) {\n        headerCell = (0, _toConsumableArray2.default)(headerCell.children).find(function (cell) {\n          return cell.classList.contains('InovuaReactDataGrid__column-header');\n        });\n      }\n\n      cells.push(headerCell);\n    }\n\n    return addCellsToContainer(cells, skipHeader);\n  };\n\n  var addCellsToContainer = function addCellsToContainer(cells, skipHeader) {\n    var computedProps = computedPropsRef.current;\n\n    if (!computedProps) {\n      return -1;\n    }\n\n    var dummyContainer = document.createElement('span');\n    dummyContainer.style.position = 'fixed';\n    var vl = computedProps.getVirtualList();\n    var container = vl.getContainerNode();\n    container.appendChild(dummyContainer);\n    cells.forEach(function (cell) {\n      return cloneIntoDummyContainer(cell, dummyContainer);\n    });\n    var dummyContainerWidth = dummyContainer.offsetWidth;\n\n    if (!skipHeader) {\n      dummyContainerWidth += 3;\n    } else {\n      dummyContainerWidth += 1;\n    }\n\n    container.removeChild(dummyContainer);\n    return dummyContainerWidth;\n  };\n\n  var normaliseWidth = function normaliseWidth(column, width) {\n    var minWidth = column.minWidth;\n    var maxWidth = column.maxWidth;\n\n    if (minWidth && width < minWidth) {\n      width = minWidth;\n    }\n\n    if (maxWidth && width > maxWidth) {\n      width = maxWidth;\n    }\n\n    return width;\n  };\n\n  var setColumnSizesToFit = function setColumnSizesToFit() {\n    var computedProps = computedPropsRef.current;\n\n    if (!computedProps) {\n      return;\n    }\n\n    var enableColumnAutosize = computedProps.enableColumnAutosize;\n\n    if (!enableColumnAutosize) {\n      showWarning('setColumnSizesToFit');\n      return;\n    }\n\n    checkForAvaibleWidth();\n  };\n\n  var setColumnsSizesAuto = function setColumnsSizesAuto() {\n    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : EMPTY_OBJECT,\n        columnIds = _ref.columnIds,\n        skipHeader = _ref.skipHeader;\n\n    var computedProps = computedPropsRef.current;\n\n    if (!computedProps) {\n      return;\n    }\n\n    var enableColumnAutosize = computedProps.enableColumnAutosize;\n\n    if (!enableColumnAutosize) {\n      showWarning('setColumnsSizesAuto');\n      return;\n    }\n\n    var shouldSkipHeader = skipHeader != null ? skipHeader : computedProps.skipHeaderOnAutoSize;\n    var allIds = [];\n    var columns = [];\n\n    if (columnIds !== undefined) {\n      if (Array.isArray(columnIds)) {\n        allIds = columnIds;\n      }\n    }\n\n    for (var i = 0; i < allIds.length; i++) {\n      var id = allIds[i];\n      var column = computedProps.getColumnBy(id);\n      columns.push(column);\n    }\n\n    if (columns && columns.length === 0) {\n      columns = computedProps.visibleColumns;\n    }\n\n    if (!columns || columns.length === 0) {\n      return;\n    }\n\n    var columnsToSize = [];\n    var counter = -1;\n    var newColumnSizes = {};\n\n    while (counter !== 0) {\n      counter = 0;\n      computeColumnSizesAuto(columns, function (column) {\n        if (columnsToSize.indexOf(column) >= 0) {\n          return false;\n        }\n\n        var optimizedWidth = computeOptimizedWidth(column, shouldSkipHeader);\n\n        if (optimizedWidth > 0) {\n          var newWidth = normaliseWidth(column, optimizedWidth);\n          var columnId = column.id;\n          columnsToSize.push(column);\n          Object.assign(newColumnSizes, (0, _defineProperty2.default)({}, columnId, newWidth));\n          counter++;\n        }\n\n        return true;\n      });\n    }\n\n    if (computedProps.virtualizeColumns) {\n      var bodyRef = computedProps.bodyRef.current;\n      var columnLayout = bodyRef.columnLayout;\n      var headerLayout = columnLayout.headerLayout;\n      var header = headerLayout.header;\n      setTimeout(function () {\n        header.updateColumns();\n      }, 10);\n    }\n\n    var newReservedViewportWidth = computedProps.reservedViewportWidth;\n    var columnFlexes = computedProps.columnFlexes;\n    computedProps.computeColumnSizes(newColumnSizes || {}, columnFlexes || {}, newReservedViewportWidth, {\n      getColumnBy: computedProps.getColumnBy,\n      onColumnResize: computedProps.initialProps.onColumnResize,\n      onBatchColumnResize: computedProps.initialProps.onBatchColumnResize,\n      columnSizes: computedProps.columnSizes,\n      setColumnSizes: computedProps.setColumnSizes,\n      setColumnFlexes: computedProps.setColumnFlexes\n    });\n  };\n\n  var setColumnSizeAuto = function setColumnSizeAuto(id, skipHeader) {\n    var computedProps = computedPropsRef.current;\n\n    if (!computedProps) {\n      return;\n    }\n\n    var enableColumnAutosize = computedProps.enableColumnAutosize;\n\n    if (!enableColumnAutosize) {\n      showWarning('setColumnSizeAuto');\n      return;\n    }\n\n    if (id) {\n      setColumnsSizesAuto({\n        columnIds: [id],\n        skipHeader: skipHeader\n      });\n    }\n\n    return;\n  };\n\n  var showWarning = function showWarning(method) {\n    return console.error(\"In order for \".concat(method, \" to work, the 'enableColumnAutosize' prop should be 'true'.\"));\n  };\n\n  return {\n    setColumnSizesToFit: setColumnSizesToFit,\n    setColumnsSizesAuto: setColumnsSizesAuto,\n    setColumnSizeAuto: setColumnSizeAuto\n  };\n};\n\nvar _default = useColumnsSizing;\nexports.default = _default;","map":{"version":3,"sources":["/Users/sungjaejoo/Desktop/ILP-main/node_modules/@inovua/reactdatagrid-community/hooks/useColumnsSizing.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","default","_toConsumableArray2","_defineProperty2","_getScrollbarWidth","_defaultCheckColumnId","_defaultRowReorderColumnId","_defaultRowIndexColumnId","_defaultRowExpandColumnId","EMPTY_OBJECT","removeItemFromArray","array","obj","index","indexOf","splice","getColumnsWidths","columns","reduce","width","column","computedWidth","checkForSpecialColumns","id","specialColumns","useColumnsSizing","_props","_computedProps","computedPropsRef","computeColumnSizesToFit","gridWidth","computedProps","current","visibleColumns","length","columnsToSize","columnsNotToSize","forEach","resizable","push","columnsToResize","slice","finished","updateColumnsNotToSize","newColumnSizes","availableSpace","scale","spaceForLastColumn","i","minWidth","computedMinWidth","maxWidth","computedMaxWidth","newWidth","Math","round","columnId","assign","virtualizeColumns","bodyRef","columnLayout","headerLayout","header","setTimeout","updateColumns","newReservedViewportWidth","reservedViewportWidth","columnFlexes","computeColumnSizes","getColumnBy","onColumnResize","initialProps","onBatchColumnResize","columnSizes","setColumnSizes","setColumnFlexes","checkForAvaibleWidth","scrollbars","hasVerticalScrollbar","vertical","scrollbarWidth","computedAvailableWidth","availableWidth","computeColumnSizesAuto","callback","getCellForColumn","row","result","cells","getCells","cell","cellProps","props","cellId","domRef","getCellsForColumn","getRows","rowInstance","cloneIntoDummyContainer","dummyContainer","cellClone","cloneNode","style","position","left","rowClassName","headerClassName","headerCellClassName","isHeader","classList","contains","cellContent","children","find","className","cloneRow","document","createElement","cloneRowClassList","add","rowElement","parentElement","isRow","some","cls","item","appendChild","computeOptimizedWidth","skipHeader","headerCell","getHeader","headerCells","getDOMNode","addCellsToContainer","vl","getVirtualList","container","getContainerNode","dummyContainerWidth","offsetWidth","removeChild","normaliseWidth","setColumnSizesToFit","enableColumnAutosize","showWarning","setColumnsSizesAuto","_ref","arguments","undefined","columnIds","shouldSkipHeader","skipHeaderOnAutoSize","allIds","Array","isArray","counter","optimizedWidth","setColumnSizeAuto","method","console","error","concat","_default"],"mappings":"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","sourcesContent":["/** \n * Copyright Â© INOVUA TRADING.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _getScrollbarWidth = _interopRequireDefault(require(\"../packages/getScrollbarWidth\"));\n\nvar _defaultCheckColumnId = require(\"../normalizeColumns/defaultCheckColumnId\");\n\nvar _defaultRowReorderColumnId = require(\"../normalizeColumns/defaultRowReorderColumnId\");\n\nvar _defaultRowIndexColumnId = require(\"../normalizeColumns/defaultRowIndexColumnId\");\n\nvar _defaultRowExpandColumnId = require(\"../normalizeColumns/defaultRowExpandColumnId\");\n\nvar EMPTY_OBJECT = {};\n\nvar removeItemFromArray = function removeItemFromArray(array, obj) {\n  var index = array.indexOf(obj);\n\n  if (index >= 0) {\n    array.splice(index, 1);\n  }\n};\n\nvar getColumnsWidths = function getColumnsWidths(columns) {\n  return columns.reduce(function (width, column) {\n    return width + column.computedWidth;\n  }, 0);\n};\n\nvar checkForSpecialColumns = function checkForSpecialColumns(id) {\n  var specialColumns = [_defaultCheckColumnId.id, _defaultRowReorderColumnId.id, _defaultRowIndexColumnId.id, _defaultRowExpandColumnId.id];\n\n  if (specialColumns.indexOf(id) === -1) {\n    return false;\n  }\n\n  return true;\n};\n\nvar useColumnsSizing = function useColumnsSizing(_props, _computedProps, computedPropsRef) {\n  var computeColumnSizesToFit = function computeColumnSizesToFit(gridWidth) {\n    var computedProps = computedPropsRef.current;\n\n    if (!computedProps) {\n      return;\n    }\n\n    var visibleColumns = computedProps.visibleColumns;\n\n    if (gridWidth <= 0 || !visibleColumns.length) {\n      return;\n    }\n\n    var columnsToSize = [];\n    var columnsNotToSize = [];\n    visibleColumns.forEach(function (column) {\n      if (column.resizable === false) {\n        columnsNotToSize.push(column);\n      } else {\n        columnsToSize.push(column);\n      }\n    });\n    var columnsToResize = columnsToSize.slice(0);\n    var finished = false;\n\n    var updateColumnsNotToSize = function updateColumnsNotToSize(column) {\n      removeItemFromArray(columnsToResize, column);\n      columnsNotToSize.push(column);\n    };\n\n    var newColumnSizes = {};\n\n    while (!finished) {\n      finished = true;\n      var availableSpace = gridWidth - getColumnsWidths(columnsNotToSize);\n      var scale = availableSpace / getColumnsWidths(columnsToResize);\n      var spaceForLastColumn = availableSpace;\n\n      for (var i = columnsToResize.length - 1; i >= 0; i--) {\n        var column = columnsToResize[i];\n        var minWidth = column.computedMinWidth;\n        var maxWidth = column.computedMaxWidth;\n        var newWidth = Math.round(column.computedWidth * scale);\n\n        if (minWidth && newWidth < minWidth) {\n          newWidth = minWidth;\n          updateColumnsNotToSize(column);\n          finished = false;\n        } else if (maxWidth && newWidth > maxWidth) {\n          newWidth = maxWidth;\n          updateColumnsNotToSize(column);\n          finished = false;\n        } else if (i === 0) {\n          newWidth = spaceForLastColumn;\n        }\n\n        var columnId = column.id;\n        Object.assign(newColumnSizes, (0, _defineProperty2.default)({}, columnId, newWidth));\n        spaceForLastColumn -= newWidth;\n      }\n    }\n\n    if (computedProps.virtualizeColumns) {\n      var bodyRef = computedProps.bodyRef.current;\n      var columnLayout = bodyRef.columnLayout;\n      var headerLayout = columnLayout.headerLayout;\n      var header = headerLayout.header;\n      setTimeout(function () {\n        header.updateColumns();\n      }, 10);\n    }\n\n    var newReservedViewportWidth = computedProps.reservedViewportWidth;\n    var columnFlexes = computedProps.columnFlexes;\n    computedProps.computeColumnSizes(newColumnSizes || {}, columnFlexes || {}, newReservedViewportWidth, {\n      getColumnBy: computedProps.getColumnBy,\n      onColumnResize: computedProps.initialProps.onColumnResize,\n      onBatchColumnResize: computedProps.initialProps.onBatchColumnResize,\n      columnSizes: computedProps.columnSizes,\n      setColumnSizes: computedProps.setColumnSizes,\n      setColumnFlexes: computedProps.setColumnFlexes\n    });\n  };\n\n  var checkForAvaibleWidth = function checkForAvaibleWidth() {\n    var computedProps = computedPropsRef.current;\n\n    if (!computedProps) {\n      return;\n    }\n\n    var scrollbars = computedProps.scrollbars;\n    var hasVerticalScrollbar = scrollbars.vertical;\n    var scrollbarWidth = hasVerticalScrollbar ? (0, _getScrollbarWidth.default)() : 0;\n    var computedAvailableWidth = computedProps.availableWidth || 0;\n    var availableWidth = computedAvailableWidth - scrollbarWidth;\n\n    if (availableWidth > 0) {\n      computeColumnSizesToFit(availableWidth);\n    }\n  };\n\n  var computeColumnSizesAuto = function computeColumnSizesAuto(columns, callback) {\n    var computedProps = computedPropsRef.current;\n\n    if (!computedProps) {\n      return;\n    }\n\n    if (!columns.length) {\n      return;\n    }\n\n    columns.forEach(function (column) {\n      if (column.resizable === false || checkForSpecialColumns(column.id)) {} else {\n        callback(column);\n      }\n    });\n  };\n\n  var getCellForColumn = function getCellForColumn(column, row) {\n    var computedProps = computedPropsRef.current;\n\n    if (!computedProps) {\n      return;\n    }\n\n    var result;\n    var columnId = column.id;\n    var cells = row.getCells();\n\n    if (!cells.length) {\n      return;\n    }\n\n    cells.forEach(function (cell) {\n      var cellProps = cell.props;\n      var cellId = cellProps.id;\n\n      if (columnId === cellId) {\n        result = cell.domRef.current;\n      }\n    });\n    return result;\n  };\n\n  var getCellsForColumn = function getCellsForColumn(column) {\n    var computedProps = computedPropsRef.current;\n\n    if (!computedProps) {\n      return;\n    }\n\n    var result = [];\n\n    if (computedProps.getRows) {\n      computedProps.getRows().forEach(function (rowInstance) {\n        var row = rowInstance.row;\n        var cell = getCellForColumn(column, row);\n        result.push(cell);\n      });\n    }\n\n    return result;\n  };\n\n  var cloneIntoDummyContainer = function cloneIntoDummyContainer(cell, dummyContainer) {\n    var cellClone = cell && cell.cloneNode(true);\n\n    if (!cellClone) {\n      return;\n    }\n\n    cellClone.style.width = '';\n    cellClone.style.minWidth = '';\n    cellClone.style.maxWidth = '';\n    cellClone.style.position = 'static';\n    cellClone.style.left = '';\n    var rowClassName = 'InovuaReactDataGrid__row';\n    var headerClassName = 'InovuaReactDataGrid__header';\n    var headerCellClassName = 'InovuaReactDataGrid__column-header';\n    var isHeader = cellClone.classList.contains(headerCellClassName);\n    var cellContent;\n    cellContent = (0, _toConsumableArray2.default)(cellClone.children).find(function (cell) {\n      var className = isHeader ? 'InovuaReactDataGrid__column-header__content' : 'InovuaReactDataGrid__cell__content';\n      return cell.classList.contains(className);\n    });\n\n    if (cellContent) {\n      cellContent.style.width = 'fit-content';\n    } else {\n      cellClone.style.width = 'fit-content';\n    }\n\n    var cloneRow = document.createElement('div');\n    var cloneRowClassList = cloneRow.classList;\n\n    if (isHeader) {\n      cloneRowClassList.add(headerClassName);\n      cloneRow.style.position = 'static';\n    } else {\n      cloneRowClassList.add(rowClassName);\n    }\n\n    var rowElement = cell.parentElement;\n\n    while (rowElement) {\n      var isRow = [rowClassName, headerClassName].some(function (cls) {\n        return rowElement.classList.contains(cls);\n      });\n\n      if (isRow) {\n        for (var i = 0; i < rowElement.classList.length; i++) {\n          var item = rowElement.classList[i];\n          cloneRowClassList.add(item);\n        }\n\n        break;\n      }\n\n      rowElement = rowElement.parentElement;\n    }\n\n    cloneRow.appendChild(cellClone);\n    dummyContainer.appendChild(cloneRow);\n  };\n\n  var computeOptimizedWidth = function computeOptimizedWidth(column, skipHeader) {\n    var computedProps = computedPropsRef.current;\n\n    if (!computedProps) {\n      return -1;\n    }\n\n    var cells = getCellsForColumn(column);\n\n    if (!cells || !cells.length) {\n      return -1;\n    }\n\n    if (!skipHeader) {\n      var headerCell;\n      var header = computedProps.getHeader();\n      var headerCells = header.getCells();\n      headerCells.find(function (cell) {\n        var cellProps = cell.props;\n\n        if (cellProps.id === column.id) {\n          headerCell = cell.getDOMNode();\n        }\n      });\n\n      if (headerCell && headerCell.classList.contains('InovuaReactDataGrid__column-header__resize-wrapper')) {\n        headerCell = (0, _toConsumableArray2.default)(headerCell.children).find(function (cell) {\n          return cell.classList.contains('InovuaReactDataGrid__column-header');\n        });\n      }\n\n      cells.push(headerCell);\n    }\n\n    return addCellsToContainer(cells, skipHeader);\n  };\n\n  var addCellsToContainer = function addCellsToContainer(cells, skipHeader) {\n    var computedProps = computedPropsRef.current;\n\n    if (!computedProps) {\n      return -1;\n    }\n\n    var dummyContainer = document.createElement('span');\n    dummyContainer.style.position = 'fixed';\n    var vl = computedProps.getVirtualList();\n    var container = vl.getContainerNode();\n    container.appendChild(dummyContainer);\n    cells.forEach(function (cell) {\n      return cloneIntoDummyContainer(cell, dummyContainer);\n    });\n    var dummyContainerWidth = dummyContainer.offsetWidth;\n\n    if (!skipHeader) {\n      dummyContainerWidth += 3;\n    } else {\n      dummyContainerWidth += 1;\n    }\n\n    container.removeChild(dummyContainer);\n    return dummyContainerWidth;\n  };\n\n  var normaliseWidth = function normaliseWidth(column, width) {\n    var minWidth = column.minWidth;\n    var maxWidth = column.maxWidth;\n\n    if (minWidth && width < minWidth) {\n      width = minWidth;\n    }\n\n    if (maxWidth && width > maxWidth) {\n      width = maxWidth;\n    }\n\n    return width;\n  };\n\n  var setColumnSizesToFit = function setColumnSizesToFit() {\n    var computedProps = computedPropsRef.current;\n\n    if (!computedProps) {\n      return;\n    }\n\n    var enableColumnAutosize = computedProps.enableColumnAutosize;\n\n    if (!enableColumnAutosize) {\n      showWarning('setColumnSizesToFit');\n      return;\n    }\n\n    checkForAvaibleWidth();\n  };\n\n  var setColumnsSizesAuto = function setColumnsSizesAuto() {\n    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : EMPTY_OBJECT,\n        columnIds = _ref.columnIds,\n        skipHeader = _ref.skipHeader;\n\n    var computedProps = computedPropsRef.current;\n\n    if (!computedProps) {\n      return;\n    }\n\n    var enableColumnAutosize = computedProps.enableColumnAutosize;\n\n    if (!enableColumnAutosize) {\n      showWarning('setColumnsSizesAuto');\n      return;\n    }\n\n    var shouldSkipHeader = skipHeader != null ? skipHeader : computedProps.skipHeaderOnAutoSize;\n    var allIds = [];\n    var columns = [];\n\n    if (columnIds !== undefined) {\n      if (Array.isArray(columnIds)) {\n        allIds = columnIds;\n      }\n    }\n\n    for (var i = 0; i < allIds.length; i++) {\n      var id = allIds[i];\n      var column = computedProps.getColumnBy(id);\n      columns.push(column);\n    }\n\n    if (columns && columns.length === 0) {\n      columns = computedProps.visibleColumns;\n    }\n\n    if (!columns || columns.length === 0) {\n      return;\n    }\n\n    var columnsToSize = [];\n    var counter = -1;\n    var newColumnSizes = {};\n\n    while (counter !== 0) {\n      counter = 0;\n      computeColumnSizesAuto(columns, function (column) {\n        if (columnsToSize.indexOf(column) >= 0) {\n          return false;\n        }\n\n        var optimizedWidth = computeOptimizedWidth(column, shouldSkipHeader);\n\n        if (optimizedWidth > 0) {\n          var newWidth = normaliseWidth(column, optimizedWidth);\n          var columnId = column.id;\n          columnsToSize.push(column);\n          Object.assign(newColumnSizes, (0, _defineProperty2.default)({}, columnId, newWidth));\n          counter++;\n        }\n\n        return true;\n      });\n    }\n\n    if (computedProps.virtualizeColumns) {\n      var bodyRef = computedProps.bodyRef.current;\n      var columnLayout = bodyRef.columnLayout;\n      var headerLayout = columnLayout.headerLayout;\n      var header = headerLayout.header;\n      setTimeout(function () {\n        header.updateColumns();\n      }, 10);\n    }\n\n    var newReservedViewportWidth = computedProps.reservedViewportWidth;\n    var columnFlexes = computedProps.columnFlexes;\n    computedProps.computeColumnSizes(newColumnSizes || {}, columnFlexes || {}, newReservedViewportWidth, {\n      getColumnBy: computedProps.getColumnBy,\n      onColumnResize: computedProps.initialProps.onColumnResize,\n      onBatchColumnResize: computedProps.initialProps.onBatchColumnResize,\n      columnSizes: computedProps.columnSizes,\n      setColumnSizes: computedProps.setColumnSizes,\n      setColumnFlexes: computedProps.setColumnFlexes\n    });\n  };\n\n  var setColumnSizeAuto = function setColumnSizeAuto(id, skipHeader) {\n    var computedProps = computedPropsRef.current;\n\n    if (!computedProps) {\n      return;\n    }\n\n    var enableColumnAutosize = computedProps.enableColumnAutosize;\n\n    if (!enableColumnAutosize) {\n      showWarning('setColumnSizeAuto');\n      return;\n    }\n\n    if (id) {\n      setColumnsSizesAuto({\n        columnIds: [id],\n        skipHeader: skipHeader\n      });\n    }\n\n    return;\n  };\n\n  var showWarning = function showWarning(method) {\n    return console.error(\"In order for \".concat(method, \" to work, the 'enableColumnAutosize' prop should be 'true'.\"));\n  };\n\n  return {\n    setColumnSizesToFit: setColumnSizesToFit,\n    setColumnsSizesAuto: setColumnsSizesAuto,\n    setColumnSizeAuto: setColumnSizeAuto\n  };\n};\n\nvar _default = useColumnsSizing;\nexports.default = _default;"]},"metadata":{},"sourceType":"script"}