{"ast":null,"code":"/**\n * Copyright Â© INOVUA TRADING.\n *\n * This source code is licensed under the Commercial License found in the\n * LICENSE file in the root directory of this source tree.\n */\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useClipboard = void 0;\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _react = require(\"react\");\n\nvar _renderClipboardContextMenu = _interopRequireDefault(require(\"./renderClipboardContextMenu\"));\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      (0, _defineProperty2.default)(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nvar useClipboard = function useClipboard(_props, computedProps, computedPropsRef) {\n  var clipboard = (0, _react.useRef)(false);\n  var preventBlurOnContextMenuOpen = (0, _react.useRef)(false);\n\n  if (!computedProps.enableClipboard) {\n    return null;\n  }\n\n  var copyActiveRowToClipboard = function copyActiveRowToClipboard() {\n    var computedProps = computedPropsRef.current;\n\n    if (!computedProps) {\n      return null;\n    }\n\n    if (computedProps.computedCellSelection) {\n      return null;\n    }\n\n    var activeRow = computedProps.getActiveItem();\n\n    if (computedProps.onCopyActiveRowChange) {\n      computedProps.onCopyActiveRowChange(activeRow);\n    }\n\n    var idProperty = computedProps.idProperty;\n    var compoundIdProperty = idProperty.includes(computedProps.idPropertySeparator);\n\n    if (activeRow && navigator.clipboard) {\n      var clonedActiveRow = Object.assign({}, activeRow);\n\n      if (compoundIdProperty) {\n        var activeRowId = computedProps.getItemId(clonedActiveRow);\n        var parts = idProperty.split(computedProps.idPropertySeparator);\n        parts.reduce(function (itemObj, id) {\n          if (activeRowId === itemObj[id]) {\n            if (itemObj) {\n              delete itemObj[id];\n            }\n          }\n\n          return itemObj[id];\n        }, clonedActiveRow);\n      } else {\n        delete clonedActiveRow[idProperty];\n      }\n\n      var parsedActiveRow = JSON.stringify(clonedActiveRow);\n      navigator.clipboard.writeText(parsedActiveRow).then(function () {\n        if (Object.keys(clonedActiveRow).length > 0) {\n          clipboard.current = true;\n        }\n      }).catch(function (e) {\n        return console.warn(e);\n      });\n    }\n  };\n\n  var pasteActiveRowFromClipboard = function pasteActiveRowFromClipboard() {\n    var computedProps = computedPropsRef.current;\n\n    if (!computedProps) {\n      return null;\n    }\n\n    if (computedProps.computedCellSelection) {\n      return null;\n    }\n\n    if (navigator.clipboard) {\n      navigator.clipboard.readText().then(function (data) {\n        var parsedData = JSON.parse(data);\n        var activeIndex = computedProps.computedActiveIndex;\n\n        if (computedProps.onPasteActiveRowChange) {\n          computedProps.onPasteActiveRowChange(parsedData);\n        }\n\n        if (activeIndex != null) {\n          computedProps.setItemAt(activeIndex, parsedData, {\n            replace: false,\n            deepCloning: true\n          });\n        }\n      });\n    }\n  };\n\n  var copySelectedCellsToClipboard = function copySelectedCellsToClipboard() {\n    var computedProps = computedPropsRef.current;\n\n    if (!computedProps) {\n      return null;\n    }\n\n    if (!computedProps.computedCellSelection) {\n      return null;\n    }\n\n    var selectedCells = computedProps.computedCellSelection;\n    var rows = {};\n    Object.keys(selectedCells).map(function (key) {\n      var parsedKey = key.split(',');\n      var index = parseInt(parsedKey[0]);\n      var column = parsedKey[1];\n      var data = computedProps.getData();\n\n      if (index !== undefined && column !== undefined) {\n        var cellValue = data[index][column];\n        rows[index] = Object.assign({}, rows[index], (0, _defineProperty2.default)({}, column, cellValue));\n      }\n    });\n\n    if (computedProps.onCopySelectedCellsChange) {\n      computedProps.onCopySelectedCellsChange(rows);\n    }\n\n    if (!!rows && navigator.clipboard) {\n      var parsedSelectedCells = JSON.stringify(rows);\n      navigator.clipboard.writeText(parsedSelectedCells).then(function () {\n        if (Object.keys(rows).length > 0) {\n          clipboard.current = true;\n        }\n      }).catch(function (e) {\n        return console.warn(e);\n      });\n    }\n  };\n\n  var pasteSelectedCellsFromClipboard = function pasteSelectedCellsFromClipboard() {\n    var computedProps = computedPropsRef.current;\n\n    if (!computedProps) {\n      return null;\n    }\n\n    if (!computedProps.computedCellSelection) {\n      return null;\n    }\n\n    if (navigator.clipboard) {\n      navigator.clipboard.readText().then(function (data) {\n        var parsedData = JSON.parse(data);\n\n        var _computedProps$comput = (0, _slicedToArray2.default)(computedProps.computedActiveCell, 2),\n            activeRow = _computedProps$comput[0],\n            activeColumn = _computedProps$comput[1];\n\n        var dataArray = Object.keys(parsedData).map(function (key, index) {\n          var columns = {};\n          Object.keys(parsedData[key]).map(function (columnKey, i) {\n            var column = computedProps.getColumnBy(activeColumn + i);\n\n            if (column) {\n              var id = column.id;\n              var computedColumn = (0, _defineProperty2.default)({}, id, parsedData[key][columnKey]);\n              columns[index] = Object.assign({}, columns[index], computedColumn);\n            }\n          });\n          return Object.assign({}, _objectSpread({\n            id: activeRow + index\n          }, columns[index]));\n        });\n\n        if (computedProps.onPasteSelectedCellsChange) {\n          computedProps.onPasteSelectedCellsChange(dataArray);\n        }\n\n        computedProps.setItemsAt(dataArray, {\n          replace: false\n        });\n      });\n    }\n  };\n\n  var clipboardContextMenu = function clipboardContextMenu() {\n    var computedProps = computedPropsRef.current;\n\n    if (!computedProps) {\n      return null;\n    }\n\n    if (computedProps.renderRowContextMenu) {\n      return;\n    }\n\n    computedProps.initialProps.renderRowContextMenu = _renderClipboardContextMenu.default;\n  };\n\n  clipboardContextMenu();\n  return {\n    copyActiveRowToClipboard: copyActiveRowToClipboard,\n    pasteActiveRowFromClipboard: pasteActiveRowFromClipboard,\n    copySelectedCellsToClipboard: copySelectedCellsToClipboard,\n    pasteSelectedCellsFromClipboard: pasteSelectedCellsFromClipboard,\n    clipboard: clipboard,\n    preventBlurOnContextMenuOpen: preventBlurOnContextMenuOpen\n  };\n};\n\nexports.useClipboard = useClipboard;","map":{"version":3,"sources":["/Users/sungjaejoo/Desktop/ILP-main/node_modules/@inovua/reactdatagrid-enterprise/plugins/clipboard/useClipboard/index.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","useClipboard","_slicedToArray2","_defineProperty2","_react","_renderClipboardContextMenu","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","default","getOwnPropertyDescriptors","defineProperties","_props","computedProps","computedPropsRef","clipboard","useRef","preventBlurOnContextMenuOpen","enableClipboard","copyActiveRowToClipboard","current","computedCellSelection","activeRow","getActiveItem","onCopyActiveRowChange","idProperty","compoundIdProperty","includes","idPropertySeparator","navigator","clonedActiveRow","assign","activeRowId","getItemId","parts","split","reduce","itemObj","id","parsedActiveRow","JSON","stringify","writeText","then","catch","e","console","warn","pasteActiveRowFromClipboard","readText","data","parsedData","parse","activeIndex","computedActiveIndex","onPasteActiveRowChange","setItemAt","replace","deepCloning","copySelectedCellsToClipboard","selectedCells","rows","map","parsedKey","index","parseInt","column","getData","undefined","cellValue","onCopySelectedCellsChange","parsedSelectedCells","pasteSelectedCellsFromClipboard","_computedProps$comput","computedActiveCell","activeColumn","dataArray","columns","columnKey","getColumnBy","computedColumn","onPasteSelectedCellsChange","setItemsAt","clipboardContextMenu","renderRowContextMenu","initialProps"],"mappings":"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","sourcesContent":["/**\n * Copyright Â© INOVUA TRADING.\n *\n * This source code is licensed under the Commercial License found in the\n * LICENSE file in the root directory of this source tree.\n */\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useClipboard = void 0;\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _react = require(\"react\");\n\nvar _renderClipboardContextMenu = _interopRequireDefault(require(\"./renderClipboardContextMenu\"));\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nvar useClipboard = function useClipboard(_props, computedProps, computedPropsRef) {\n  var clipboard = (0, _react.useRef)(false);\n  var preventBlurOnContextMenuOpen = (0, _react.useRef)(false);\n\n  if (!computedProps.enableClipboard) {\n    return null;\n  }\n\n  var copyActiveRowToClipboard = function copyActiveRowToClipboard() {\n    var computedProps = computedPropsRef.current;\n\n    if (!computedProps) {\n      return null;\n    }\n\n    if (computedProps.computedCellSelection) {\n      return null;\n    }\n\n    var activeRow = computedProps.getActiveItem();\n\n    if (computedProps.onCopyActiveRowChange) {\n      computedProps.onCopyActiveRowChange(activeRow);\n    }\n\n    var idProperty = computedProps.idProperty;\n    var compoundIdProperty = idProperty.includes(computedProps.idPropertySeparator);\n\n    if (activeRow && navigator.clipboard) {\n      var clonedActiveRow = Object.assign({}, activeRow);\n\n      if (compoundIdProperty) {\n        var activeRowId = computedProps.getItemId(clonedActiveRow);\n        var parts = idProperty.split(computedProps.idPropertySeparator);\n        parts.reduce(function (itemObj, id) {\n          if (activeRowId === itemObj[id]) {\n            if (itemObj) {\n              delete itemObj[id];\n            }\n          }\n\n          return itemObj[id];\n        }, clonedActiveRow);\n      } else {\n        delete clonedActiveRow[idProperty];\n      }\n\n      var parsedActiveRow = JSON.stringify(clonedActiveRow);\n      navigator.clipboard.writeText(parsedActiveRow).then(function () {\n        if (Object.keys(clonedActiveRow).length > 0) {\n          clipboard.current = true;\n        }\n      }).catch(function (e) {\n        return console.warn(e);\n      });\n    }\n  };\n\n  var pasteActiveRowFromClipboard = function pasteActiveRowFromClipboard() {\n    var computedProps = computedPropsRef.current;\n\n    if (!computedProps) {\n      return null;\n    }\n\n    if (computedProps.computedCellSelection) {\n      return null;\n    }\n\n    if (navigator.clipboard) {\n      navigator.clipboard.readText().then(function (data) {\n        var parsedData = JSON.parse(data);\n        var activeIndex = computedProps.computedActiveIndex;\n\n        if (computedProps.onPasteActiveRowChange) {\n          computedProps.onPasteActiveRowChange(parsedData);\n        }\n\n        if (activeIndex != null) {\n          computedProps.setItemAt(activeIndex, parsedData, {\n            replace: false,\n            deepCloning: true\n          });\n        }\n      });\n    }\n  };\n\n  var copySelectedCellsToClipboard = function copySelectedCellsToClipboard() {\n    var computedProps = computedPropsRef.current;\n\n    if (!computedProps) {\n      return null;\n    }\n\n    if (!computedProps.computedCellSelection) {\n      return null;\n    }\n\n    var selectedCells = computedProps.computedCellSelection;\n    var rows = {};\n    Object.keys(selectedCells).map(function (key) {\n      var parsedKey = key.split(',');\n      var index = parseInt(parsedKey[0]);\n      var column = parsedKey[1];\n      var data = computedProps.getData();\n\n      if (index !== undefined && column !== undefined) {\n        var cellValue = data[index][column];\n        rows[index] = Object.assign({}, rows[index], (0, _defineProperty2.default)({}, column, cellValue));\n      }\n    });\n\n    if (computedProps.onCopySelectedCellsChange) {\n      computedProps.onCopySelectedCellsChange(rows);\n    }\n\n    if (!!rows && navigator.clipboard) {\n      var parsedSelectedCells = JSON.stringify(rows);\n      navigator.clipboard.writeText(parsedSelectedCells).then(function () {\n        if (Object.keys(rows).length > 0) {\n          clipboard.current = true;\n        }\n      }).catch(function (e) {\n        return console.warn(e);\n      });\n    }\n  };\n\n  var pasteSelectedCellsFromClipboard = function pasteSelectedCellsFromClipboard() {\n    var computedProps = computedPropsRef.current;\n\n    if (!computedProps) {\n      return null;\n    }\n\n    if (!computedProps.computedCellSelection) {\n      return null;\n    }\n\n    if (navigator.clipboard) {\n      navigator.clipboard.readText().then(function (data) {\n        var parsedData = JSON.parse(data);\n\n        var _computedProps$comput = (0, _slicedToArray2.default)(computedProps.computedActiveCell, 2),\n            activeRow = _computedProps$comput[0],\n            activeColumn = _computedProps$comput[1];\n\n        var dataArray = Object.keys(parsedData).map(function (key, index) {\n          var columns = {};\n          Object.keys(parsedData[key]).map(function (columnKey, i) {\n            var column = computedProps.getColumnBy(activeColumn + i);\n\n            if (column) {\n              var id = column.id;\n              var computedColumn = (0, _defineProperty2.default)({}, id, parsedData[key][columnKey]);\n              columns[index] = Object.assign({}, columns[index], computedColumn);\n            }\n          });\n          return Object.assign({}, _objectSpread({\n            id: activeRow + index\n          }, columns[index]));\n        });\n\n        if (computedProps.onPasteSelectedCellsChange) {\n          computedProps.onPasteSelectedCellsChange(dataArray);\n        }\n\n        computedProps.setItemsAt(dataArray, {\n          replace: false\n        });\n      });\n    }\n  };\n\n  var clipboardContextMenu = function clipboardContextMenu() {\n    var computedProps = computedPropsRef.current;\n\n    if (!computedProps) {\n      return null;\n    }\n\n    if (computedProps.renderRowContextMenu) {\n      return;\n    }\n\n    computedProps.initialProps.renderRowContextMenu = _renderClipboardContextMenu.default;\n  };\n\n  clipboardContextMenu();\n  return {\n    copyActiveRowToClipboard: copyActiveRowToClipboard,\n    pasteActiveRowFromClipboard: pasteActiveRowFromClipboard,\n    copySelectedCellsToClipboard: copySelectedCellsToClipboard,\n    pasteSelectedCellsFromClipboard: pasteSelectedCellsFromClipboard,\n    clipboard: clipboard,\n    preventBlurOnContextMenuOpen: preventBlurOnContextMenuOpen\n  };\n};\n\nexports.useClipboard = useClipboard;"]},"metadata":{},"sourceType":"script"}