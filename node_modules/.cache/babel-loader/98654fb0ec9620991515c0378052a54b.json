{"ast":null,"code":"/**\n * Copyright © INOVUA TRADING.\n *\n * This source code is licensed under the Commercial License found in the\n * LICENSE file in the root directory of this source tree.\n */\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\n\nvar dropIndexValidation = function dropIndexValidation(_ref) {\n  var data = _ref.data,\n      count = _ref.count,\n      dragIndex = _ref.dragIndex,\n      dropIndex = _ref.dropIndex,\n      isRowReorderValid = _ref.isRowReorderValid,\n      selectedGroup = _ref.selectedGroup,\n      selectedParent = _ref.selectedParent,\n      nodePathSeparator = _ref.nodePathSeparator,\n      groupPathSeparator = _ref.groupPathSeparator,\n      allowRowReoderBetweenGroups = _ref.allowRowReoderBetweenGroups,\n      computedGroupBy = _ref.computedGroupBy,\n      computedTreeEnabled = _ref.computedTreeEnabled,\n      generateIdFromPath = _ref.generateIdFromPath,\n      enableTreeRowReorderParentChange = _ref.enableTreeRowReorderParentChange;\n  var iterateRows = false;\n  var validDropPositions = [];\n\n  if (computedGroupBy && computedGroupBy.length > 0) {\n    validDropPositions = data.reduce(function (acc, curr, i) {\n      if (curr.__group) {\n        var value = curr.keyPath.join(groupPathSeparator);\n\n        if (!value.localeCompare(selectedGroup)) {\n          iterateRows = true;\n        } else {\n          if (!allowRowReoderBetweenGroups) {\n            iterateRows = false;\n          }\n        }\n      }\n\n      if (allowRowReoderBetweenGroups) {\n        iterateRows = true;\n      }\n\n      if (!curr.__group && iterateRows) {\n        acc[i] = true;\n      } else {\n        acc[i] = false;\n      }\n\n      return acc;\n    }, {});\n  } else if (computedTreeEnabled && generateIdFromPath) {\n    validDropPositions = data.reduce(function (acc, curr, i) {\n      var _curr$__nodeProps = curr.__nodeProps,\n          leafNode = _curr$__nodeProps.leafNode,\n          path = _curr$__nodeProps.path;\n\n      if (!data[dragIndex].__nodeProps.leafNode) {\n        acc[i] = false;\n      } else {\n        var parentNodeId = getParentNodeId(path, nodePathSeparator);\n        var selectedParentNodeId = selectedParent ? getParentNodeId(selectedParent, nodePathSeparator) : '';\n\n        if (!leafNode) {\n          acc[i] = false;\n        } else {\n          if (enableTreeRowReorderParentChange) {\n            acc[i] = true;\n          } else {\n            if (parentNodeId === selectedParentNodeId) {\n              acc[i] = true;\n            } else {\n              acc[i] = false;\n            }\n          }\n        }\n      }\n\n      return acc;\n    }, {});\n  } else {\n    validDropPositions = (0, _toConsumableArray2.default)(Array(count)).reduce(function (acc, _curr, i) {\n      acc[i] = true;\n      return acc;\n    }, {});\n    validDropPositions[count] = true;\n  }\n\n  if (isRowReorderValid) {\n    validDropPositions[dropIndex] = isRowReorderValid({\n      dragRowIndex: dragIndex,\n      dropRowIndex: dropIndex\n    });\n  }\n\n  return validDropPositions;\n};\n\nvar getParentNodeId = function getParentNodeId(path, pathSeparator) {\n  if (pathSeparator) {\n    var parsedPath = path.split(pathSeparator);\n    parsedPath.pop();\n    var parentNodeId = parsedPath.join(pathSeparator);\n    return parentNodeId;\n  }\n\n  return path;\n};\n\nvar _default = dropIndexValidation;\nexports.default = _default;","map":{"version":3,"sources":["/Users/sungjaejoo/Desktop/리액트/인터로거/ILP-main/node_modules/@inovua/reactdatagrid-enterprise/plugins/row-reorder/utils/dropIndexValidation.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","default","_toConsumableArray2","dropIndexValidation","_ref","data","count","dragIndex","dropIndex","isRowReorderValid","selectedGroup","selectedParent","nodePathSeparator","groupPathSeparator","allowRowReoderBetweenGroups","computedGroupBy","computedTreeEnabled","generateIdFromPath","enableTreeRowReorderParentChange","iterateRows","validDropPositions","length","reduce","acc","curr","i","__group","keyPath","join","localeCompare","_curr$__nodeProps","__nodeProps","leafNode","path","parentNodeId","getParentNodeId","selectedParentNodeId","Array","_curr","dragRowIndex","dropRowIndex","pathSeparator","parsedPath","split","pop","_default"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIA,sBAAsB,GAAGC,OAAO,CAAC,8CAAD,CAApC;;AAEAC,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;;AAEA,IAAIC,mBAAmB,GAAGP,sBAAsB,CAACC,OAAO,CAAC,0CAAD,CAAR,CAAhD;;AAEA,IAAIO,mBAAmB,GAAG,SAASA,mBAAT,CAA6BC,IAA7B,EAAmC;AAC3D,MAAIC,IAAI,GAAGD,IAAI,CAACC,IAAhB;AAAA,MACIC,KAAK,GAAGF,IAAI,CAACE,KADjB;AAAA,MAEIC,SAAS,GAAGH,IAAI,CAACG,SAFrB;AAAA,MAGIC,SAAS,GAAGJ,IAAI,CAACI,SAHrB;AAAA,MAIIC,iBAAiB,GAAGL,IAAI,CAACK,iBAJ7B;AAAA,MAKIC,aAAa,GAAGN,IAAI,CAACM,aALzB;AAAA,MAMIC,cAAc,GAAGP,IAAI,CAACO,cAN1B;AAAA,MAOIC,iBAAiB,GAAGR,IAAI,CAACQ,iBAP7B;AAAA,MAQIC,kBAAkB,GAAGT,IAAI,CAACS,kBAR9B;AAAA,MASIC,2BAA2B,GAAGV,IAAI,CAACU,2BATvC;AAAA,MAUIC,eAAe,GAAGX,IAAI,CAACW,eAV3B;AAAA,MAWIC,mBAAmB,GAAGZ,IAAI,CAACY,mBAX/B;AAAA,MAYIC,kBAAkB,GAAGb,IAAI,CAACa,kBAZ9B;AAAA,MAaIC,gCAAgC,GAAGd,IAAI,CAACc,gCAb5C;AAcA,MAAIC,WAAW,GAAG,KAAlB;AACA,MAAIC,kBAAkB,GAAG,EAAzB;;AAEA,MAAIL,eAAe,IAAIA,eAAe,CAACM,MAAhB,GAAyB,CAAhD,EAAmD;AACjDD,IAAAA,kBAAkB,GAAGf,IAAI,CAACiB,MAAL,CAAY,UAAUC,GAAV,EAAeC,IAAf,EAAqBC,CAArB,EAAwB;AACvD,UAAID,IAAI,CAACE,OAAT,EAAkB;AAChB,YAAI1B,KAAK,GAAGwB,IAAI,CAACG,OAAL,CAAaC,IAAb,CAAkBf,kBAAlB,CAAZ;;AAEA,YAAI,CAACb,KAAK,CAAC6B,aAAN,CAAoBnB,aAApB,CAAL,EAAyC;AACvCS,UAAAA,WAAW,GAAG,IAAd;AACD,SAFD,MAEO;AACL,cAAI,CAACL,2BAAL,EAAkC;AAChCK,YAAAA,WAAW,GAAG,KAAd;AACD;AACF;AACF;;AAED,UAAIL,2BAAJ,EAAiC;AAC/BK,QAAAA,WAAW,GAAG,IAAd;AACD;;AAED,UAAI,CAACK,IAAI,CAACE,OAAN,IAAiBP,WAArB,EAAkC;AAChCI,QAAAA,GAAG,CAACE,CAAD,CAAH,GAAS,IAAT;AACD,OAFD,MAEO;AACLF,QAAAA,GAAG,CAACE,CAAD,CAAH,GAAS,KAAT;AACD;;AAED,aAAOF,GAAP;AACD,KAxBoB,EAwBlB,EAxBkB,CAArB;AAyBD,GA1BD,MA0BO,IAAIP,mBAAmB,IAAIC,kBAA3B,EAA+C;AACpDG,IAAAA,kBAAkB,GAAGf,IAAI,CAACiB,MAAL,CAAY,UAAUC,GAAV,EAAeC,IAAf,EAAqBC,CAArB,EAAwB;AACvD,UAAIK,iBAAiB,GAAGN,IAAI,CAACO,WAA7B;AAAA,UACIC,QAAQ,GAAGF,iBAAiB,CAACE,QADjC;AAAA,UAEIC,IAAI,GAAGH,iBAAiB,CAACG,IAF7B;;AAIA,UAAI,CAAC5B,IAAI,CAACE,SAAD,CAAJ,CAAgBwB,WAAhB,CAA4BC,QAAjC,EAA2C;AACzCT,QAAAA,GAAG,CAACE,CAAD,CAAH,GAAS,KAAT;AACD,OAFD,MAEO;AACL,YAAIS,YAAY,GAAGC,eAAe,CAACF,IAAD,EAAOrB,iBAAP,CAAlC;AACA,YAAIwB,oBAAoB,GAAGzB,cAAc,GAAGwB,eAAe,CAACxB,cAAD,EAAiBC,iBAAjB,CAAlB,GAAwD,EAAjG;;AAEA,YAAI,CAACoB,QAAL,EAAe;AACbT,UAAAA,GAAG,CAACE,CAAD,CAAH,GAAS,KAAT;AACD,SAFD,MAEO;AACL,cAAIP,gCAAJ,EAAsC;AACpCK,YAAAA,GAAG,CAACE,CAAD,CAAH,GAAS,IAAT;AACD,WAFD,MAEO;AACL,gBAAIS,YAAY,KAAKE,oBAArB,EAA2C;AACzCb,cAAAA,GAAG,CAACE,CAAD,CAAH,GAAS,IAAT;AACD,aAFD,MAEO;AACLF,cAAAA,GAAG,CAACE,CAAD,CAAH,GAAS,KAAT;AACD;AACF;AACF;AACF;;AAED,aAAOF,GAAP;AACD,KA3BoB,EA2BlB,EA3BkB,CAArB;AA4BD,GA7BM,MA6BA;AACLH,IAAAA,kBAAkB,GAAG,CAAC,GAAGlB,mBAAmB,CAACD,OAAxB,EAAiCoC,KAAK,CAAC/B,KAAD,CAAtC,EAA+CgB,MAA/C,CAAsD,UAAUC,GAAV,EAAee,KAAf,EAAsBb,CAAtB,EAAyB;AAClGF,MAAAA,GAAG,CAACE,CAAD,CAAH,GAAS,IAAT;AACA,aAAOF,GAAP;AACD,KAHoB,EAGlB,EAHkB,CAArB;AAIAH,IAAAA,kBAAkB,CAACd,KAAD,CAAlB,GAA4B,IAA5B;AACD;;AAED,MAAIG,iBAAJ,EAAuB;AACrBW,IAAAA,kBAAkB,CAACZ,SAAD,CAAlB,GAAgCC,iBAAiB,CAAC;AAChD8B,MAAAA,YAAY,EAAEhC,SADkC;AAEhDiC,MAAAA,YAAY,EAAEhC;AAFkC,KAAD,CAAjD;AAID;;AAED,SAAOY,kBAAP;AACD,CAzFD;;AA2FA,IAAIe,eAAe,GAAG,SAASA,eAAT,CAAyBF,IAAzB,EAA+BQ,aAA/B,EAA8C;AAClE,MAAIA,aAAJ,EAAmB;AACjB,QAAIC,UAAU,GAAGT,IAAI,CAACU,KAAL,CAAWF,aAAX,CAAjB;AACAC,IAAAA,UAAU,CAACE,GAAX;AACA,QAAIV,YAAY,GAAGQ,UAAU,CAACd,IAAX,CAAgBa,aAAhB,CAAnB;AACA,WAAOP,YAAP;AACD;;AAED,SAAOD,IAAP;AACD,CATD;;AAWA,IAAIY,QAAQ,GAAG1C,mBAAf;AACAJ,OAAO,CAACE,OAAR,GAAkB4C,QAAlB","sourcesContent":["/**\n * Copyright © INOVUA TRADING.\n *\n * This source code is licensed under the Commercial License found in the\n * LICENSE file in the root directory of this source tree.\n */\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\n\nvar dropIndexValidation = function dropIndexValidation(_ref) {\n  var data = _ref.data,\n      count = _ref.count,\n      dragIndex = _ref.dragIndex,\n      dropIndex = _ref.dropIndex,\n      isRowReorderValid = _ref.isRowReorderValid,\n      selectedGroup = _ref.selectedGroup,\n      selectedParent = _ref.selectedParent,\n      nodePathSeparator = _ref.nodePathSeparator,\n      groupPathSeparator = _ref.groupPathSeparator,\n      allowRowReoderBetweenGroups = _ref.allowRowReoderBetweenGroups,\n      computedGroupBy = _ref.computedGroupBy,\n      computedTreeEnabled = _ref.computedTreeEnabled,\n      generateIdFromPath = _ref.generateIdFromPath,\n      enableTreeRowReorderParentChange = _ref.enableTreeRowReorderParentChange;\n  var iterateRows = false;\n  var validDropPositions = [];\n\n  if (computedGroupBy && computedGroupBy.length > 0) {\n    validDropPositions = data.reduce(function (acc, curr, i) {\n      if (curr.__group) {\n        var value = curr.keyPath.join(groupPathSeparator);\n\n        if (!value.localeCompare(selectedGroup)) {\n          iterateRows = true;\n        } else {\n          if (!allowRowReoderBetweenGroups) {\n            iterateRows = false;\n          }\n        }\n      }\n\n      if (allowRowReoderBetweenGroups) {\n        iterateRows = true;\n      }\n\n      if (!curr.__group && iterateRows) {\n        acc[i] = true;\n      } else {\n        acc[i] = false;\n      }\n\n      return acc;\n    }, {});\n  } else if (computedTreeEnabled && generateIdFromPath) {\n    validDropPositions = data.reduce(function (acc, curr, i) {\n      var _curr$__nodeProps = curr.__nodeProps,\n          leafNode = _curr$__nodeProps.leafNode,\n          path = _curr$__nodeProps.path;\n\n      if (!data[dragIndex].__nodeProps.leafNode) {\n        acc[i] = false;\n      } else {\n        var parentNodeId = getParentNodeId(path, nodePathSeparator);\n        var selectedParentNodeId = selectedParent ? getParentNodeId(selectedParent, nodePathSeparator) : '';\n\n        if (!leafNode) {\n          acc[i] = false;\n        } else {\n          if (enableTreeRowReorderParentChange) {\n            acc[i] = true;\n          } else {\n            if (parentNodeId === selectedParentNodeId) {\n              acc[i] = true;\n            } else {\n              acc[i] = false;\n            }\n          }\n        }\n      }\n\n      return acc;\n    }, {});\n  } else {\n    validDropPositions = (0, _toConsumableArray2.default)(Array(count)).reduce(function (acc, _curr, i) {\n      acc[i] = true;\n      return acc;\n    }, {});\n    validDropPositions[count] = true;\n  }\n\n  if (isRowReorderValid) {\n    validDropPositions[dropIndex] = isRowReorderValid({\n      dragRowIndex: dragIndex,\n      dropRowIndex: dropIndex\n    });\n  }\n\n  return validDropPositions;\n};\n\nvar getParentNodeId = function getParentNodeId(path, pathSeparator) {\n  if (pathSeparator) {\n    var parsedPath = path.split(pathSeparator);\n    parsedPath.pop();\n    var parentNodeId = parsedPath.join(pathSeparator);\n    return parentNodeId;\n  }\n\n  return path;\n};\n\nvar _default = dropIndexValidation;\nexports.default = _default;"]},"metadata":{},"sourceType":"script"}