{"ast":null,"code":"/**\n * Copyright © INOVUA TRADING.\n *\n * This source code is licensed under the Commercial License found in the\n * LICENSE file in the root directory of this source tree.\n */\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar updateTreeDataIds = function updateTreeDataIds(data, config) {\n  var idProperty = config.idProperty;\n  var nodesName = config.nodesName;\n\n  var updateIds = function updateIds(dataArr) {\n    for (var i = 0; i < dataArr.length; i++) {\n      var item = dataArr[i];\n\n      if (!item) {\n        continue;\n      }\n\n      var itemNodes = item[nodesName];\n      item[idProperty] = i + 1;\n\n      if (Array.isArray(itemNodes)) {\n        updateIds(itemNodes);\n      }\n    }\n  };\n\n  updateIds(data);\n  return data;\n};\n\nvar computeTreeData = function computeTreeData(dataArray, config) {\n  var idProperty = config.idProperty;\n  var nodesName = config.nodesName;\n  var pathSeparator = config.pathSeparator;\n  var expandedNodes = config.expandedNodes;\n  var generateIdFromPath = config.generateIdFromPath;\n  var selectedPath = config.selectedPath;\n  var destinationPath = config.destinationPath;\n  var value = [];\n  var counter = 0;\n\n  var computeData = function computeData(data, idSelected, destinationId) {\n    var result = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\n    var parentNode = arguments.length > 4 ? arguments[4] : undefined;\n    var initialIdSelected = '';\n\n    for (var i = 0; i < data.length; i++) {\n      if (initialIdSelected === '') {\n        initialIdSelected = idSelected;\n      }\n\n      if (counter === 2) {\n        break;\n      }\n\n      var item = data[i];\n\n      if (!item) {\n        continue;\n      }\n\n      var itemId = \"\".concat(item[idProperty]);\n      var itemNodes = item[nodesName];\n      var parentNodeId = parentNode ? \"\".concat(parentNode[idProperty]) : undefined;\n      var path = parentNode ? \"\".concat(parentNodeId).concat(pathSeparator).concat(item[idProperty]) : \"\".concat(item[idProperty]);\n\n      if (generateIdFromPath) {\n        item[idProperty] = path;\n      }\n\n      if (parentNode === undefined) {\n        result.push(item);\n      } else {\n        var parentNodes = parentNode[nodesName];\n\n        if (path === initialIdSelected) {\n          value.push(item);\n          parentNodes.splice(i, 1);\n          counter++;\n        }\n\n        if (path === destinationId) {\n          var nodeId = item[idProperty].split(pathSeparator);\n          var idInNodes = nodeId.splice(nodeId.length - 1, 1);\n          var index = parseInt(idInNodes);\n          parentNodes.splice(index, 0, value[0]);\n          counter++;\n        }\n      }\n\n      if (expandedNodes && expandedNodes[itemId]) {\n        if (Array.isArray(itemNodes)) {\n          computeData(itemNodes, idSelected, destinationId, result, item);\n        }\n      }\n    }\n\n    return result;\n  };\n\n  var computedData = computeData(dataArray, selectedPath, destinationPath);\n  var updatedData = updateTreeDataIds(computedData, config);\n  return updatedData;\n};\n\nvar updateTreeData = function updateTreeData(props, _ref) {\n  var selectedPath = _ref.selectedPath,\n      destinationPath = _ref.destinationPath;\n  var originalData = props.originalData || [];\n  var config = {\n    idProperty: props.idProperty,\n    nodesName: props.nodesProperty,\n    pathSeparator: props.nodePathSeparator,\n    expandedNodes: props.computedExpandedNodes,\n    generateIdFromPath: props.generateIdFromPath,\n    selectedPath: selectedPath,\n    destinationPath: destinationPath\n  };\n  computeTreeData(originalData, config);\n};\n\nvar _default = updateTreeData;\nexports.default = _default;","map":{"version":3,"sources":["/Users/sungjaejoo/Desktop/리액트/인터로거/ILP-main/node_modules/@inovua/reactdatagrid-enterprise/plugins/tree/tree/updateTreeData.js"],"names":["Object","defineProperty","exports","value","default","updateTreeDataIds","data","config","idProperty","nodesName","updateIds","dataArr","i","length","item","itemNodes","Array","isArray","computeTreeData","dataArray","pathSeparator","expandedNodes","generateIdFromPath","selectedPath","destinationPath","counter","computeData","idSelected","destinationId","result","arguments","undefined","parentNode","initialIdSelected","itemId","concat","parentNodeId","path","push","parentNodes","splice","nodeId","split","idInNodes","index","parseInt","computedData","updatedData","updateTreeData","props","_ref","originalData","nodesProperty","nodePathSeparator","computedExpandedNodes","_default"],"mappings":"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","sourcesContent":["/**\n * Copyright © INOVUA TRADING.\n *\n * This source code is licensed under the Commercial License found in the\n * LICENSE file in the root directory of this source tree.\n */\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar updateTreeDataIds = function updateTreeDataIds(data, config) {\n  var idProperty = config.idProperty;\n  var nodesName = config.nodesName;\n\n  var updateIds = function updateIds(dataArr) {\n    for (var i = 0; i < dataArr.length; i++) {\n      var item = dataArr[i];\n\n      if (!item) {\n        continue;\n      }\n\n      var itemNodes = item[nodesName];\n      item[idProperty] = i + 1;\n\n      if (Array.isArray(itemNodes)) {\n        updateIds(itemNodes);\n      }\n    }\n  };\n\n  updateIds(data);\n  return data;\n};\n\nvar computeTreeData = function computeTreeData(dataArray, config) {\n  var idProperty = config.idProperty;\n  var nodesName = config.nodesName;\n  var pathSeparator = config.pathSeparator;\n  var expandedNodes = config.expandedNodes;\n  var generateIdFromPath = config.generateIdFromPath;\n  var selectedPath = config.selectedPath;\n  var destinationPath = config.destinationPath;\n  var value = [];\n  var counter = 0;\n\n  var computeData = function computeData(data, idSelected, destinationId) {\n    var result = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\n    var parentNode = arguments.length > 4 ? arguments[4] : undefined;\n    var initialIdSelected = '';\n\n    for (var i = 0; i < data.length; i++) {\n      if (initialIdSelected === '') {\n        initialIdSelected = idSelected;\n      }\n\n      if (counter === 2) {\n        break;\n      }\n\n      var item = data[i];\n\n      if (!item) {\n        continue;\n      }\n\n      var itemId = \"\".concat(item[idProperty]);\n      var itemNodes = item[nodesName];\n      var parentNodeId = parentNode ? \"\".concat(parentNode[idProperty]) : undefined;\n      var path = parentNode ? \"\".concat(parentNodeId).concat(pathSeparator).concat(item[idProperty]) : \"\".concat(item[idProperty]);\n\n      if (generateIdFromPath) {\n        item[idProperty] = path;\n      }\n\n      if (parentNode === undefined) {\n        result.push(item);\n      } else {\n        var parentNodes = parentNode[nodesName];\n\n        if (path === initialIdSelected) {\n          value.push(item);\n          parentNodes.splice(i, 1);\n          counter++;\n        }\n\n        if (path === destinationId) {\n          var nodeId = item[idProperty].split(pathSeparator);\n          var idInNodes = nodeId.splice(nodeId.length - 1, 1);\n          var index = parseInt(idInNodes);\n          parentNodes.splice(index, 0, value[0]);\n          counter++;\n        }\n      }\n\n      if (expandedNodes && expandedNodes[itemId]) {\n        if (Array.isArray(itemNodes)) {\n          computeData(itemNodes, idSelected, destinationId, result, item);\n        }\n      }\n    }\n\n    return result;\n  };\n\n  var computedData = computeData(dataArray, selectedPath, destinationPath);\n  var updatedData = updateTreeDataIds(computedData, config);\n  return updatedData;\n};\n\nvar updateTreeData = function updateTreeData(props, _ref) {\n  var selectedPath = _ref.selectedPath,\n      destinationPath = _ref.destinationPath;\n  var originalData = props.originalData || [];\n  var config = {\n    idProperty: props.idProperty,\n    nodesName: props.nodesProperty,\n    pathSeparator: props.nodePathSeparator,\n    expandedNodes: props.computedExpandedNodes,\n    generateIdFromPath: props.generateIdFromPath,\n    selectedPath: selectedPath,\n    destinationPath: destinationPath\n  };\n  computeTreeData(originalData, config);\n};\n\nvar _default = updateTreeData;\nexports.default = _default;"]},"metadata":{},"sourceType":"script"}