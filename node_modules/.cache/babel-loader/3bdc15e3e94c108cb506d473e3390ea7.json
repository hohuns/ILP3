{"ast":null,"code":"/**\n * Copyright Â© INOVUA TRADING.\n *\n * This source code is licensed under the Commercial License found in the\n * LICENSE file in the root directory of this source tree.\n */\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _react = require(\"react\");\n\nvar _useProperty5 = _interopRequireDefault(require(\"@inovua/reactdatagrid-community/hooks/useProperty\"));\n\nvar _batchUpdate = _interopRequireDefault(require(\"@inovua/reactdatagrid-community/utils/batchUpdate\"));\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      (0, _defineProperty2.default)(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nvar EXPANDABLE_NODE_INFO = {};\nvar EMPTY_OBJECT = {};\n\nvar isNodeExpandableAt_FromProps = function isNodeExpandableAt_FromProps(computedPropsRef, rowIndex) {\n  var computedProps = computedPropsRef.current;\n\n  if (!computedProps) {\n    return false;\n  }\n\n  var data = computedProps.getItemAt(rowIndex);\n\n  if (!data) {\n    return false;\n  }\n\n  if (data.__group) {\n    return false;\n  }\n\n  if (data.__nodeProps && data.__nodeProps.leafNode) {\n    return false;\n  }\n\n  var id = computedProps.getItemId(data);\n  var initialProps = computedProps.initialProps;\n\n  if (initialProps.unexpandableNodes && initialProps.unexpandableNodes[id]) {\n    return false;\n  }\n\n  if (!initialProps.isNodeExpandable) {\n    return true;\n  }\n\n  EXPANDABLE_NODE_INFO.id = id;\n  EXPANDABLE_NODE_INFO.data = data;\n  EXPANDABLE_NODE_INFO.rowIndex = rowIndex;\n  EXPANDABLE_NODE_INFO.node = data;\n  EXPANDABLE_NODE_INFO.nodeProps = data.__nodeProps;\n  return initialProps.isNodeExpandable(EXPANDABLE_NODE_INFO);\n};\n\nvar loadNodeAsync_FromProps = function loadNodeAsync_FromProps(computedPropsRef, dataOrIndex, callback) {\n  var computedProps = computedPropsRef.current;\n\n  if (!computedProps) {\n    return;\n  }\n\n  var data = typeof dataOrIndex === 'number' ? computedProps.getItemAt(dataOrIndex) : dataOrIndex;\n  var nodeId = computedProps.getItemId(data);\n  var nodeCache = computedProps.getNodeCache();\n  var once = !!computedProps.initialProps.loadNodeOnce;\n  var loadFn = computedProps.computedLoadNode;\n\n  if (!loadFn && callback) {\n    callback();\n    return;\n  }\n\n  if (once && nodeCache && nodeCache[nodeId] != null && nodeCache[nodeId][computedProps.initialProps.nodesProperty] !== undefined) {\n    if (callback) {\n      callback();\n    }\n\n    return;\n  }\n\n  var loadingNodes = _objectSpread({}, computedProps.computedLoadingNodes);\n\n  var result = loadFn({\n    node: data,\n    nodeProps: data.__nodeProps\n  });\n\n  if (Array.isArray(result)) {\n    computedProps.appendCacheForNode(nodeId, (0, _defineProperty2.default)({}, computedProps.initialProps.nodesProperty, result));\n\n    if (callback) {\n      callback();\n    }\n  } else {\n    loadingNodes[nodeId] = true;\n    computedProps.setLoadingNodes(loadingNodes);\n\n    if (callback) {\n      callback();\n    }\n  }\n\n  if (typeof result.then === 'function') {\n    result.then(function (nodes) {\n      var computedProps = computedPropsRef.current;\n\n      if (!computedProps) {\n        return;\n      }\n\n      var loadingNodes = _objectSpread({}, computedProps.computedLoadingNodes);\n\n      delete loadingNodes[nodeId];\n      computedProps.setLoadingNodes(loadingNodes);\n      computedProps.appendCacheForNode(nodeId, (0, _defineProperty2.default)({}, computedProps.initialProps.nodesProperty, nodes));\n    });\n  }\n};\n\nvar useTreeColumn = function useTreeColumn(props, computedProps, computedPropsRef) {\n  var computedTreeEnabled = props.treeEnabled || !!props.treeColumn;\n\n  var _useProperty = (0, _useProperty5.default)(props, 'expandedNodes', undefined, {\n    onChange: function onChange(expandedNodes) {\n      var fn = computedProps.initialProps.onExpandedNodesChange;\n\n      if (fn) {\n        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n          args[_key - 1] = arguments[_key];\n        }\n\n        fn.apply(void 0, [{\n          expandedNodes: expandedNodes\n        }].concat(args));\n      }\n    }\n  }),\n      _useProperty2 = (0, _slicedToArray2.default)(_useProperty, 2),\n      expandedNodes = _useProperty2[0],\n      doSetExpandedNodes = _useProperty2[1];\n\n  var isNodeExpandableAt = function isNodeExpandableAt(index) {\n    return isNodeExpandableAt_FromProps(computedPropsRef, index);\n  };\n\n  var setExpandedNodes = function setExpandedNodes(expandedNodes, collapsedNodes, cfg) {\n    cfg = cfg || {};\n    var _cfg = cfg,\n        id = _cfg.id,\n        data = _cfg.data,\n        expanded = _cfg.expanded;\n    var index;\n    var nodeProps;\n    var computedProps = computedPropsRef.current;\n\n    if (!computedProps) {\n      return;\n    }\n\n    var initialProps = computedProps.initialProps;\n\n    if (data) {\n      nodeProps = data.__nodeProps;\n      index = computedProps.dataIndexMap[id];\n\n      if (!expanded) {\n        if (initialProps.onNodeCollapse && initialProps.onNodeCollapse({\n          nodeProps: nodeProps,\n          node: data,\n          data: data,\n          id: id,\n          index: index\n        }) === false) {\n          return;\n        }\n      } else {\n        if (!isNodeExpandableAt(index)) {\n          return;\n        }\n\n        if (initialProps.onNodeExpand && initialProps.onNodeExpand({\n          nodeProps: nodeProps,\n          node: data,\n          data: data,\n          id: id,\n          index: index\n        }) === false) {\n          return;\n        }\n      }\n\n      if (initialProps.onNodeExpandChange && initialProps.onNodeExpandChange({\n        expandedNodes: expandedNodes,\n        id: id,\n        index: index,\n        data: data,\n        nodeProps: nodeProps,\n        node: data,\n        nodeExpanded: expanded\n      }) === false) {\n        return;\n      }\n    }\n\n    if (initialProps.onExpandedNodesChange) {\n      initialProps.onExpandedNodesChange({\n        expandedNodes: expandedNodes,\n        nodeExpanded: expanded,\n        nodeProps: nodeProps,\n        data: data,\n        id: id,\n        index: index\n      });\n    }\n\n    if (expandedNodes) {\n      doSetExpandedNodes(expandedNodes);\n    }\n  };\n\n  var _useProperty3 = (0, _useProperty5.default)(props, 'nodeCache'),\n      _useProperty4 = (0, _slicedToArray2.default)(_useProperty3, 2),\n      nodeCache = _useProperty4[0],\n      doSetNodeCache = _useProperty4[1];\n\n  var _useState = (0, _react.useState)({}),\n      _useState2 = (0, _slicedToArray2.default)(_useState, 2),\n      loadingNodes = _useState2[0],\n      setLoadingNodes = _useState2[1];\n\n  var collapsingNodesRef = (0, _react.useRef)({});\n\n  var isNodeExpanded = function isNodeExpanded(data) {\n    var computedProps = computedPropsRef.current;\n\n    if (!computedProps) {\n      return false;\n    }\n\n    if (data == null) {\n      return false;\n    }\n\n    var index;\n\n    if (typeof data == 'number') {\n      index = data;\n      data = computedProps.getItemAt(index);\n    }\n\n    var expandedNodes = computedProps.computedExpandedNodes;\n    var id = computedProps.getItemId(data);\n\n    if (!expandedNodes) {\n      return false;\n    }\n\n    return !!expandedNodes[id];\n  };\n\n  var getExpandedNodes = function getExpandedNodes() {\n    return computedPropsRef.current.computedExpandedNodes;\n  };\n\n  var loadNodeAsync = (0, _react.useCallback)(function (data, callback) {\n    return loadNodeAsync_FromProps(computedPropsRef, data, callback);\n  }, []);\n\n  var clearNodeChildrenCache = function clearNodeChildrenCache(nodeId) {\n    var recursive = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    var treeCache = arguments.length > 2 ? arguments[2] : undefined;\n    var clearedMap = arguments.length > 3 ? arguments[3] : undefined;\n    var computedProps = computedPropsRef.current;\n    clearedMap = clearedMap || {};\n\n    if (!computedProps) {\n      return clearedMap;\n    }\n\n    var isRoot = !treeCache;\n    treeCache = treeCache || _objectSpread({}, getNodeCache());\n    var data = computedProps.dataMap[nodeId];\n\n    if (!data) {\n      return clearedMap;\n    }\n\n    var nodeCache = treeCache[nodeId];\n    var childNodes = nodeCache != null ? nodeCache[computedProps.nodesProperty] : data[computedProps.nodesProperty];\n\n    if (childNodes && recursive && computedProps.initialProps.collapseChildrenOnAsyncNodeCollapse) {\n      var _computedProps$initia = computedProps.initialProps,\n          generateIdFromPath = _computedProps$initia.generateIdFromPath,\n          nodePathSeparator = _computedProps$initia.nodePathSeparator;\n      childNodes.forEach(function (childNode) {\n        if (!childNode) {\n          return;\n        }\n\n        var childId = computedProps.getItemId(childNode);\n\n        if (childNode.__nodeProps) {\n          childId = childNode.__nodeProps.key;\n        } else if (generateIdFromPath) {\n          childId = \"\".concat(nodeId).concat(nodePathSeparator).concat(childId);\n        }\n\n        clearedMap[childId] = true;\n        computedProps.clearNodeChildrenCache(childId, recursive, treeCache, clearedMap);\n      });\n    }\n\n    treeCache[nodeId] = _objectSpread(_objectSpread({}, nodeCache), {}, (0, _defineProperty2.default)({}, computedProps.initialProps.nodesProperty, data.__nodeProps ? data.__nodeProps.initialNodes : data[computedProps.initialProps.nodesProperty]));\n\n    if (isRoot) {\n      setNodeCache(treeCache, {\n        nodeId: nodeId,\n        node: data\n      });\n      return clearedMap;\n    }\n\n    return clearedMap;\n  };\n\n  var setNodeExpandedById = function setNodeExpandedById(id, expanded) {\n    var config = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    var computedProps = computedPropsRef.current;\n\n    if (!computedProps) {\n      return;\n    }\n\n    if (!computedProps.dataMap) {\n      return;\n    }\n\n    var collapsingNodesRef = computedProps.collapsingNodesRef;\n    var data = computedProps.dataMap[id];\n\n    if (!data) {\n      return;\n    }\n\n    if (data.__nodeProps && data.__nodeProps.leafNode) {\n      return;\n    }\n\n    if (data.__nodeProps && data.__nodeProps.expanded === expanded && config.force !== true) {\n      return;\n    }\n\n    var treeCache = computedProps.computedNodeCache;\n    var clearedCacheIds;\n    var __collapsingNodes = collapsingNodesRef.current;\n    var queue = (0, _batchUpdate.default)();\n\n    var doExpandOrCollapse = function doExpandOrCollapse() {\n      var expandedNodes = _objectSpread({}, getExpandedNodes());\n\n      if (!expanded) {\n        var recursive = !!computedProps.loadNode;\n        delete expandedNodes[id];\n\n        if (__collapsingNodes && __collapsingNodes[id]) {\n          delete __collapsingNodes[id];\n        }\n\n        if (recursive && clearedCacheIds && computedProps.collapseChildrenOnAsyncNodeCollapse) {\n          for (var _id in clearedCacheIds) {\n            delete expandedNodes[_id];\n          }\n        }\n\n        if (computedProps.collapseChildrenRecursive) {\n          for (var childId in expandedNodes) {\n            if (childId.indexOf(id) === 0) {\n              delete expandedNodes[childId];\n            }\n          }\n        }\n      } else {\n        expandedNodes[id] = true;\n      }\n\n      setExpandedNodes(expandedNodes, undefined, {\n        data: data,\n        expanded: expanded,\n        id: id\n      });\n    };\n\n    if (!expanded) {\n      collapsingNodesRef.current = __collapsingNodes || {};\n      collapsingNodesRef.current[id] = true;\n    }\n\n    if (!expanded) {\n      queue(function () {\n        var nodeCache = treeCache ? treeCache[id] : undefined;\n\n        if (nodeCache !== undefined && !computedProps.initialProps.loadNodeOnce) {\n          var recursive = !!computedProps.initialProps.loadNode;\n          clearedCacheIds = clearNodeChildrenCache(id, recursive, treeCache);\n          doExpandOrCollapse();\n        } else {\n          doExpandOrCollapse();\n        }\n      });\n      queue.commit();\n      return;\n    }\n\n    queue(function () {\n      if (expanded && data.__nodeProps && data.__nodeProps.asyncNode) {\n        loadNodeAsync(data, doExpandOrCollapse);\n      } else {\n        doExpandOrCollapse();\n      }\n    });\n    queue.commit();\n  };\n\n  var setNodeExpandedAt = function setNodeExpandedAt(index, expanded) {\n    var data = computedProps.getItemAt(index);\n\n    if (!data) {\n      return;\n    }\n\n    var id = computedProps.getItemId(data);\n    return setNodeExpandedById(id, expanded);\n  };\n\n  var toggleNodeExpand = (0, _react.useCallback)(function (dataOrIndex) {\n    var computedProps = computedPropsRef.current;\n\n    if (!computedProps) {\n      return;\n    }\n\n    var data = typeof dataOrIndex === 'number' ? computedProps.getItemAt(dataOrIndex) : dataOrIndex;\n\n    if (!data) {\n      return;\n    }\n\n    var id = computedProps.getItemId(data);\n    var expanded = isNodeExpanded(data);\n\n    if (typeof dataOrIndex === 'number') {\n      computedProps.setActiveIndex(dataOrIndex);\n    } else {\n      var rowIndex = computedProps.getRowIndexById(id);\n      computedProps.setActiveIndex(rowIndex);\n    }\n\n    return setNodeExpandedById(id, !expanded);\n  }, []);\n  var getNodeCache = (0, _react.useCallback)(function () {\n    var computedProps = computedPropsRef.current;\n\n    if (!computedProps) {\n      return {};\n    }\n\n    return computedProps.computedNodeCache || {};\n  }, []);\n\n  var appendCacheForNode = function appendCacheForNode(nodeId, node) {\n    var computedProps = computedPropsRef.current;\n\n    if (!computedProps) {\n      return;\n    }\n\n    var nodeCache = _objectSpread({}, getNodeCache());\n\n    if (node === undefined) {\n      delete nodeCache[nodeId];\n    } else {\n      nodeCache[nodeId] = _objectSpread(_objectSpread({}, nodeCache[nodeId]), node);\n    }\n\n    computedProps.setNodeCache(nodeCache, {\n      nodeId: nodeId,\n      node: node\n    });\n  };\n\n  var setNodeCache = function setNodeCache(nodeCache, info) {\n    var computedProps = computedPropsRef.current;\n\n    if (!computedProps) {\n      return;\n    }\n\n    if (computedProps.initialProps.onNodeCache) {\n      computedProps.initialProps.onNodeCache(nodeCache, info);\n    }\n\n    doSetNodeCache(nodeCache);\n  };\n\n  var computedExpandedNodes = expandedNodes;\n  var computedNodeCache = nodeCache;\n  var computedLoadingNodes = loadingNodes;\n  var once = !!computedProps.initialProps.loadNodeOnce;\n  var computedLoadNode = once ? computedProps.initialProps.loadNodeOnce : computedProps.initialProps.loadNode;\n\n  var computeAllNodes = function computeAllNodes(dataArray) {\n    var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : EMPTY_OBJECT;\n    var parentNode = arguments.length > 2 ? arguments[2] : undefined;\n    var result = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    var idProperty = config.idProperty;\n    var nodesName = config.nodesName;\n    var pathSeparator = config.pathSeparator;\n    var generateIdFromPath = computedProps.generateIdFromPath;\n    dataArray.forEach(function (item) {\n      if (item) {\n        var itemId = item[idProperty];\n        var itemNodes = item[nodesName];\n        var parentNodeId = parentNode ? parentNode[idProperty] : undefined;\n        var path = parentNode ? \"\".concat(parentNodeId).concat(pathSeparator).concat(itemId) : \"\".concat(itemId);\n\n        if (generateIdFromPath) {\n          item[idProperty] = path;\n        }\n\n        result[path] = true;\n\n        if (Array.isArray(itemNodes)) {\n          computeAllNodes(itemNodes, config, item, result);\n        }\n      }\n    });\n    return result;\n  };\n\n  var collapseAllTreeNodes = function collapseAllTreeNodes() {\n    var computedProps = computedPropsRef.current;\n\n    if (!computedProps) {\n      return;\n    }\n\n    setExpandedNodes({});\n  };\n\n  var expandAllTreeNodes = function expandAllTreeNodes() {\n    var computedProps = computedPropsRef.current;\n\n    if (!computedProps) {\n      return;\n    }\n\n    var config = {\n      idProperty: !computedProps.compoundIdProperty ? computedProps.idProperty : 'id',\n      nodesName: computedProps.nodesProperty || 'nodes',\n      pathSeparator: computedProps.nodePathSeparator || '/',\n      generateIdFromPath: computedProps.generateIdFromPath\n    };\n    var originalData = JSON.stringify(computedProps.originalData || []);\n    var cloneOriginalData = (0, _toConsumableArray2.default)(JSON.parse(originalData));\n    var allNodes = computeAllNodes(cloneOriginalData, config);\n    setExpandedNodes(allNodes);\n  };\n\n  return {\n    clearNodeChildrenCache: clearNodeChildrenCache,\n    toggleNodeExpand: toggleNodeExpand,\n    loadNodeAsync: loadNodeAsync,\n    collapsingNodesRef: collapsingNodesRef,\n    setLoadingNodes: setLoadingNodes,\n    computedTreeEnabled: computedTreeEnabled,\n    computedLoadNode: computedLoadNode,\n    computedExpandedNodes: computedExpandedNodes,\n    computedLoadingNodes: computedLoadingNodes,\n    computedNodeCache: computedNodeCache,\n    getNodeCache: getNodeCache,\n    setNodeCache: setNodeCache,\n    appendCacheForNode: appendCacheForNode,\n    isNodeExpandableAt: isNodeExpandableAt,\n    isNodeExpanded: isNodeExpanded,\n    setNodeExpandedAt: setNodeExpandedAt,\n    setNodeExpandedById: setNodeExpandedById,\n    collapseAllTreeNodes: collapseAllTreeNodes,\n    expandAllTreeNodes: expandAllTreeNodes\n  };\n};\n\nvar _default = useTreeColumn;\nexports.default = _default;","map":{"version":3,"sources":["/Users/sungjaejoo/Desktop/ILP-main/node_modules/@inovua/reactdatagrid-enterprise/plugins/tree/useTreeColumn/index.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","default","_toConsumableArray2","_slicedToArray2","_defineProperty2","_react","_useProperty5","_batchUpdate","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","getOwnPropertyDescriptors","defineProperties","EXPANDABLE_NODE_INFO","EMPTY_OBJECT","isNodeExpandableAt_FromProps","computedPropsRef","rowIndex","computedProps","current","data","getItemAt","__group","__nodeProps","leafNode","id","getItemId","initialProps","unexpandableNodes","isNodeExpandable","node","nodeProps","loadNodeAsync_FromProps","dataOrIndex","callback","nodeId","nodeCache","getNodeCache","once","loadNodeOnce","loadFn","computedLoadNode","nodesProperty","undefined","loadingNodes","computedLoadingNodes","result","Array","isArray","appendCacheForNode","setLoadingNodes","then","nodes","useTreeColumn","props","computedTreeEnabled","treeEnabled","treeColumn","_useProperty","onChange","expandedNodes","fn","onExpandedNodesChange","_len","args","_key","concat","_useProperty2","doSetExpandedNodes","isNodeExpandableAt","index","setExpandedNodes","collapsedNodes","cfg","_cfg","expanded","dataIndexMap","onNodeCollapse","onNodeExpand","onNodeExpandChange","nodeExpanded","_useProperty3","_useProperty4","doSetNodeCache","_useState","useState","_useState2","collapsingNodesRef","useRef","isNodeExpanded","computedExpandedNodes","getExpandedNodes","loadNodeAsync","useCallback","clearNodeChildrenCache","recursive","treeCache","clearedMap","isRoot","dataMap","childNodes","collapseChildrenOnAsyncNodeCollapse","_computedProps$initia","generateIdFromPath","nodePathSeparator","childNode","childId","initialNodes","setNodeCache","setNodeExpandedById","config","force","computedNodeCache","clearedCacheIds","__collapsingNodes","queue","doExpandOrCollapse","loadNode","_id","collapseChildrenRecursive","indexOf","commit","asyncNode","setNodeExpandedAt","toggleNodeExpand","setActiveIndex","getRowIndexById","info","onNodeCache","computeAllNodes","dataArray","parentNode","idProperty","nodesName","pathSeparator","item","itemId","itemNodes","parentNodeId","path","collapseAllTreeNodes","expandAllTreeNodes","compoundIdProperty","originalData","JSON","stringify","cloneOriginalData","parse","allNodes","_default"],"mappings":"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","sourcesContent":["/**\n * Copyright Â© INOVUA TRADING.\n *\n * This source code is licensed under the Commercial License found in the\n * LICENSE file in the root directory of this source tree.\n */\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _react = require(\"react\");\n\nvar _useProperty5 = _interopRequireDefault(require(\"@inovua/reactdatagrid-community/hooks/useProperty\"));\n\nvar _batchUpdate = _interopRequireDefault(require(\"@inovua/reactdatagrid-community/utils/batchUpdate\"));\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nvar EXPANDABLE_NODE_INFO = {};\nvar EMPTY_OBJECT = {};\n\nvar isNodeExpandableAt_FromProps = function isNodeExpandableAt_FromProps(computedPropsRef, rowIndex) {\n  var computedProps = computedPropsRef.current;\n\n  if (!computedProps) {\n    return false;\n  }\n\n  var data = computedProps.getItemAt(rowIndex);\n\n  if (!data) {\n    return false;\n  }\n\n  if (data.__group) {\n    return false;\n  }\n\n  if (data.__nodeProps && data.__nodeProps.leafNode) {\n    return false;\n  }\n\n  var id = computedProps.getItemId(data);\n  var initialProps = computedProps.initialProps;\n\n  if (initialProps.unexpandableNodes && initialProps.unexpandableNodes[id]) {\n    return false;\n  }\n\n  if (!initialProps.isNodeExpandable) {\n    return true;\n  }\n\n  EXPANDABLE_NODE_INFO.id = id;\n  EXPANDABLE_NODE_INFO.data = data;\n  EXPANDABLE_NODE_INFO.rowIndex = rowIndex;\n  EXPANDABLE_NODE_INFO.node = data;\n  EXPANDABLE_NODE_INFO.nodeProps = data.__nodeProps;\n  return initialProps.isNodeExpandable(EXPANDABLE_NODE_INFO);\n};\n\nvar loadNodeAsync_FromProps = function loadNodeAsync_FromProps(computedPropsRef, dataOrIndex, callback) {\n  var computedProps = computedPropsRef.current;\n\n  if (!computedProps) {\n    return;\n  }\n\n  var data = typeof dataOrIndex === 'number' ? computedProps.getItemAt(dataOrIndex) : dataOrIndex;\n  var nodeId = computedProps.getItemId(data);\n  var nodeCache = computedProps.getNodeCache();\n  var once = !!computedProps.initialProps.loadNodeOnce;\n  var loadFn = computedProps.computedLoadNode;\n\n  if (!loadFn && callback) {\n    callback();\n    return;\n  }\n\n  if (once && nodeCache && nodeCache[nodeId] != null && nodeCache[nodeId][computedProps.initialProps.nodesProperty] !== undefined) {\n    if (callback) {\n      callback();\n    }\n\n    return;\n  }\n\n  var loadingNodes = _objectSpread({}, computedProps.computedLoadingNodes);\n\n  var result = loadFn({\n    node: data,\n    nodeProps: data.__nodeProps\n  });\n\n  if (Array.isArray(result)) {\n    computedProps.appendCacheForNode(nodeId, (0, _defineProperty2.default)({}, computedProps.initialProps.nodesProperty, result));\n\n    if (callback) {\n      callback();\n    }\n  } else {\n    loadingNodes[nodeId] = true;\n    computedProps.setLoadingNodes(loadingNodes);\n\n    if (callback) {\n      callback();\n    }\n  }\n\n  if (typeof result.then === 'function') {\n    result.then(function (nodes) {\n      var computedProps = computedPropsRef.current;\n\n      if (!computedProps) {\n        return;\n      }\n\n      var loadingNodes = _objectSpread({}, computedProps.computedLoadingNodes);\n\n      delete loadingNodes[nodeId];\n      computedProps.setLoadingNodes(loadingNodes);\n      computedProps.appendCacheForNode(nodeId, (0, _defineProperty2.default)({}, computedProps.initialProps.nodesProperty, nodes));\n    });\n  }\n};\n\nvar useTreeColumn = function useTreeColumn(props, computedProps, computedPropsRef) {\n  var computedTreeEnabled = props.treeEnabled || !!props.treeColumn;\n\n  var _useProperty = (0, _useProperty5.default)(props, 'expandedNodes', undefined, {\n    onChange: function onChange(expandedNodes) {\n      var fn = computedProps.initialProps.onExpandedNodesChange;\n\n      if (fn) {\n        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n          args[_key - 1] = arguments[_key];\n        }\n\n        fn.apply(void 0, [{\n          expandedNodes: expandedNodes\n        }].concat(args));\n      }\n    }\n  }),\n      _useProperty2 = (0, _slicedToArray2.default)(_useProperty, 2),\n      expandedNodes = _useProperty2[0],\n      doSetExpandedNodes = _useProperty2[1];\n\n  var isNodeExpandableAt = function isNodeExpandableAt(index) {\n    return isNodeExpandableAt_FromProps(computedPropsRef, index);\n  };\n\n  var setExpandedNodes = function setExpandedNodes(expandedNodes, collapsedNodes, cfg) {\n    cfg = cfg || {};\n    var _cfg = cfg,\n        id = _cfg.id,\n        data = _cfg.data,\n        expanded = _cfg.expanded;\n    var index;\n    var nodeProps;\n    var computedProps = computedPropsRef.current;\n\n    if (!computedProps) {\n      return;\n    }\n\n    var initialProps = computedProps.initialProps;\n\n    if (data) {\n      nodeProps = data.__nodeProps;\n      index = computedProps.dataIndexMap[id];\n\n      if (!expanded) {\n        if (initialProps.onNodeCollapse && initialProps.onNodeCollapse({\n          nodeProps: nodeProps,\n          node: data,\n          data: data,\n          id: id,\n          index: index\n        }) === false) {\n          return;\n        }\n      } else {\n        if (!isNodeExpandableAt(index)) {\n          return;\n        }\n\n        if (initialProps.onNodeExpand && initialProps.onNodeExpand({\n          nodeProps: nodeProps,\n          node: data,\n          data: data,\n          id: id,\n          index: index\n        }) === false) {\n          return;\n        }\n      }\n\n      if (initialProps.onNodeExpandChange && initialProps.onNodeExpandChange({\n        expandedNodes: expandedNodes,\n        id: id,\n        index: index,\n        data: data,\n        nodeProps: nodeProps,\n        node: data,\n        nodeExpanded: expanded\n      }) === false) {\n        return;\n      }\n    }\n\n    if (initialProps.onExpandedNodesChange) {\n      initialProps.onExpandedNodesChange({\n        expandedNodes: expandedNodes,\n        nodeExpanded: expanded,\n        nodeProps: nodeProps,\n        data: data,\n        id: id,\n        index: index\n      });\n    }\n\n    if (expandedNodes) {\n      doSetExpandedNodes(expandedNodes);\n    }\n  };\n\n  var _useProperty3 = (0, _useProperty5.default)(props, 'nodeCache'),\n      _useProperty4 = (0, _slicedToArray2.default)(_useProperty3, 2),\n      nodeCache = _useProperty4[0],\n      doSetNodeCache = _useProperty4[1];\n\n  var _useState = (0, _react.useState)({}),\n      _useState2 = (0, _slicedToArray2.default)(_useState, 2),\n      loadingNodes = _useState2[0],\n      setLoadingNodes = _useState2[1];\n\n  var collapsingNodesRef = (0, _react.useRef)({});\n\n  var isNodeExpanded = function isNodeExpanded(data) {\n    var computedProps = computedPropsRef.current;\n\n    if (!computedProps) {\n      return false;\n    }\n\n    if (data == null) {\n      return false;\n    }\n\n    var index;\n\n    if (typeof data == 'number') {\n      index = data;\n      data = computedProps.getItemAt(index);\n    }\n\n    var expandedNodes = computedProps.computedExpandedNodes;\n    var id = computedProps.getItemId(data);\n\n    if (!expandedNodes) {\n      return false;\n    }\n\n    return !!expandedNodes[id];\n  };\n\n  var getExpandedNodes = function getExpandedNodes() {\n    return computedPropsRef.current.computedExpandedNodes;\n  };\n\n  var loadNodeAsync = (0, _react.useCallback)(function (data, callback) {\n    return loadNodeAsync_FromProps(computedPropsRef, data, callback);\n  }, []);\n\n  var clearNodeChildrenCache = function clearNodeChildrenCache(nodeId) {\n    var recursive = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    var treeCache = arguments.length > 2 ? arguments[2] : undefined;\n    var clearedMap = arguments.length > 3 ? arguments[3] : undefined;\n    var computedProps = computedPropsRef.current;\n    clearedMap = clearedMap || {};\n\n    if (!computedProps) {\n      return clearedMap;\n    }\n\n    var isRoot = !treeCache;\n    treeCache = treeCache || _objectSpread({}, getNodeCache());\n    var data = computedProps.dataMap[nodeId];\n\n    if (!data) {\n      return clearedMap;\n    }\n\n    var nodeCache = treeCache[nodeId];\n    var childNodes = nodeCache != null ? nodeCache[computedProps.nodesProperty] : data[computedProps.nodesProperty];\n\n    if (childNodes && recursive && computedProps.initialProps.collapseChildrenOnAsyncNodeCollapse) {\n      var _computedProps$initia = computedProps.initialProps,\n          generateIdFromPath = _computedProps$initia.generateIdFromPath,\n          nodePathSeparator = _computedProps$initia.nodePathSeparator;\n      childNodes.forEach(function (childNode) {\n        if (!childNode) {\n          return;\n        }\n\n        var childId = computedProps.getItemId(childNode);\n\n        if (childNode.__nodeProps) {\n          childId = childNode.__nodeProps.key;\n        } else if (generateIdFromPath) {\n          childId = \"\".concat(nodeId).concat(nodePathSeparator).concat(childId);\n        }\n\n        clearedMap[childId] = true;\n        computedProps.clearNodeChildrenCache(childId, recursive, treeCache, clearedMap);\n      });\n    }\n\n    treeCache[nodeId] = _objectSpread(_objectSpread({}, nodeCache), {}, (0, _defineProperty2.default)({}, computedProps.initialProps.nodesProperty, data.__nodeProps ? data.__nodeProps.initialNodes : data[computedProps.initialProps.nodesProperty]));\n\n    if (isRoot) {\n      setNodeCache(treeCache, {\n        nodeId: nodeId,\n        node: data\n      });\n      return clearedMap;\n    }\n\n    return clearedMap;\n  };\n\n  var setNodeExpandedById = function setNodeExpandedById(id, expanded) {\n    var config = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    var computedProps = computedPropsRef.current;\n\n    if (!computedProps) {\n      return;\n    }\n\n    if (!computedProps.dataMap) {\n      return;\n    }\n\n    var collapsingNodesRef = computedProps.collapsingNodesRef;\n    var data = computedProps.dataMap[id];\n\n    if (!data) {\n      return;\n    }\n\n    if (data.__nodeProps && data.__nodeProps.leafNode) {\n      return;\n    }\n\n    if (data.__nodeProps && data.__nodeProps.expanded === expanded && config.force !== true) {\n      return;\n    }\n\n    var treeCache = computedProps.computedNodeCache;\n    var clearedCacheIds;\n    var __collapsingNodes = collapsingNodesRef.current;\n    var queue = (0, _batchUpdate.default)();\n\n    var doExpandOrCollapse = function doExpandOrCollapse() {\n      var expandedNodes = _objectSpread({}, getExpandedNodes());\n\n      if (!expanded) {\n        var recursive = !!computedProps.loadNode;\n        delete expandedNodes[id];\n\n        if (__collapsingNodes && __collapsingNodes[id]) {\n          delete __collapsingNodes[id];\n        }\n\n        if (recursive && clearedCacheIds && computedProps.collapseChildrenOnAsyncNodeCollapse) {\n          for (var _id in clearedCacheIds) {\n            delete expandedNodes[_id];\n          }\n        }\n\n        if (computedProps.collapseChildrenRecursive) {\n          for (var childId in expandedNodes) {\n            if (childId.indexOf(id) === 0) {\n              delete expandedNodes[childId];\n            }\n          }\n        }\n      } else {\n        expandedNodes[id] = true;\n      }\n\n      setExpandedNodes(expandedNodes, undefined, {\n        data: data,\n        expanded: expanded,\n        id: id\n      });\n    };\n\n    if (!expanded) {\n      collapsingNodesRef.current = __collapsingNodes || {};\n      collapsingNodesRef.current[id] = true;\n    }\n\n    if (!expanded) {\n      queue(function () {\n        var nodeCache = treeCache ? treeCache[id] : undefined;\n\n        if (nodeCache !== undefined && !computedProps.initialProps.loadNodeOnce) {\n          var recursive = !!computedProps.initialProps.loadNode;\n          clearedCacheIds = clearNodeChildrenCache(id, recursive, treeCache);\n          doExpandOrCollapse();\n        } else {\n          doExpandOrCollapse();\n        }\n      });\n      queue.commit();\n      return;\n    }\n\n    queue(function () {\n      if (expanded && data.__nodeProps && data.__nodeProps.asyncNode) {\n        loadNodeAsync(data, doExpandOrCollapse);\n      } else {\n        doExpandOrCollapse();\n      }\n    });\n    queue.commit();\n  };\n\n  var setNodeExpandedAt = function setNodeExpandedAt(index, expanded) {\n    var data = computedProps.getItemAt(index);\n\n    if (!data) {\n      return;\n    }\n\n    var id = computedProps.getItemId(data);\n    return setNodeExpandedById(id, expanded);\n  };\n\n  var toggleNodeExpand = (0, _react.useCallback)(function (dataOrIndex) {\n    var computedProps = computedPropsRef.current;\n\n    if (!computedProps) {\n      return;\n    }\n\n    var data = typeof dataOrIndex === 'number' ? computedProps.getItemAt(dataOrIndex) : dataOrIndex;\n\n    if (!data) {\n      return;\n    }\n\n    var id = computedProps.getItemId(data);\n    var expanded = isNodeExpanded(data);\n\n    if (typeof dataOrIndex === 'number') {\n      computedProps.setActiveIndex(dataOrIndex);\n    } else {\n      var rowIndex = computedProps.getRowIndexById(id);\n      computedProps.setActiveIndex(rowIndex);\n    }\n\n    return setNodeExpandedById(id, !expanded);\n  }, []);\n  var getNodeCache = (0, _react.useCallback)(function () {\n    var computedProps = computedPropsRef.current;\n\n    if (!computedProps) {\n      return {};\n    }\n\n    return computedProps.computedNodeCache || {};\n  }, []);\n\n  var appendCacheForNode = function appendCacheForNode(nodeId, node) {\n    var computedProps = computedPropsRef.current;\n\n    if (!computedProps) {\n      return;\n    }\n\n    var nodeCache = _objectSpread({}, getNodeCache());\n\n    if (node === undefined) {\n      delete nodeCache[nodeId];\n    } else {\n      nodeCache[nodeId] = _objectSpread(_objectSpread({}, nodeCache[nodeId]), node);\n    }\n\n    computedProps.setNodeCache(nodeCache, {\n      nodeId: nodeId,\n      node: node\n    });\n  };\n\n  var setNodeCache = function setNodeCache(nodeCache, info) {\n    var computedProps = computedPropsRef.current;\n\n    if (!computedProps) {\n      return;\n    }\n\n    if (computedProps.initialProps.onNodeCache) {\n      computedProps.initialProps.onNodeCache(nodeCache, info);\n    }\n\n    doSetNodeCache(nodeCache);\n  };\n\n  var computedExpandedNodes = expandedNodes;\n  var computedNodeCache = nodeCache;\n  var computedLoadingNodes = loadingNodes;\n  var once = !!computedProps.initialProps.loadNodeOnce;\n  var computedLoadNode = once ? computedProps.initialProps.loadNodeOnce : computedProps.initialProps.loadNode;\n\n  var computeAllNodes = function computeAllNodes(dataArray) {\n    var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : EMPTY_OBJECT;\n    var parentNode = arguments.length > 2 ? arguments[2] : undefined;\n    var result = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    var idProperty = config.idProperty;\n    var nodesName = config.nodesName;\n    var pathSeparator = config.pathSeparator;\n    var generateIdFromPath = computedProps.generateIdFromPath;\n    dataArray.forEach(function (item) {\n      if (item) {\n        var itemId = item[idProperty];\n        var itemNodes = item[nodesName];\n        var parentNodeId = parentNode ? parentNode[idProperty] : undefined;\n        var path = parentNode ? \"\".concat(parentNodeId).concat(pathSeparator).concat(itemId) : \"\".concat(itemId);\n\n        if (generateIdFromPath) {\n          item[idProperty] = path;\n        }\n\n        result[path] = true;\n\n        if (Array.isArray(itemNodes)) {\n          computeAllNodes(itemNodes, config, item, result);\n        }\n      }\n    });\n    return result;\n  };\n\n  var collapseAllTreeNodes = function collapseAllTreeNodes() {\n    var computedProps = computedPropsRef.current;\n\n    if (!computedProps) {\n      return;\n    }\n\n    setExpandedNodes({});\n  };\n\n  var expandAllTreeNodes = function expandAllTreeNodes() {\n    var computedProps = computedPropsRef.current;\n\n    if (!computedProps) {\n      return;\n    }\n\n    var config = {\n      idProperty: !computedProps.compoundIdProperty ? computedProps.idProperty : 'id',\n      nodesName: computedProps.nodesProperty || 'nodes',\n      pathSeparator: computedProps.nodePathSeparator || '/',\n      generateIdFromPath: computedProps.generateIdFromPath\n    };\n    var originalData = JSON.stringify(computedProps.originalData || []);\n    var cloneOriginalData = (0, _toConsumableArray2.default)(JSON.parse(originalData));\n    var allNodes = computeAllNodes(cloneOriginalData, config);\n    setExpandedNodes(allNodes);\n  };\n\n  return {\n    clearNodeChildrenCache: clearNodeChildrenCache,\n    toggleNodeExpand: toggleNodeExpand,\n    loadNodeAsync: loadNodeAsync,\n    collapsingNodesRef: collapsingNodesRef,\n    setLoadingNodes: setLoadingNodes,\n    computedTreeEnabled: computedTreeEnabled,\n    computedLoadNode: computedLoadNode,\n    computedExpandedNodes: computedExpandedNodes,\n    computedLoadingNodes: computedLoadingNodes,\n    computedNodeCache: computedNodeCache,\n    getNodeCache: getNodeCache,\n    setNodeCache: setNodeCache,\n    appendCacheForNode: appendCacheForNode,\n    isNodeExpandableAt: isNodeExpandableAt,\n    isNodeExpanded: isNodeExpanded,\n    setNodeExpandedAt: setNodeExpandedAt,\n    setNodeExpandedById: setNodeExpandedById,\n    collapseAllTreeNodes: collapseAllTreeNodes,\n    expandAllTreeNodes: expandAllTreeNodes\n  };\n};\n\nvar _default = useTreeColumn;\nexports.default = _default;"]},"metadata":{},"sourceType":"script"}