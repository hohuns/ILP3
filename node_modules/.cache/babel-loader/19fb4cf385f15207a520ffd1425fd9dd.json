{"ast":null,"code":"var _jsxFileName = \"/Users/sungjaejoo/Desktop/\\u1105\\u1175\\u110B\\u1162\\u11A8\\u1110\\u1173/\\u110B\\u1175\\u11AB\\u1110\\u1165\\u1105\\u1169\\u1100\\u1165/ILP-main/src/components/Layout/MainNavigation.tsx\";\nimport { Toolbar, IconButton, Typography, useMediaQuery } from \"@mui/material\";\nimport React, { useEffect, useState } from \"react\";\nimport { Box } from \"@mui/system\";\nimport DrawerComponent from \"./DrawerComponent\";\nimport { useTheme } from \"@mui/material/styles\";\nimport ListIcon from \"@mui/icons-material/List\";\nimport { useAppSelector, useAppDispatch } from \"../../store/hooks\";\nimport { useNavigate } from \"react-router-dom\";\nimport { usersActions } from \"../../store/userSlice\";\n\nconst Navbar = () => {\n  const [openDrawer, setOpenDrawer] = useState(true);\n  const theme = useTheme();\n  const matches = useMediaQuery(theme.breakpoints.down(\"sm\"));\n  const reduxIsLoggedIn = useAppSelector(state => state.isLoggedIn);\n  let navigate = useNavigate();\n  const reduxUser = useAppSelector(state => state.user);\n  const storedLan = localStorage.getItem(\"lan\");\n  const dispatch = useAppDispatch();\n  const reduxLan = useAppSelector(state => state.lan);\n  useEffect(() => {\n    dispatch(usersActions.updateLanguage(storedLan));\n  }, [storedLan]);\n\n  const logoutHandler = () => {\n    dispatch(usersActions.updateIdToken(\"\"));\n    dispatch(usersActions.updateIsLoggedIn(false));\n    dispatch(usersActions.updateUser(\"\"));\n    localStorage.removeItem(\"token\");\n    localStorage.removeItem(\"isLoggedIn\");\n    localStorage.removeItem(\"user\");\n    navigate(\"/login\");\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Box, {\n    sx: {\n      backgroundColor: \"linear-gradient(to left, #3399ff 27%, #9999ff 100%);\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Toolbar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Box, {\n    sx: {\n      display: \"flex\",\n      justifyContent: \"space-between\",\n      width: \"100%\",\n      alignItems: \"center\",\n      padding: \"10px 0px\"\n    },\n    component: \"div\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 11\n    }\n  }, matches && /*#__PURE__*/React.createElement(DrawerComponent, {\n    openDrawer: openDrawer,\n    setOpenDrawer: setOpenDrawer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 15\n    }\n  }), reduxIsLoggedIn && !matches ? /*#__PURE__*/React.createElement(Box, {\n    sx: {\n      display: \"flex\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    sx: {\n      marginRight: \"20px\",\n      cursor: \"pointer\",\n      color: \"white\"\n    },\n    onClick: () => {\n      if (reduxUser === \"Hans\" || reduxUser === \"Sarah\") {\n        navigate(\"/hompageen\");\n      } else if (reduxUser === \"성재\" || reduxUser === \"엄마\" || reduxUser === \"아빠\" || reduxUser === \"은지\") {\n        navigate(\"/hompagekr\");\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 17\n    }\n  }, reduxLan === \"한국어\" ? \"홈\" : \"Home\"), /*#__PURE__*/React.createElement(Typography, {\n    sx: {\n      marginRight: \"20px\",\n      cursor: \"pointer\",\n      color: \"white\"\n    },\n    onClick: () => {\n      navigate(\"/changepassword\");\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 17\n    }\n  }, reduxLan === \"한국어\" ? \"비밀번호 바꾸기\" : \"Change Password\"), /*#__PURE__*/React.createElement(Typography, {\n    sx: {\n      marginRight: \"20px\",\n      cursor: \"pointer\",\n      color: \"white\"\n    },\n    onClick: () => {\n      if (reduxUser === \"Hans\" || reduxUser === \"Sarah\") {\n        navigate(\"/msglogen\");\n      } else if (reduxUser === \"성재\" || reduxUser === \"엄마\" || reduxUser === \"아빠\" || reduxUser === \"은지\") {\n        navigate(\"/msglogkr\");\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 17\n    }\n  }, reduxLan === \"한국어\" ? \"메세지 로그\" : \"Message Log\")) : null, /*#__PURE__*/React.createElement(Box, {\n    sx: {\n      display: \"flex\",\n      justifyContent: \"center\",\n      alignItems: \"center\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 13\n    }\n  }, matches ? /*#__PURE__*/React.createElement(IconButton, {\n    onClick: () => setOpenDrawer(true),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(ListIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 19\n    }\n  })) : !reduxIsLoggedIn ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => navigate(\"/login\"),\n    style: {\n      marginRight: \"20px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 19\n    }\n  }, reduxLan === \"한국어\" ? \"로그인\" : \"LogIn\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => navigate(\"/signin\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 19\n    }\n  }, reduxLan === \"한국어\" ? \"계정 생성\" : \"Register Account\")) :\n  /*#__PURE__*/\n  // <button onClick={() => navigate(\"/updateusername\")}>\n  //   {reduxLan === \"한국어\"\n  //     ? \"ㄹ\"\n  //     : \"Change Display name\"}\n  // </button>\n  React.createElement(\"button\", {\n    onClick: logoutHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 17\n    }\n  }, reduxLan === \"한국어\" ? \"로그아웃\" : \"Logout\"))))));\n};\n\nexport default Navbar;","map":{"version":3,"sources":["/Users/sungjaejoo/Desktop/리액트/인터로거/ILP-main/src/components/Layout/MainNavigation.tsx"],"names":["Toolbar","IconButton","Typography","useMediaQuery","React","useEffect","useState","Box","DrawerComponent","useTheme","ListIcon","useAppSelector","useAppDispatch","useNavigate","usersActions","Navbar","openDrawer","setOpenDrawer","theme","matches","breakpoints","down","reduxIsLoggedIn","state","isLoggedIn","navigate","reduxUser","user","storedLan","localStorage","getItem","dispatch","reduxLan","lan","updateLanguage","logoutHandler","updateIdToken","updateIsLoggedIn","updateUser","removeItem","backgroundColor","display","justifyContent","width","alignItems","padding","marginRight","cursor","color"],"mappings":"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","sourcesContent":["import { Toolbar, IconButton, Typography, useMediaQuery } from \"@mui/material\";\nimport React, { useEffect, useState } from \"react\";\nimport { Box } from \"@mui/system\";\nimport DrawerComponent from \"./DrawerComponent\";\nimport { useTheme } from \"@mui/material/styles\";\nimport ListIcon from \"@mui/icons-material/List\";\nimport { useAppSelector, useAppDispatch } from \"../../store/hooks\";\nimport { useNavigate } from \"react-router-dom\";\nimport { usersActions } from \"../../store/userSlice\";\n\nconst Navbar = () => {\n  const [openDrawer, setOpenDrawer] = useState(true);\n  const theme = useTheme();\n  const matches = useMediaQuery(theme.breakpoints.down(\"sm\"));\n  const reduxIsLoggedIn = useAppSelector((state) => state.isLoggedIn);\n  let navigate = useNavigate();\n  const reduxUser: string = useAppSelector((state) => state.user);\n  const storedLan: string = localStorage.getItem(\"lan\") as string;\n  const dispatch = useAppDispatch();\n  const reduxLan: string = useAppSelector((state) => state.lan);\n\n  useEffect(() => {\n    dispatch(usersActions.updateLanguage(storedLan));\n  }, [storedLan]);\n\n  const logoutHandler = () => {\n    dispatch(usersActions.updateIdToken(\"\"));\n    dispatch(usersActions.updateIsLoggedIn(false));\n    dispatch(usersActions.updateUser(\"\"));\n    localStorage.removeItem(\"token\");\n    localStorage.removeItem(\"isLoggedIn\");\n    localStorage.removeItem(\"user\");\n    navigate(\"/login\");\n  };\n\n  return (\n    <>\n      <Box\n        sx={{\n          backgroundColor:\n            \"linear-gradient(to left, #3399ff 27%, #9999ff 100%);\",\n        }}\n      >\n        <Toolbar>\n          <Box\n            sx={{\n              display: \"flex\",\n              justifyContent: \"space-between\",\n              width: \"100%\",\n              alignItems: \"center\",\n              padding: \"10px 0px\",\n            }}\n            component=\"div\"\n          >\n            {/* link */}\n            {matches && (\n              <DrawerComponent\n                openDrawer={openDrawer}\n                setOpenDrawer={setOpenDrawer}\n              />\n            )}\n            {reduxIsLoggedIn && !matches ? (\n              <Box\n                sx={{\n                  display: \"flex\",\n                }}\n              >\n                <Typography\n                  sx={{\n                    marginRight: \"20px\",\n                    cursor: \"pointer\",\n                    color: \"white\",\n                  }}\n                  onClick={() => {\n                    if (reduxUser === \"Hans\" || reduxUser === \"Sarah\") {\n                      navigate(\"/hompageen\");\n                    } else if (\n                      reduxUser === \"성재\" ||\n                      reduxUser === \"엄마\" ||\n                      reduxUser === \"아빠\" ||\n                      reduxUser === \"은지\"\n                    ) {\n                      navigate(\"/hompagekr\");\n                    }\n                  }}\n                >\n                  {reduxLan === \"한국어\" ? \"홈\" : \"Home\"}\n                </Typography>\n                <Typography\n                  sx={{\n                    marginRight: \"20px\",\n                    cursor: \"pointer\",\n                    color: \"white\",\n                  }}\n                  onClick={() => {\n                    navigate(\"/changepassword\");\n                  }}\n                >\n                  {reduxLan === \"한국어\"\n                    ? \"비밀번호 바꾸기\"\n                    : \"Change Password\"}\n                </Typography>\n                <Typography\n                  sx={{\n                    marginRight: \"20px\",\n                    cursor: \"pointer\",\n                    color: \"white\",\n                  }}\n                  onClick={() => {\n                    if (reduxUser === \"Hans\" || reduxUser === \"Sarah\") {\n                      navigate(\"/msglogen\");\n                    } else if (\n                      reduxUser === \"성재\" ||\n                      reduxUser === \"엄마\" ||\n                      reduxUser === \"아빠\" ||\n                      reduxUser === \"은지\"\n                    ) {\n                      navigate(\"/msglogkr\");\n                    }\n                  }}\n                >\n                  {reduxLan === \"한국어\" ? \"메세지 로그\" : \"Message Log\"}\n                </Typography>\n              </Box>\n            ) : null}\n            {/* Button link */}\n            <Box\n              sx={{\n                display: \"flex\",\n                justifyContent: \"center\",\n                alignItems: \"center\",\n              }}\n            >\n              {matches ? (\n                <IconButton onClick={() => setOpenDrawer(true)}>\n                  <ListIcon></ListIcon>\n                </IconButton>\n              ) : !reduxIsLoggedIn ? (\n                <>\n                  <button\n                    onClick={() => navigate(\"/login\")}\n                    style={{ marginRight: \"20px\" }}\n                  >\n                    {reduxLan === \"한국어\" ? \"로그인\" : \"LogIn\"}\n                  </button>\n                  <button onClick={() => navigate(\"/signin\")}>\n                    {reduxLan === \"한국어\" ? \"계정 생성\" : \"Register Account\"}\n                  </button>\n                </>\n              ) : (\n                // <button onClick={() => navigate(\"/updateusername\")}>\n                //   {reduxLan === \"한국어\"\n                //     ? \"ㄹ\"\n                //     : \"Change Display name\"}\n                // </button>\n                <button onClick={logoutHandler}>\n                  {reduxLan === \"한국어\" ? \"로그아웃\" : \"Logout\"}\n                </button>\n              )}\n            </Box>\n          </Box>\n        </Toolbar>\n      </Box>\n    </>\n  );\n};\n\nexport default Navbar;\n"]},"metadata":{},"sourceType":"module"}